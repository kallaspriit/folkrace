{"version":3,"sources":["containers/LogContainer.ts","lib/web-socket-client/index.ts","config.ts","containers/StatusContainer.ts","services/webSocketClient.ts","services/robot.ts","lib/robot/index.ts","command-handlers/handleSerialCommand.ts","command-handlers/handleGetVoltageCommand.ts","command-handlers/handleIpCommand.ts","command-handlers/handleUsbCommand.ts","containers/OdometryContainer.ts","command-handlers/handleEncoderCommand.ts","command-handlers/handleBeaconCommand.ts","containers/LidarContainer.ts","command-handlers/handleMeasurementCommand.ts","components/glue/ConnectionManager.tsx","components/main-menu/MainMenu.tsx","views/bot/BotView.tsx","components/grid/Grid.tsx","views/map/MapView.tsx","components/joystick/Joystick.tsx","lib/tracked-vehicle-kinematics/index.ts","lib/remote-controller/index.ts","views/remote/RemoteView.tsx","views/settings/SettingsView.tsx","views/status/items/UsbStatus.tsx","views/status/items/WebSocketStatus.tsx","views/status/items/BatteryStatus.tsx","services/assertUnreachable.ts","services/pad.ts","components/icon/Icon.tsx","components/auto-scroll/AutoScroll.tsx","views/status/items/Log.tsx","services/formatTime.ts","views/status/StatusView.tsx","App.tsx","index.tsx"],"names":["MessageType","WebSocketState","LogContainer","state","entries","lastId","message","_this2","this","avoidDuplicate","arguments","length","undefined","setState","previousState","lastEntry","type","resolveMessageType","Object","toConsumableArray","slice","concat","id","toString","time","Date","count","shift","catch","error","console","substr","RX","TX","ERROR","INFO","Container","config","webSocket","host","localStorage","webSocketHost","port","webSocketPort","parseInt","useSSL","reconnectInterval","rules","battery","low","critical","vehicle","trackWidth","maxSpeed","wheelDiameter","encoderCountsPerRotation","gearboxRatio","speedUpdateInterval","SerialType","SerialState","BatteryState","WebSocketClient","options","classCallCheck","connectionState","DISCONNECTED","listeners","wasConnected","objectSpread","log","dummyLogger","url","ws","connect","listener","push","filter","item","_this","addNewLine","CONNECTED","forEach","onSendMessage","send","warn","newState","oldState","onStateChanged","_this3","info","RECONNECTING","CONNECTING","onConnecting","WebSocket","onopen","event","onOpen","onclose","logDetails","code","reason","wasClean","setTimeout","onClose","onerror","onError","onmessage","onMessage","data","StatusContainer","serials","BLUETOOTH","deviceName","USB","webSocketState","typeKey","keys","find","typeName","batteryVoltage","remoteIp","loopFrequency","loopTimeUs","lastBeaconTime","map","serialName","serial","voltage","UNKNOWN","CRITICAL","LOW","FULL","webSocketClient","robot","Robot","left","right","command","_len","args","Array","_key","join","handleSerialCommand","_ref","statusContainer","serialType","serialState","serialDeviceName","setSerialState","connectedSerial","getConnectedSerial","requestState","setBatteryVoltage","handleGetVoltageCommand","parseFloat","handleIpCommand","setRemoteIp","handleUsbCommand","objectDestructuringEmpty","OdometryContainer","handleEncoderCommand","odometryContainer","update","handleBeaconCommand","durationMs","cycleCount","setLoopStatistics","LidarContainer","isStarted","isValid","targetRpm","currentRpm","motorPwm","measurements","measurement","handleMeasurementCommand","lidarContainer","addMeasurement","angle","distance","quality","date","ConnectionManager","isInitialized","webSocketCommandHandlers","ip","usb","e","b","m","react","unstated_es","to","logContainer","setWebSocketState","subscribe","_ws","_wasConnected","addEntry","_event","handleWebSocketMessage","_oldState","_message$split","split","slicedToArray","containers","_message$split3","_message$split4","toArray","name","handleWebSocketCommand","handler","React","MainMenu","className","NavLink","activeClassName","BotView","Grid","children","props","objectWithoutProperties","assign","classNames","GridItem","_ref2","MapView","Grid_Grid","Grid_GridItem","Joystick","ref","el","current","manager","nipplejs","zone","color","size","position","top","mode","onEvent","bind","on","nipple","off","TrackedVehicleKinematics","speed","omega","limit","targetEncoderCountPerSecond","Math","PI","floor","speeds","maxRequestedSpeedMagnitude","max","abs","normalizationFactor","min","getSpeedEncoderCount","RemoteController","kinematics","scheduleUpdateMotorSpeeds","throttle","updateMotorSpeeds","motorSpeeds","calculateMotorSpeeds","encoderSpeeds","getEncoderSpeeds","setSpeed","RemoteView","remoteController","Joystick_Joystick","onJoystickEvent","indexOf","isMoveEvent","xPos","sin","radian","yPos","cos","setOmega","Error","SettingsView","onClick","window","location","href","UsbStatus","titleCase","WebSocketStatus","ping","BatteryStatus","batteryState","value","assertUnreachable","getBatteryLevelClass","requestVoltage","toFixed","pad","padder","str","missingLength","Icon","width","height","style","getStyle","AutoScroll","scrollToBottom","scrollHeight","clientHeight","scrollTop","_this$props","Log","AutoScroll_AutoScroll","entry","key","getHours","getMinutes","getSeconds","getMilliseconds","toLowerCase","clear","icon_Icon","StatusView","items_UsbStatus","items_WebSocketStatus","items_BatteryStatus","items_Log","App","ConnectionManager_ConnectionManager","BrowserRouter","Switch","Route","path","component","exact","Redirect","components_main_menu_MainMenu","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.deb59098.chunk.js","sourcesContent":["import { Container } from \"unstated\";\r\n\r\nexport enum MessageType {\r\n  INFO = \"INFO\",\r\n  ERROR = \"ERROR\",\r\n  RX = \"RX\",\r\n  TX = \"TX\"\r\n}\r\n\r\nexport interface LogEntry {\r\n  id: string;\r\n  time: Date;\r\n  message: string;\r\n  type: MessageType;\r\n  count: number;\r\n}\r\n\r\nexport interface LogState {\r\n  entries: LogEntry[];\r\n}\r\n\r\nexport const MAX_LOG_ENTRY_COUNT = 200;\r\n\r\nexport default class LogContainer extends Container<LogState> {\r\n  readonly state: LogState = {\r\n    entries: []\r\n  };\r\n\r\n  private lastId = 0;\r\n\r\n  addEntry(message: string, avoidDuplicate = true) {\r\n    // update state (use the callback syntax not to miss any updates if called in series)\r\n    this.setState(previousState => {\r\n      const lastEntry =\r\n        this.state.entries.length > 0\r\n          ? this.state.entries[this.state.entries.length - 1]\r\n          : null;\r\n      const type = this.resolveMessageType(message);\r\n\r\n      // skip the message if requested not to add the same message twice in a row\r\n      if (lastEntry !== null && avoidDuplicate) {\r\n        // check whether the latest message is the same as last\r\n        if (message === lastEntry.message) {\r\n          const updatedEntries: LogEntry[] = [\r\n            // remove last entry\r\n            ...previousState.entries.slice(0, this.state.entries.length - 1),\r\n            // add it again with updated time\r\n            {\r\n              id: (this.lastId++).toString(),\r\n              time: new Date(),\r\n              message,\r\n              type,\r\n              count: lastEntry.count + 1\r\n            }\r\n          ];\r\n\r\n          return {\r\n            entries: updatedEntries\r\n          };\r\n        }\r\n      }\r\n\r\n      // appends the log entry\r\n      const entries: LogEntry[] = [\r\n        ...previousState.entries,\r\n        {\r\n          id: (this.lastId++).toString(),\r\n          time: new Date(),\r\n          message,\r\n          type,\r\n          count: 1\r\n        }\r\n      ];\r\n\r\n      // limit the number of entries\r\n      while (entries.length > MAX_LOG_ENTRY_COUNT) {\r\n        entries.shift();\r\n      }\r\n\r\n      return {\r\n        entries\r\n      };\r\n    }).catch(error => console.error(error));\r\n  }\r\n\r\n  clear() {\r\n    this.setState({\r\n      entries: []\r\n    }).catch(error => console.error(error));\r\n  }\r\n\r\n  private resolveMessageType(message: string): MessageType {\r\n    const firstCharacter = message.substr(0, 1);\r\n\r\n    switch (firstCharacter) {\r\n      case \"<\":\r\n        return MessageType.RX;\r\n\r\n      case \">\":\r\n        return MessageType.TX;\r\n\r\n      case \"@\":\r\n        return MessageType.ERROR;\r\n\r\n      case \"#\":\r\n        return MessageType.INFO;\r\n\r\n      default:\r\n        return MessageType.INFO;\r\n    }\r\n  }\r\n}\r\n","import { dummyLogger, Logger } from \"ts-log\";\r\n\r\nexport interface WebSocketClientListener {\r\n  onConnecting(ws: WebSocketClient, wasConnected: boolean): void;\r\n  onOpen(ws: WebSocketClient, event: Event): void;\r\n  onClose(ws: WebSocketClient, event: CloseEvent, wasConnected: boolean): void;\r\n  onError(ws: WebSocketClient, event: Event, wasConnected: boolean): void;\r\n  onMessage(ws: WebSocketClient, message: string): void;\r\n  onStateChanged(\r\n    ws: WebSocketClient,\r\n    newState: WebSocketState,\r\n    oldState: WebSocketState\r\n  ): void;\r\n  onSendMessage(ws: WebSocketClient, e: string): void;\r\n}\r\n\r\nexport interface WebSocketClientOptions {\r\n  host: string;\r\n  port: number;\r\n  useSSL?: boolean;\r\n  reconnectInterval?: number;\r\n  log?: Logger;\r\n}\r\n\r\nexport enum WebSocketState {\r\n  DISCONNECTED = \"DISCONNECTED\",\r\n  CONNECTING = \"CONNECTING\",\r\n  RECONNECTING = \"RECONNECTING\",\r\n  CONNECTED = \"CONNECTED\"\r\n}\r\n\r\nexport default class WebSocketClient {\r\n  private connectionState: WebSocketState = WebSocketState.DISCONNECTED;\r\n  private listeners: WebSocketClientListener[] = [];\r\n  private ws: WebSocket;\r\n  private readonly options: Required<WebSocketClientOptions>;\r\n  private readonly log: Logger;\r\n  private wasConnected = false;\r\n\r\n  constructor(options: WebSocketClientOptions) {\r\n    this.options = {\r\n      useSSL: false,\r\n      log: dummyLogger,\r\n      reconnectInterval: 1000,\r\n      ...options\r\n    };\r\n    this.log = this.options.log;\r\n\r\n    const url = `${this.options.useSSL ? \"wss\" : \"ws\"}://${this.options.host}:${\r\n      this.options.port\r\n    }`;\r\n\r\n    this.ws = this.connect(url);\r\n  }\r\n\r\n  subscribe(listener: WebSocketClientListener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  unsubscribe(listener: WebSocketClientListener) {\r\n    this.listeners = this.listeners.filter(item => item !== listener);\r\n  }\r\n\r\n  get state() {\r\n    return this.connectionState;\r\n  }\r\n\r\n  send(message: string, addNewLine = true) {\r\n    // we can only send messages if we're connected\r\n    if (this.state !== WebSocketState.CONNECTED) {\r\n      this.log.warn(\r\n        `sending message \"${message}\" requested but web-socket is ${\r\n          this.connectionState\r\n        }`\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    // notify the listeners\r\n    this.listeners.forEach(listener => listener.onSendMessage(this, message));\r\n\r\n    // send the message\r\n    this.ws.send(`${message}${addNewLine ? \"\\n\" : \"\"}`);\r\n  }\r\n\r\n  private setState(newState: WebSocketState) {\r\n    // return if state has not changed\r\n    if (newState === this.connectionState) {\r\n      return;\r\n    }\r\n\r\n    const oldState = this.connectionState;\r\n\r\n    this.connectionState = newState;\r\n\r\n    // notify the listeners\r\n    this.listeners.forEach(listener =>\r\n      listener.onStateChanged(this, newState, oldState)\r\n    );\r\n  }\r\n\r\n  private connect(url: string): WebSocket {\r\n    this.log.info(`connecting to web-socket server at ${url}`);\r\n\r\n    // update state\r\n    this.setState(\r\n      this.wasConnected\r\n        ? WebSocketState.RECONNECTING\r\n        : WebSocketState.CONNECTING\r\n    );\r\n\r\n    // notify the listeners\r\n    this.listeners.forEach(listener =>\r\n      listener.onConnecting(this, this.wasConnected)\r\n    );\r\n\r\n    // attempt to open web-socket connection\r\n    this.ws = new WebSocket(url);\r\n\r\n    // handle open event\r\n    this.ws.onopen = event => {\r\n      this.log.info(\"established web-socket connection\");\r\n\r\n      this.wasConnected = true;\r\n\r\n      // update state\r\n      this.setState(WebSocketState.CONNECTED);\r\n\r\n      // notify the listeners\r\n      this.listeners.forEach(listener => listener.onOpen(this, event));\r\n    };\r\n\r\n    // handle close event\r\n    this.ws.onclose = event => {\r\n      const logDetails = `code: ${event.code}, reason: ${\r\n        event.reason\r\n      }, was clean: ${event.wasClean ? \"yes\" : \"no\"}`;\r\n\r\n      if (this.wasConnected) {\r\n        this.log.warn(`connection to web-socket was lost (${logDetails})`);\r\n      } else {\r\n        this.log.warn(`connecting to web-socket failed (${logDetails})`);\r\n      }\r\n\r\n      // update state\r\n      this.setState(WebSocketState.DISCONNECTED);\r\n\r\n      // attempt to reconnect\r\n      setTimeout(() => {\r\n        this.ws = this.connect(url);\r\n      }, this.options.reconnectInterval);\r\n\r\n      // notify the listeners\r\n      this.listeners.forEach(listener =>\r\n        listener.onClose(this, event, this.wasConnected)\r\n      );\r\n    };\r\n\r\n    // handle error event\r\n    this.ws.onerror = event => {\r\n      this.log.warn(\"got web-socket error\");\r\n\r\n      // notify the listeners\r\n      this.listeners.forEach(listener =>\r\n        listener.onError(this, event, this.wasConnected)\r\n      );\r\n    };\r\n\r\n    // handle message event\r\n    this.ws.onmessage = event => {\r\n      // notify the listeners\r\n      this.listeners.forEach(listener => listener.onMessage(this, event.data));\r\n    };\r\n\r\n    return this.ws;\r\n  }\r\n}\r\n","import { WebSocketClientOptions } from \"./lib/web-socket-client/index\";\r\nimport { TrackedVehicleOptions } from \"./lib/tracked-vehicle-kinematics\";\r\n\r\nexport interface RulesConfig {\r\n  battery: {\r\n    low: number;\r\n    critical: number;\r\n  };\r\n}\r\n\r\nexport interface Config {\r\n  webSocket: WebSocketClientOptions;\r\n  rules: RulesConfig;\r\n  vehicle: TrackedVehicleOptions;\r\n}\r\n\r\nconst config: Config = {\r\n  webSocket: {\r\n    // allow overriding web-socket options via local storage\r\n    host:\r\n      localStorage.webSocketHost !== undefined\r\n        ? localStorage.webSocketHost\r\n        : \"127.0.0.1\",\r\n    port:\r\n      localStorage.webSocketPort !== undefined\r\n        ? parseInt(localStorage.webSocketPort, 10)\r\n        : 8000,\r\n    useSSL: false,\r\n    reconnectInterval: 3000\r\n  },\r\n  rules: {\r\n    battery: {\r\n      low: 15.0,\r\n      critical: 13.5\r\n    }\r\n  },\r\n  vehicle: {\r\n    trackWidth: 0.15, // meters\r\n    maxSpeed: 1, // meters per second\r\n    wheelDiameter: 0.039, // meters\r\n    encoderCountsPerRotation: 20, // encoder pulse count per revolution\r\n    gearboxRatio: 25, // 25/1 gearbox ratio\r\n    speedUpdateInterval: 50 // 20Hz\r\n  }\r\n};\r\n\r\nexport default config;\r\n","import { Container } from \"unstated\";\r\n\r\nimport config from \"../config\";\r\nimport { WebSocketState } from \"../lib/web-socket-client/index\";\r\n\r\nexport enum SerialType {\r\n  USB = \"usb\",\r\n  BLUETOOTH = \"bluetooth\"\r\n}\r\n\r\nexport enum SerialState {\r\n  CONNECTING = \"CONNECTING\",\r\n  CONNECTED = \"CONNECTED\",\r\n  DISCONNECTED = \"DISCONNECTED\",\r\n  NOT_SUPPORTED = \"NOT_SUPPORTED\",\r\n  DEVICE_NOT_FOUND = \"DEVICE_NOT_FOUND\",\r\n  DISABLED = \"DISABLED\"\r\n}\r\n\r\nexport interface Serial {\r\n  type: SerialType;\r\n  state: SerialState;\r\n  deviceName?: string;\r\n}\r\n\r\nexport type SerialsMap = { [type in keyof typeof SerialType]: Serial };\r\n\r\nexport interface State {\r\n  readonly webSocketState: WebSocketState;\r\n  readonly serials: SerialsMap;\r\n  readonly batteryVoltage?: number;\r\n  readonly remoteIp?: string;\r\n  readonly lastBeaconTime?: Date;\r\n  readonly loopFrequency?: number;\r\n  readonly loopTimeUs?: number;\r\n}\r\n\r\nexport enum BatteryState {\r\n  UNKNOWN = \"UNKNOWN\",\r\n  FULL = \"FULL\",\r\n  LOW = \"LOW\",\r\n  CRITICAL = \"CRITICAL\"\r\n}\r\n\r\nexport default class StatusContainer extends Container<State> {\r\n  readonly state: State = {\r\n    serials: {\r\n      BLUETOOTH: {\r\n        type: SerialType.BLUETOOTH,\r\n        state: SerialState.DISCONNECTED,\r\n        deviceName: undefined\r\n      },\r\n      USB: {\r\n        type: SerialType.USB,\r\n        state: SerialState.DISCONNECTED,\r\n        deviceName: undefined\r\n      }\r\n    },\r\n    webSocketState: WebSocketState.DISCONNECTED\r\n  };\r\n\r\n  setSerialState(type: SerialType, state: SerialState, deviceName?: string) {\r\n    const typeKey = Object.keys(SerialType).find(\r\n      typeName => SerialType[typeName as keyof typeof SerialType] === type\r\n    ) as keyof typeof SerialType;\r\n    const serials = this.state.serials;\r\n\r\n    // update given serial state and status\r\n    serials[typeKey].state = state;\r\n    serials[typeKey].deviceName = deviceName;\r\n\r\n    // update serial state\r\n    void this.setState({\r\n      serials\r\n    });\r\n  }\r\n\r\n  setWebSocketState(newState: WebSocketState) {\r\n    void this.setState({\r\n      webSocketState: newState\r\n    });\r\n  }\r\n\r\n  setBatteryVoltage(batteryVoltage: number | undefined) {\r\n    void this.setState({\r\n      batteryVoltage\r\n    });\r\n  }\r\n\r\n  setRemoteIp(remoteIp: string) {\r\n    void this.setState({\r\n      remoteIp\r\n    });\r\n  }\r\n\r\n  setLoopStatistics(loopFrequency: number, loopTimeUs: number) {\r\n    void this.setState({\r\n      lastBeaconTime: new Date(),\r\n      loopFrequency,\r\n      loopTimeUs\r\n    });\r\n  }\r\n\r\n  getConnectedSerial(): Serial | undefined {\r\n    const serialNames = Object.keys(\r\n      this.state.serials\r\n    ) as (keyof typeof SerialType)[];\r\n    const connectedSerial = serialNames\r\n      .map(serialName => this.state.serials[serialName])\r\n      .find(serial => serial.state === SerialState.CONNECTED);\r\n\r\n    return connectedSerial;\r\n  }\r\n\r\n  get batteryState(): BatteryState {\r\n    const voltage = this.state.batteryVoltage;\r\n\r\n    if (voltage === undefined) {\r\n      return BatteryState.UNKNOWN;\r\n    }\r\n\r\n    if (voltage <= config.rules.battery.critical) {\r\n      return BatteryState.CRITICAL;\r\n    } else if (voltage <= config.rules.battery.low) {\r\n      return BatteryState.LOW;\r\n    }\r\n\r\n    return BatteryState.FULL;\r\n  }\r\n}\r\n","import config from \"../config\";\r\nimport WebSocketClient from \"../lib/web-socket-client\";\r\n\r\nconst webSocketClient = new WebSocketClient({\r\n  ...config.webSocket,\r\n  log: console\r\n});\r\n\r\nexport default webSocketClient;\r\n","import Robot from \"../lib/robot\";\r\nimport webSocketClient from \"./webSocketClient\";\r\n\r\nconst robot = new Robot(webSocketClient);\r\n\r\nexport default robot;\r\n","import WebSocketClient from \"../web-socket-client\";\r\n\r\nexport type SendArgument = string | number;\r\n\r\nexport default class Robot {\r\n  constructor(private webSocketClient: WebSocketClient) {}\r\n\r\n  requestVoltage() {\r\n    this.send(\"voltage\");\r\n  }\r\n\r\n  requestState() {\r\n    this.send(\"state\");\r\n  }\r\n\r\n  setSpeed(left: number, right: number) {\r\n    this.send(\"s\", left, right);\r\n  }\r\n\r\n  ping() {\r\n    this.send(\"ping\");\r\n  }\r\n\r\n  // don't use directly, add new robot method\r\n  private send(command: string, ...args: SendArgument[]) {\r\n    const message = `${command}${args.length > 0 ? \":\" : \"\"}${args.join(\":\")}`;\r\n\r\n    this.webSocketClient.send(message);\r\n  }\r\n}\r\n","import { ContainerMap } from \"../components/glue/ConnectionManager\";\r\nimport { SerialType, SerialState } from \"../containers/StatusContainer\";\r\nimport robot from \"../services/robot\";\r\n\r\nexport default function handleSerialCommand(\r\n  args: string[],\r\n  { statusContainer }: ContainerMap\r\n) {\r\n  // extract serial info\r\n  const serialType = args[0] as SerialType;\r\n  const serialState = args[1] as SerialState;\r\n  const serialDeviceName = typeof args[2] === \"string\" ? args[2] : undefined;\r\n\r\n  // update serial state\r\n  statusContainer.setSerialState(serialType, serialState, serialDeviceName);\r\n\r\n  const connectedSerial = statusContainer.getConnectedSerial();\r\n\r\n  // ask for some initial state info once a serial connection is established\r\n  if (connectedSerial !== undefined && serialType === connectedSerial.type) {\r\n    // request current state\r\n    robot.requestState();\r\n\r\n    // also setup an interval to ask the voltage level periodically\r\n    // requestBatteryVoltageInterval = window.setInterval(() => {\r\n    //   requestVoltage();\r\n    // }, REQUEST_BATTERY_VOLTAGE_INTERVAL);\r\n  } else {\r\n    // clear the battery voltage interval if exists\r\n    // if (requestBatteryVoltageInterval !== null) {\r\n    //   window.clearInterval(requestBatteryVoltageInterval);\r\n\r\n    //   requestBatteryVoltageInterval = null;\r\n    // }\r\n\r\n    // no serial connection so we can't be sure of battery voltage\r\n    statusContainer.setBatteryVoltage(undefined);\r\n  }\r\n}\r\n","import { ContainerMap } from \"../components/glue/ConnectionManager\";\r\n\r\nexport default function handleGetVoltageCommand(\r\n  args: string[],\r\n  { statusContainer }: ContainerMap\r\n) {\r\n  const voltage = parseFloat(args[0]);\r\n\r\n  statusContainer.setBatteryVoltage(voltage);\r\n}\r\n","import { ContainerMap } from \"../components/glue/ConnectionManager\";\r\n\r\nexport default function handleIpCommand(\r\n  args: string[],\r\n  { statusContainer }: ContainerMap\r\n) {\r\n  const remoteIp = args[0];\r\n\r\n  statusContainer.setRemoteIp(remoteIp);\r\n}\r\n","import { ContainerMap } from \"../components/glue/ConnectionManager\";\r\n\r\nexport default function handleUsbCommand(args: string[], {  }: ContainerMap) {\r\n  const vendorId = parseInt(args[0], 10);\r\n  const productId = parseInt(args[1], 10);\r\n  const productName = args[2];\r\n\r\n  // console.log(\"usb\", {\r\n  //   vendorId,\r\n  //   productId,\r\n  //   productName\r\n  // });\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface State {\r\n  readonly left: number;\r\n  readonly right: number;\r\n}\r\n\r\nexport default class OdometryContainer extends Container<State> {\r\n  readonly state: State = {\r\n    left: 0,\r\n    right: 0\r\n  };\r\n\r\n  update(left: number, right: number) {\r\n    void this.setState({\r\n      left,\r\n      right\r\n    });\r\n  }\r\n}\r\n","import { ContainerMap } from \"../components/glue/ConnectionManager\";\r\n\r\nexport default function handleEncoderCommand(\r\n  args: string[],\r\n  { odometryContainer }: ContainerMap\r\n) {\r\n  const left = parseInt(args[0], 10);\r\n  const right = parseInt(args[1], 10);\r\n\r\n  odometryContainer.update(left, right);\r\n}\r\n","import { ContainerMap } from \"../components/glue/ConnectionManager\";\r\n\r\nexport default function handleBeaconCommand(\r\n  args: string[],\r\n  { statusContainer }: ContainerMap\r\n) {\r\n  const durationMs = parseInt(args[0], 10);\r\n  const cycleCount = parseInt(args[1], 10);\r\n  const loopFrequency = (cycleCount / durationMs) * 1000;\r\n  const loopTimeUs = (durationMs / cycleCount) * 1000;\r\n\r\n  statusContainer.setLoopStatistics(loopFrequency, loopTimeUs);\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface LidarState {\r\n  readonly isStarted: boolean;\r\n  readonly isValid: boolean;\r\n  readonly targetRpm: number;\r\n  readonly currentRpm: number;\r\n  readonly motorPwm: number;\r\n}\r\n\r\nexport interface LidarMeasurement {\r\n  readonly angle: number;\r\n  readonly distance: number;\r\n  readonly quality: number;\r\n  readonly date: Date;\r\n}\r\n\r\nexport interface LidarMeasurements {\r\n  readonly measurements: LidarMeasurement[];\r\n}\r\n\r\n// TODO: measure sampes per second\r\nexport type State = LidarState & LidarMeasurements;\r\n\r\nexport default class LidarContainer extends Container<State> {\r\n  readonly state: State = {\r\n    isStarted: false,\r\n    isValid: false,\r\n    targetRpm: 0,\r\n    currentRpm: 0,\r\n    motorPwm: 0,\r\n    measurements: []\r\n  };\r\n\r\n  updateLidarState(state: LidarState) {\r\n    void this.setState({\r\n      ...state\r\n    });\r\n  }\r\n\r\n  addMeasurement(measurement: LidarMeasurement) {\r\n    void this.setState({\r\n      measurements: [...this.state.measurements, measurement]\r\n    });\r\n  }\r\n}\r\n","import { ContainerMap } from \"../components/glue/ConnectionManager\";\r\n\r\nexport default function handleMeasurementCommand(\r\n  args: string[],\r\n  { lidarContainer }: ContainerMap\r\n) {\r\n  // console.log(\"measurement\", { args });\r\n  lidarContainer.addMeasurement({\r\n    angle: parseInt(args[0], 10),\r\n    distance: parseInt(args[1], 10),\r\n    quality: parseInt(args[2], 10),\r\n    date: new Date()\r\n  });\r\n}\r\n","import * as React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport LogContainer from \"../../containers/LogContainer\";\r\nimport StatusContainer, {\r\n  SerialState,\r\n  SerialType\r\n} from \"../../containers/StatusContainer\";\r\nimport { WebSocketState } from \"../../lib/web-socket-client/index\";\r\nimport webSocketClient from \"../../services/webSocketClient\";\r\nimport handleSerialCommand from \"../../command-handlers/handleSerialCommand\";\r\nimport handleGetVoltageCommand from \"../../command-handlers/handleGetVoltageCommand\";\r\nimport handleIpCommand from \"../../command-handlers/handleIpCommand\";\r\nimport handleUsbCommand from \"../../command-handlers/handleUsbCommand\";\r\nimport OdometryContainer from \"../../containers/OdometryContainer\";\r\nimport handleEncoderCommand from \"../../command-handlers/handleEncoderCommand\";\r\nimport handleBeaconCommand from \"../../command-handlers/handleBeaconCommand\";\r\nimport LidarContainer from \"../../containers/LidarContainer\";\r\nimport handleMeasurementCommand from \"../../command-handlers/handleMeasurementCommand\";\r\n\r\nexport interface ContainerMap {\r\n  logContainer: LogContainer;\r\n  statusContainer: StatusContainer;\r\n  odometryContainer: OdometryContainer;\r\n  lidarContainer: LidarContainer;\r\n}\r\n\r\nexport type WebSocketCommandHandlerFn = (\r\n  args: string[],\r\n  containers: ContainerMap\r\n) => void;\r\n\r\nexport interface WebSocketCommandHandlersMap {\r\n  [x: string]: WebSocketCommandHandlerFn | undefined;\r\n}\r\n\r\n// connection manager component, connects external data to containers, does not render anything visual\r\nexport default class ConnectionManager extends React.Component {\r\n  private isInitialized = false;\r\n  private webSocketCommandHandlers: WebSocketCommandHandlersMap = {\r\n    serial: handleSerialCommand,\r\n    ip: handleIpCommand,\r\n    usb: handleUsbCommand,\r\n    voltage: handleGetVoltageCommand,\r\n    e: handleEncoderCommand,\r\n    b: handleBeaconCommand,\r\n    m: handleMeasurementCommand\r\n\r\n    // TODO: handle \"speed\"\r\n    // TODO: handle \"reset\"\r\n    // TODO: handle \"button\"\r\n    // TODO: handle \"pong\"\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Subscribe\r\n        to={[LogContainer, StatusContainer, OdometryContainer, LidarContainer]}\r\n      >\r\n        {(\r\n          logContainer: LogContainer,\r\n          statusContainer: StatusContainer,\r\n          odometryContainer: OdometryContainer,\r\n          lidarContainer: LidarContainer\r\n        ) => {\r\n          // only initialize the connection logic once\r\n          if (this.isInitialized) {\r\n            return null;\r\n          }\r\n\r\n          // set initial state\r\n          statusContainer.setWebSocketState(webSocketClient.state);\r\n\r\n          // subscribe to web-socket events\r\n          webSocketClient.subscribe({\r\n            onConnecting: (_ws, _wasConnected) => {\r\n              logContainer.addEntry(\"# web-socket connecting..\");\r\n            },\r\n            onOpen: (_ws, _event) => {\r\n              logContainer.addEntry(\"# web-socket connection established\");\r\n            },\r\n            onClose: (_ws, _event, wasConnected) => {\r\n              if (wasConnected) {\r\n                logContainer.addEntry(\"# web-socket connection was lost\");\r\n              } else {\r\n                logContainer.addEntry(\r\n                  \"# establishing web-socket connection failed\"\r\n                );\r\n              }\r\n            },\r\n            onError: (_ws, _event, _wasConnected) => {\r\n              logContainer.addEntry(\"# get web-socket error\");\r\n            },\r\n            onMessage: (_ws, message) => {\r\n              // handle the message\r\n              this.handleWebSocketMessage(message, {\r\n                logContainer,\r\n                statusContainer,\r\n                odometryContainer,\r\n                lidarContainer\r\n              });\r\n            },\r\n            onStateChanged: (_ws, newState, _oldState) => {\r\n              statusContainer.setWebSocketState(newState);\r\n\r\n              // also reset other statuses if web-socket connection is lost\r\n              if (newState === WebSocketState.DISCONNECTED) {\r\n                statusContainer.setSerialState(\r\n                  SerialType.BLUETOOTH,\r\n                  SerialState.DISCONNECTED\r\n                );\r\n                statusContainer.setSerialState(\r\n                  SerialType.USB,\r\n                  SerialState.DISCONNECTED\r\n                );\r\n                statusContainer.setBatteryVoltage(undefined);\r\n              }\r\n            },\r\n            onSendMessage: (_ws, message) => {\r\n              const [name] = message.split(\":\");\r\n\r\n              // don't log single-character fast commands (\"s\" for speed etc)\r\n              if (name.length === 1) {\r\n                return;\r\n              }\r\n\r\n              logContainer.addEntry(`> ${message}`);\r\n            }\r\n          });\r\n\r\n          // don't run this logic again\r\n          this.isInitialized = true;\r\n\r\n          // don't render anything\r\n          return null;\r\n        }}\r\n      </Subscribe>\r\n    );\r\n  }\r\n\r\n  // handles web-socket messages\r\n  private handleWebSocketMessage(message: string, containers: ContainerMap) {\r\n    // ignore empty messages\r\n    if (message.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // parse message\r\n    const [name, ...args] = message.split(\":\");\r\n\r\n    // dont log single-character commands (fast lidar measurements, encoders etc)\r\n    if (name.length > 1) {\r\n      containers.logContainer.addEntry(`< ${message}`);\r\n    }\r\n\r\n    // attempt to handle command\r\n    this.handleWebSocketCommand(name, args, containers);\r\n  }\r\n\r\n  // handles parsed web-socket commands\r\n  private handleWebSocketCommand(\r\n    name: string,\r\n    args: string[],\r\n    containers: ContainerMap\r\n  ) {\r\n    const handler = this.webSocketCommandHandlers[name];\r\n\r\n    // check whether the handler exists\r\n    if (handler === undefined) {\r\n      console.warn(\r\n        `missing web-socket command handler for \"${name}\" (${args.join(\", \")})`\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    // call the handler\r\n    handler(args, containers);\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport \"./MainMenu.scss\";\r\n\r\nconst MainMenu: React.SFC<{}> = () => (\r\n  <div className=\"main-menu\">\r\n    <ul className=\"main-menu__nav\">\r\n      <li>\r\n        <NavLink to=\"/status\" activeClassName=\"active\">\r\n          <div className=\"main-menu__nav__icon\">\r\n            <i className=\"icon icon__status\" />\r\n          </div>\r\n          <div className=\"main-menu__nav__text\">\r\n            <span>status</span>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/map\" activeClassName=\"active\">\r\n          <div className=\"main-menu__nav__icon\">\r\n            <i className=\"icon icon__map\" />\r\n          </div>\r\n          <div className=\"main-menu__nav__text\">\r\n            <span>map</span>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/ai\" activeClassName=\"active\">\r\n          <div className=\"main-menu__nav__icon\">\r\n            <i className=\"icon icon__bot\" />\r\n          </div>\r\n          <div className=\"main-menu__nav__text\">\r\n            <span>bot</span>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/remote\" activeClassName=\"active\">\r\n          <div className=\"main-menu__nav__icon\">\r\n            <i className=\"icon icon__remote\" />\r\n          </div>\r\n          <div className=\"main-menu__nav__text\">\r\n            <span>remote</span>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/settings\" activeClassName=\"active\">\r\n          <div className=\"main-menu__nav__icon\">\r\n            <i className=\"icon icon__settings\" />\r\n          </div>\r\n          <div className=\"main-menu__nav__text\">\r\n            <span>settings</span>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default MainMenu;\r\n","import * as React from \"react\";\r\n\r\nconst BotView: React.SFC<{}> = () => <div className=\"view view--text bot-view\">Bot</div>;\r\n\r\nexport default BotView;\r\n","import classNames from \"classnames\";\r\nimport * as React from \"react\";\r\n\r\nimport \"./Grid.scss\";\r\n\r\nexport type GridProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\nexport type GridItemProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\n\r\nexport const Grid: React.SFC<GridProps> = ({\r\n  children,\r\n  className,\r\n  ...props\r\n}) => (\r\n  <div {...props} className={classNames(\"grid\", className)}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport const GridItem: React.SFC<GridItemProps> = ({\r\n  children,\r\n  className,\r\n  ...props\r\n}) => (\r\n  <div {...props} className={classNames(\"grid__item\", className)}>\r\n    {children}\r\n  </div>\r\n);\r\n","import * as React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\nimport OdometryContainer from \"../../containers/OdometryContainer\";\r\nimport { Grid, GridItem } from \"../../components/grid/Grid\";\r\n\r\nimport \"./MapView.scss\";\r\nimport LidarContainer, {\r\n  LidarMeasurement\r\n} from \"../../containers/LidarContainer\";\r\n\r\nconst MapView: React.SFC = () => (\r\n  <div className=\"view view--grid map-view\">\r\n    <Grid className=\"map-grid\">\r\n      <Subscribe to={[OdometryContainer]}>\r\n        {(odometryContainer: OdometryContainer) => (\r\n          <React.Fragment>\r\n            <GridItem className=\"text\">\r\n              Left: {odometryContainer.state.left}\r\n            </GridItem>\r\n            <GridItem className=\"text\">\r\n              Right: {odometryContainer.state.right}\r\n            </GridItem>\r\n          </React.Fragment>\r\n        )}\r\n      </Subscribe>\r\n      <Subscribe to={[LidarContainer]}>\r\n        {(lidarContainer: LidarContainer) => (\r\n          <React.Fragment>\r\n            <GridItem className=\"text\">\r\n              Measurement count: {lidarContainer.state.measurements.length}\r\n            </GridItem>\r\n            <GridItem className=\"text\">\r\n              Last measurement:{\" \"}\r\n              {renderMeasurement(\r\n                lidarContainer.state.measurements[\r\n                  lidarContainer.state.measurements.length - 1\r\n                ]\r\n              )}\r\n            </GridItem>\r\n          </React.Fragment>\r\n        )}\r\n      </Subscribe>\r\n    </Grid>\r\n  </div>\r\n);\r\n\r\nfunction renderMeasurement(measurement?: LidarMeasurement) {\r\n  if (!measurement) {\r\n    return \"n/a\";\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <strong>Angle:</strong> {measurement.angle}\r\n      </div>\r\n      <div>\r\n        <strong>Distance:</strong> {measurement.distance}\r\n      </div>\r\n      <div>\r\n        <strong>Quality:</strong> {measurement.quality}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapView;\r\n","import * as nipplejs from \"nipplejs\";\r\nimport * as React from \"react\";\r\n\r\nexport interface JoystickProps {\r\n  name: string;\r\n  config?: nipplejs.JoystickOptions;\r\n  bind?: string;\r\n  onEvent?(\r\n    name: string,\r\n    event: nipplejs.JoystickEvent,\r\n    info: nipplejs.JoystickInstance\r\n  ): void;\r\n}\r\n\r\nexport default class Joystick extends React.Component<JoystickProps> {\r\n  private readonly ref = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidMount() {\r\n    const el = this.ref.current;\r\n\r\n    // return if element could not be found\r\n    if (!el) {\r\n      console.warn(\"grid item dom node not found\");\r\n\r\n      return;\r\n    }\r\n\r\n    // create the nipple manager\r\n    const manager = nipplejs.create({\r\n      zone: el,\r\n      color: \"#FFF\",\r\n      size: 200,\r\n      position: {\r\n        left: \"50%\",\r\n        top: \"50%\"\r\n      },\r\n      mode: \"static\"\r\n    });\r\n\r\n    const { onEvent } = this.props;\r\n\r\n    // only listen for events if even listener has been added\r\n    if (typeof onEvent === \"function\") {\r\n      const bind = this.props.bind\r\n        ? this.props.bind\r\n        : \"start move end dir plain\";\r\n\r\n      manager\r\n        .on(bind, (event, nipple) => {\r\n          onEvent(this.props.name, event, nipple);\r\n        })\r\n        .on(\"removed\", (_event, nipple) => {\r\n          nipple.off(bind);\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"joystick\" ref={this.ref} />;\r\n  }\r\n}\r\n","export interface TrackedVehicleOptions {\r\n  trackWidth: number;\r\n  maxSpeed: number;\r\n  wheelDiameter: number;\r\n  encoderCountsPerRotation: number;\r\n  gearboxRatio: number;\r\n  speedUpdateInterval: number;\r\n}\r\n\r\nexport interface MotorSpeeds {\r\n  left: number;\r\n  right: number;\r\n}\r\n\r\n// https://pdfs.semanticscholar.org/29ae/0bc974737b58afd63b6edb8d0837a3383321.pdf\r\nexport default class TrackedVehicleKinematics {\r\n  constructor(private readonly options: TrackedVehicleOptions) {}\r\n\r\n  /**\r\n   * Returns motor speeds in m/s for requested forward speed at given rotational speed.\r\n   *\r\n   * @param speed Speed in m/s\r\n   * @param omega Rotational speed in rad/s\r\n   */\r\n  calculateMotorSpeeds(speed: number, omega: number): MotorSpeeds {\r\n    // TODO: calculate actual kinematics\r\n    return this.limit(\r\n      {\r\n        left: speed + omega,\r\n        right: speed - omega\r\n      },\r\n      this.options.maxSpeed\r\n    );\r\n  }\r\n\r\n  getSpeedEncoderCount(speed: number) {\r\n    const circumference = this.options.wheelDiameter * Math.PI;\r\n    const rps = speed / circumference;\r\n    const actualEncoderCountPerRevolution =\r\n      this.options.encoderCountsPerRotation * this.options.gearboxRatio;\r\n    const targetEncoderCountPerSecond = rps * actualEncoderCountPerRevolution;\r\n\r\n    return Math.floor(targetEncoderCountPerSecond);\r\n  }\r\n\r\n  limit(speeds: MotorSpeeds, maxSpeed: number): MotorSpeeds {\r\n    const maxRequestedSpeedMagnitude = Math.max(\r\n      Math.abs(speeds.left),\r\n      Math.abs(speeds.right)\r\n    );\r\n    const normalizationFactor = Math.min(\r\n      maxSpeed / maxRequestedSpeedMagnitude,\r\n      1.0\r\n    );\r\n\r\n    // console.log(\"normalize\", {\r\n    //   maxRequestedSpeedMagnitude,\r\n    //   normalizationFactor,\r\n    //   speeds,\r\n    //   maxSpeed,\r\n    // });\r\n\r\n    return {\r\n      left: speeds.left * normalizationFactor,\r\n      right: speeds.right * normalizationFactor\r\n    };\r\n  }\r\n\r\n  getEncoderSpeeds(speeds: MotorSpeeds): MotorSpeeds {\r\n    return {\r\n      left: this.getSpeedEncoderCount(speeds.left),\r\n      right: this.getSpeedEncoderCount(speeds.right)\r\n    };\r\n  }\r\n}\r\n","import throttle from \"lodash.throttle\";\r\nimport { dummyLogger, Logger } from \"ts-log\";\r\n\r\nimport WebSocketClient from \"../web-socket-client/index\";\r\nimport TrackedVehicleKinematics, {\r\n  TrackedVehicleOptions\r\n} from \"../tracked-vehicle-kinematics\";\r\nimport robot from \"../../services/robot\";\r\n\r\nexport interface RemoteControllerOptions {\r\n  webSocketClient: WebSocketClient;\r\n  vehicle: TrackedVehicleOptions;\r\n  log?: Logger;\r\n}\r\n\r\nexport default class RemoteController {\r\n  private readonly options: Required<RemoteControllerOptions>;\r\n  private readonly kinematics: TrackedVehicleKinematics;\r\n  private speed = 0;\r\n  private omega = 0;\r\n  private readonly scheduleUpdateMotorSpeeds: () => void;\r\n\r\n  constructor(options: RemoteControllerOptions) {\r\n    this.options = {\r\n      log: dummyLogger,\r\n      ...options\r\n    };\r\n    this.kinematics = new TrackedVehicleKinematics(this.options.vehicle);\r\n\r\n    this.scheduleUpdateMotorSpeeds = throttle(\r\n      () => this.updateMotorSpeeds(),\r\n      this.options.vehicle.speedUpdateInterval\r\n    );\r\n  }\r\n\r\n  setSpeed(speed: number) {\r\n    this.speed = speed;\r\n\r\n    this.scheduleUpdateMotorSpeeds();\r\n  }\r\n\r\n  setOmega(omega: number) {\r\n    this.omega = omega;\r\n\r\n    this.scheduleUpdateMotorSpeeds();\r\n  }\r\n\r\n  private updateMotorSpeeds() {\r\n    const motorSpeeds = this.kinematics.calculateMotorSpeeds(\r\n      this.speed,\r\n      this.omega\r\n    );\r\n    const encoderSpeeds = this.kinematics.getEncoderSpeeds(motorSpeeds);\r\n\r\n    // TODO: only send if sufficiently different from last sent values\r\n    robot.setSpeed(encoderSpeeds.left, encoderSpeeds.right);\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport Joystick from \"../../components/joystick/Joystick\";\r\nimport { JoystickEvent, JoystickEventName, JoystickInstance } from \"nipplejs\";\r\nimport config from \"../../config\";\r\nimport RemoteController from \"../../lib/remote-controller\";\r\nimport webSocketClient from \"../../services/webSocketClient\";\r\n\r\nimport \"./RemoteView.scss\";\r\n\r\n// TODO: show track speeds on edges (target and real)\r\nexport default class RemoteView extends React.Component {\r\n  private readonly remoteController = new RemoteController({\r\n    webSocketClient,\r\n    log: console,\r\n    vehicle: config.vehicle\r\n  });\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"view view--grid remote-view\">\r\n        <div className=\"joystick-grid\">\r\n          <div className=\"joystick-grid__item\">\r\n            <Joystick\r\n              name=\"speed\"\r\n              onEvent={(name, event, info) =>\r\n                this.onJoystickEvent(name, event, info)\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"joystick-grid__item\">\r\n            <Joystick\r\n              name=\"omega\"\r\n              onEvent={(name, event, info) =>\r\n                this.onJoystickEvent(name, event, info)\r\n              }\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private onJoystickEvent(\r\n    name: string,\r\n    event: JoystickEvent,\r\n    info: JoystickInstance\r\n  ) {\r\n    const interestingEvents: JoystickEventName[] = [\"move\", \"end\"];\r\n\r\n    if (interestingEvents.indexOf(event.type) === -1) {\r\n      return;\r\n    }\r\n\r\n    const isMoveEvent = event.type === \"move\";\r\n\r\n    const xPos = isMoveEvent ? Math.sin(info.angle.radian) * info.distance : 0;\r\n    const yPos = isMoveEvent ? Math.cos(info.angle.radian) * info.distance : 0;\r\n\r\n    // console.log(`${name} x: ${xPos}, y: ${yPos}, distance: ${info.distance}`, this.remoteController);\r\n\r\n    switch (name) {\r\n      case \"speed\":\r\n        this.remoteController.setSpeed((yPos * -1) / 100.0);\r\n        break;\r\n\r\n      case \"omega\":\r\n        this.remoteController.setOmega(xPos / 100.0);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(`Got unexpected joystick \"${name}\" info`);\r\n    }\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nconst SettingsView: React.SFC<{}> = () => <div className=\"view view--text settings-view\">\r\n  <button onClick={() => window.location.href = \"http://kallaspriit\"}>Open http://kallaspriit</button>\r\n</div>;\r\n\r\nexport default SettingsView;\r\n","import * as React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\nimport StatusContainer, {\r\n  SerialType\r\n} from \"../../../containers/StatusContainer\";\r\nimport { GridItem } from \"../../../components/grid/Grid\";\r\nimport classNames from \"classnames\";\r\nimport titleCase from \"title-case\";\r\n\r\nconst UsbStatus: React.SFC = () => (\r\n  <Subscribe to={[StatusContainer]}>\r\n    {(statusContainer: StatusContainer) => {\r\n      const connectedSerial = statusContainer.getConnectedSerial();\r\n\r\n      return (\r\n        <GridItem\r\n          className={classNames(\r\n            \"grid-status\",\r\n            connectedSerial !== undefined ? \"bg--good\" : \"bg--bad\"\r\n          )}\r\n        >\r\n          <div className=\"grid__icon\">\r\n            <i\r\n              className={\r\n                connectedSerial && connectedSerial.type === SerialType.BLUETOOTH\r\n                  ? \"icon icon__bluetooth\"\r\n                  : \"icon icon__serial\"\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"grid__text\">\r\n            <div className=\"grid__text--primary\">\r\n              {connectedSerial ? connectedSerial.type : \"Serial\"}\r\n            </div>\r\n            <div className=\"grid__text--secondary\">\r\n              {titleCase(\r\n                connectedSerial ? connectedSerial.state : \"Disconnected\"\r\n              )}\r\n              {connectedSerial && connectedSerial.deviceName\r\n                ? `: ${connectedSerial.deviceName}`\r\n                : \"\"}\r\n            </div>\r\n          </div>\r\n        </GridItem>\r\n      );\r\n    }}\r\n  </Subscribe>\r\n);\r\n\r\nexport default UsbStatus;\r\n","import * as React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\nimport StatusContainer from \"../../../containers/StatusContainer\";\r\nimport { GridItem } from \"../../../components/grid/Grid\";\r\nimport classNames from \"classnames\";\r\nimport titleCase from \"title-case\";\r\nimport { WebSocketState } from \"../../../lib/web-socket-client\";\r\nimport robot from \"../../../services/robot\";\r\n\r\nconst WebSocketStatus: React.SFC = () => (\r\n  <Subscribe to={[StatusContainer]}>\r\n    {(statusContainer: StatusContainer) => (\r\n      <GridItem\r\n        className={classNames(\r\n          \"grid-status\",\r\n          statusContainer.state.webSocketState === WebSocketState.CONNECTED\r\n            ? \"bg--good\"\r\n            : \"bg--bad\"\r\n        )}\r\n        onClick={() => robot.ping()}\r\n      >\r\n        <div className=\"grid__icon\">\r\n          <i className=\"icon icon__web-socket\" />\r\n        </div>\r\n        <div className=\"grid__text\">\r\n          <div className=\"grid__text--primary\">Web Socket</div>\r\n          <div className=\"grid__text--secondary\">\r\n            {statusContainer.state.webSocketState !==\r\n              WebSocketState.CONNECTED &&\r\n            statusContainer.state.remoteIp !== undefined\r\n              ? titleCase(statusContainer.state.webSocketState)\r\n              : statusContainer.state.remoteIp}\r\n          </div>\r\n        </div>\r\n      </GridItem>\r\n    )}\r\n  </Subscribe>\r\n);\r\n\r\nexport default WebSocketStatus;\r\n","import * as React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\nimport StatusContainer, {\r\n  BatteryState\r\n} from \"../../../containers/StatusContainer\";\r\nimport { GridItem } from \"../../../components/grid/Grid\";\r\nimport classNames from \"classnames\";\r\nimport assertUnreachable from \"../../../services/assertUnreachable\";\r\nimport robot from \"../../../services/robot\";\r\n\r\nconst BatteryStatus: React.SFC = () => (\r\n  <Subscribe to={[StatusContainer]}>\r\n    {(statusContainer: StatusContainer) => (\r\n      <GridItem\r\n        className={classNames(\r\n          \"grid-status\",\r\n          getBatteryLevelClass(statusContainer.batteryState)\r\n        )}\r\n        onClick={() => robot.requestVoltage()}\r\n      >\r\n        <div className=\"grid__icon\">\r\n          <i className=\"icon icon__battery\" />\r\n        </div>\r\n        <div className=\"grid__text\">\r\n          <div className=\"grid__text--primary\">Battery</div>\r\n          <div className=\"grid__text--secondary\">\r\n            {statusContainer.state.batteryVoltage\r\n              ? `${statusContainer.state.batteryVoltage.toFixed(1)}V`\r\n              : \"Unknown\"}\r\n          </div>\r\n        </div>\r\n      </GridItem>\r\n    )}\r\n  </Subscribe>\r\n);\r\n\r\nfunction getBatteryLevelClass(batteryState: BatteryState): string {\r\n  switch (batteryState) {\r\n    case BatteryState.UNKNOWN:\r\n      return \"bg--warn\";\r\n\r\n    case BatteryState.FULL:\r\n      return \"bg--good\";\r\n\r\n    case BatteryState.LOW:\r\n      return \"bg--warn\";\r\n\r\n    case BatteryState.CRITICAL:\r\n      return \"bg--bad\";\r\n\r\n    default:\r\n      return assertUnreachable(batteryState, \"got unexpected battery state\");\r\n  }\r\n}\r\n\r\nexport default BatteryStatus;\r\n","export default function assertUnreachable(\r\n  value: never,\r\n  message: string\r\n): never {\r\n  throw new Error(`${message} (${value})`);\r\n}\r\n","export default function pad(\r\n  data: string | number,\r\n  length: number,\r\n  padder = \" \"\r\n): string {\r\n  const str = typeof data === \"string\" ? data : data.toString();\r\n\r\n  // return as is if already long enough\r\n  if (str.length >= length) {\r\n    return str;\r\n  }\r\n\r\n  const missingLength = length - str.length;\r\n\r\n  return `${new Array(missingLength + 1).join(padder)}${str}`;\r\n}\r\n","import classNames from \"classnames\";\r\nimport * as React from \"react\";\r\n\r\nexport type IconProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLElement>,\r\n  HTMLElement\r\n> & {\r\n  name: string;\r\n  width?: string | number;\r\n  height?: string | number;\r\n};\r\n\r\nconst Icon: React.SFC<IconProps> = ({\r\n  children,\r\n  name,\r\n  width,\r\n  height,\r\n  className\r\n}) => (\r\n  <i\r\n    className={classNames(\"icon\", `icon__${name}`, className)}\r\n    style={getStyle(width, height)}\r\n  >\r\n    {children}\r\n  </i>\r\n);\r\n\r\nfunction getStyle(\r\n  width: string | number | undefined,\r\n  height: string | number | undefined\r\n): React.CSSProperties {\r\n  const style: React.CSSProperties = {};\r\n\r\n  if (typeof width === \"string\") {\r\n    style.width = `${width}${\r\n      parseFloat(width).toString() === width ? \"px\" : \"\"\r\n    }`;\r\n  } else if (typeof width === \"number\") {\r\n    style.width = `${width}px`;\r\n  }\r\n\r\n  if (typeof height === \"string\") {\r\n    style.height = `${height}${\r\n      parseFloat(height).toString() === height ? \"px\" : \"\"\r\n    }`;\r\n  } else if (typeof height === \"number\") {\r\n    style.height = `${height}px`;\r\n  }\r\n\r\n  return style;\r\n}\r\n\r\nexport default Icon;\r\n","import * as React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nexport type Props = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLElement>,\r\n  HTMLElement\r\n> & {\r\n  scrollToBottom?: boolean;\r\n};\r\n\r\nexport default class AutoScroll extends React.Component<Props> {\r\n  private readonly ref = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidUpdate() {\r\n    // return if scrolling to bottom is not requested, default to true\r\n    if (this.props.scrollToBottom === false) {\r\n      return;\r\n    }\r\n\r\n    // get the dom node from the reference\r\n    const el = this.ref.current;\r\n\r\n    // return if element could not be found\r\n    if (!el) {\r\n      console.warn(\"auto-scroll dom node not found\");\r\n\r\n      return;\r\n    }\r\n\r\n    // check whether we're aready near the bottom\r\n    const isNearBottom = el.scrollHeight - el.clientHeight <= el.scrollTop + 50;\r\n\r\n    // only force the scroll if near bottom\r\n    if (isNearBottom) {\r\n      el.scrollTop = el.scrollHeight - el.clientHeight;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // filter out unsupported props\r\n    const { scrollToBottom, ...props } = this.props;\r\n\r\n    return (\r\n      <div {...props} ref={this.ref}>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\nimport LogContainer from \"../../../containers/LogContainer\";\r\nimport { GridItem } from \"../../../components/grid/Grid\";\r\nimport formatTime from \"../../../services/formatTime\";\r\nimport Icon from \"../../../components/icon/Icon\";\r\nimport AutoScroll from \"../../../components/auto-scroll/AutoScroll\";\r\n\r\nconst Log: React.SFC = () => (\r\n  <Subscribe to={[LogContainer]}>\r\n    {(logContainer: LogContainer) => (\r\n      <GridItem className=\"log\">\r\n        <AutoScroll className=\"log__wrap\">\r\n          {logContainer.state.entries.map(entry => (\r\n            <div className=\"log__entry\" key={entry.id}>\r\n              <span className=\"log__entry__time\">{formatTime(entry.time)}</span>{\" \"}\r\n              <span\r\n                className={`log__entry__message log__entry__message--${entry.type.toLowerCase()}`}\r\n              >\r\n                {entry.message}\r\n              </span>\r\n              {entry.count > 1 ? (\r\n                <span className=\"log__entry__count\">{entry.count}</span>\r\n              ) : null}\r\n            </div>\r\n          ))}\r\n        </AutoScroll>\r\n        <div className=\"clear-log-button\" onClick={() => logContainer.clear()}>\r\n          <Icon name=\"clear\" />\r\n        </div>\r\n      </GridItem>\r\n    )}\r\n  </Subscribe>\r\n);\r\n\r\nexport default Log;\r\n","import pad from \"./pad\";\r\n\r\nexport default function formatTime(date: Date): string {\r\n  return (\r\n    `${pad(date.getHours(), 2, \"0\")}:` +\r\n    `${pad(date.getMinutes(), 2, \"0\")}:` +\r\n    `${pad(date.getSeconds(), 2, \"0\")}.` +\r\n    `${pad(date.getMilliseconds(), 3, \"0\")}`\r\n  );\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport { Grid } from \"../../components/grid/Grid\";\r\n\r\nimport \"./StatusView.scss\";\r\nimport UsbStatus from \"./items/UsbStatus\";\r\nimport WebSocketStatus from \"./items/WebSocketStatus\";\r\nimport BatteryStatus from \"./items/BatteryStatus\";\r\nimport Log from \"./items/Log\";\r\n\r\n// TODO: add motor controller, http server, IMU, heartbeat\r\nconst StatusView: React.SFC = () => (\r\n  <div className=\"view view--grid status-view\">\r\n    <Grid className=\"status-grid\">\r\n      <UsbStatus />\r\n      <WebSocketStatus />\r\n      <BatteryStatus />\r\n      <Log />\r\n    </Grid>\r\n  </div>\r\n);\r\n\r\nexport default StatusView;\r\n","import * as React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch\n} from \"react-router-dom\";\nimport { Provider } from \"unstated\";\n\nimport ConnectionManager from \"./components/glue/ConnectionManager\";\nimport MainMenu from \"./components/main-menu/MainMenu\";\nimport BotView from \"./views/bot/BotView\";\nimport MapView from \"./views/map/MapView\";\nimport RemoteView from \"./views/remote/RemoteView\";\nimport SettingsView from \"./views/settings/SettingsView\";\nimport StatusView from \"./views/status/StatusView\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider>\n        <ConnectionManager />\n        <Router>\n          <div className=\"app\">\n            <Switch>\n              <Route path=\"/status\" component={StatusView} />\n              <Route path=\"/map\" component={MapView} />\n              <Route path=\"/remote\" component={RemoteView} />\n              <Route path=\"/ai\" component={BotView} />\n              <Route path=\"/settings\" component={SettingsView} />\n              <Route exact={true} path=\"/\">\n                <Redirect to=\"/status\" />\n              </Route>\n            </Switch>\n            <MainMenu />\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport \"reset-css\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}