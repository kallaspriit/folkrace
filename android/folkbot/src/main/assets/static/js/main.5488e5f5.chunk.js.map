{"version":3,"sources":["containers/StatusContainer.ts","containers/AhrsContainer.ts","containers/ButtonContainer.ts","containers/LogContainer.ts","containers/LidarContainer.ts","containers/MeasurementsContainer.ts","containers/OdometryContainer.ts","containers/RobotContainer.ts","handlers/handleSerialCommand.ts","handlers/index.ts","handlers/handleIpCommand.ts","handlers/handleUsbCommand.ts","handlers/handleGetVoltageCommand.ts","handlers/handleButtonCommand.ts","handlers/handleResetCommand.ts","handlers/handleCurrentCommand.ts","handlers/handleLidarStateCommand.ts","handlers/handlePongCommand.ts","handlers/handleEncoderCommand.ts","handlers/handleBeaconCommand.ts","handlers/handleLidarMeasurementCommand.ts","handlers/handleSpeedCommand.ts","handlers/handleAhrsCommand.ts","services/containers.ts","services/log.ts","components/Hub.tsx","components/Icon.tsx","components/Text.tsx","components/MainMenu.tsx","theme.ts","components/View.tsx","views/MapView.tsx","components/Grid.tsx","components/Joystick.tsx","views/RemoteView.tsx","views/SettingsView.tsx","views/SimulationView.tsx","components/BatteryStatus.tsx","services/assertUnreachable.ts","components/LidarStatus.tsx","services/pad.ts","components/AutoScroll.tsx","components/Log.tsx","services/formatTime.ts","components/TransportStatus.tsx","components/UsbStatus.tsx","views/StatusView.tsx","App.tsx","index.tsx","config.ts","lib/transport/WebsocketTransport.ts","lib/transport/NativeTransport.ts","lib/transport/MultiTransport.ts","services/nativeTransport.ts","services/simulatedRobot.ts","services/simulatedTransport.ts","services/websocketTransport.ts","services/multiTransport.ts","lib/fps-counter/FpsCounter.ts","lib/gamepad/GamepadManager.ts","lib/gamepad/ManagedGamepad.ts","lib/occupancy-grid/OccupancyGrid.ts","lib/statistics/Statistic.ts","lib/statistics/Statistics.ts","lib/simulator/Simulator.ts","lib/simulator/SimulatedTransport.ts","lib/ticker/Ticker.ts","lib/tracked-vehicle-kinematics/TrackedVehicleKinematics.ts","services/drawRobot.ts","services/map.ts","lib/visualizer/Layer.ts","lib/visualizer/Visualizer.ts","lib/remote-controller/RemoteController.ts","lib/simulator/SimulatedRobot.ts","lib/transport/Transport.ts","components/LidarMap.tsx","components/Simulation.tsx","services/robot.ts","lib/robot/Robot.ts"],"names":["SerialType","SerialState","BatteryState","StatusContainer","Container","state","serials","BLUETOOTH","type","DISCONNECTED","deviceName","undefined","USB","transportState","TransportState","setSerialState","typeKey","Object","keys","find","typeName","this","setState","update","$merge","setTransportState","newState","setBatteryVoltage","batteryVoltage","setRemoteIp","remoteIp","setOffline","setLoopStatistics","loopFrequency","loopTimeUs","lastBeaconTime","Date","setResetReceived","lastResetTime","getConnectedSerial","map","serialName","serial","CONNECTED","voltage","UNKNOWN","config","rules","battery","critical","CRITICAL","low","LOW","FULL","AhrsContainer","roll","pitch","yaw","lastUpdated","setAttitude","attitude","Button","ButtonState","MessageType","ButtonContainer","START","LEFT","RIGHT","setButtonState","button","LidarContainer","isStarted","isValid","targetRpm","currentRpm","motorPwm","LogContainer","entries","lastId","addEntry","message","avoidDuplicate","previousState","lastEntry","length","resolveMessageType","slice","id","toString","time","count","shift","catch","error","console","clear","substr","RX","TX","ERROR","INFO","MeasurementsContainer","measurements","add","measurement","OdometryContainer","left","right","RobotContainer","targetSpeed","current","setTargetSpeed","setCurrent","args","status","a","serialType","serialState","serialDeviceName","connectedSerial","robot","requestState","commandHandlers","ip","usb","_args","_containerMap","parseFloat","name","parseInt","PRESSED","RELEASED","toUpperCase","reset","lidar","pong","log","pingSentTime","pingTimeTaken","now","e","odometry","b","durationMs","cycleCount","l","i","angle","distance","quality","timestamp","s","ahrs","containers","logListeners","Hub","React","Component","isInitialized","render","to","newContainers","listener","forEach","key","containerName","push","multiTransport","getState","addListener","onStateChanged","transport","_previousState","getName","onError","_transport","onMessageSent","wasSentSuccessfully","split","command","includes","onMessageReceived","handleTransportMessage","connect","indexOf","handler","warn","join","handleCommand","Icon","styled","props","width","height","url","theme","text","primary","StatusIcon","MapIcon","BotIcon","RemoteIcon","SettingsIcon","BluetoothIcon","SerialIcon","WebsocketIcon","NativeIcon","BatteryIcon","LidarIcon","Text","div","Wrap","Items","ul","size","menuHeight","Item","li","Link","NavLink","darken","darkerLighterPercentage","bg","secondary","Label","MainMenu","activeClassName","tertiary","lighten","quaternary","good","bad","gridGap","animation","fadeIn","keyframes","pulse","color","GlobalStyle","createGlobalStyle","View","MapView","LidarMap","radius","cellSize","CellStatus","Grid","columns","css","rows","getGridItemStatusColorMap","GOOD","WARN","BAD","Cell","Joystick","ref","createRef","componentDidMount","el","manager","create","zone","position","top","mode","lockX","x","lockY","y","onEvent","bind","on","event","nipple","off","className","RemoteView","remoteController","RemoteController","vehicle","info","onJoystickEvent","isMoveEvent","xPos","Math","sin","radian","yPos","cos","setSpeed","setOmega","Error","SettingsView","onClick","window","location","href","SimulationView","Simulation","BatteryStatus","batteryStatus","batteryState","value","assertUnreachable","getBatteryStatus","description","toFixed","requestVoltage","LidarStatus","round","getLidarStatus","stopLidar","startLidar","pad","data","padCharacter","str","missingLength","Array","AutoScroll","componentDidUpdate","scrollToBottom","scrollHeight","clientHeight","scrollTop","children","StatusGridItem","LogWrap","LogEntry","LogEntryTime","span","logEntryTypeColorMap","LogEntryMessage","LogEntryCount","ClearLogButton","ClearLogIcon","Log","entry","date","getHours","getMinutes","getSeconds","getMilliseconds","TransportStatus","transportStatus","titleCase","ping","UsbStatus","usbStatus","title","StatusView","App","AppWrap","path","component","ReactDOM","document","getElementById","webSocket","host","localStorage","webSocketHost","port","webSocketPort","useSSL","reconnectInterval","trackWidth","maxSpeed","wheelDiameter","encoderCountsPerRotation","gearboxRatio","speedUpdateInterval","WebsocketTransport","constructor","options","listeners","wasConnected","ws","dummyLogger","isAvailable","WebSocket","RECONNECTING","CONNECTING","onopen","onclose","logDetails","code","reason","wasClean","setTimeout","onerror","_event","onmessage","send","NativeTransport","bridgeExists","native","app","receive","MultiTransport","transports","activeTransport","getActiveTransport","getAvailableTransport","promises","Promise","resolve","all","connectedTransport","getConnectedTransport","addTransport","eventTransport","nativeTransport","simulatedRobot","SimulatedRobot","simulatedTransport","SimulatedTransport","websocketTransport","FpsCounter","frameDurations","lastFrameTime","historySize","averageSize","currentTime","frameDuration","getFps","samples","max","reduce","result","getHistory","GamepadManager","gamepads","autoPoll","defaultDeadzone","onConnect","_gamepad","onDisconnect","onUpdate","navigator","getGamepads","addEventListener","gamepad","index","buttons","axes","managedGamepad","ManagedGamepad","addUpdateListener","updatedGamepad","startPolling","getGamepadByIndex","filter","item","stopPolling","getFirstAvailableGamepad","deadzone","updateListeners","isPolling","animationFrameRequest","poll","setDeadzone","axisIndex","setDefaultDeadzone","removeUpdateListener","requestAnimationFrame","cancelAnimationFrame","getCurrentState","applyDeadzone","updateListener","abs","OccupancyGrid","defaultValue","row","fill","setOccupancy","column","occupancy","setOccupancyAt","center","getCellAtCoordinates","exists","getOccupancyAt","getOccupancy","getSize","floor","cellHeight","cellWidth","findShortestPath","from","grid","PathFinder","diagonalMovement","DiagonalMovement","Never","heuristic","Heuristic","euclidean","findPath","Statistic","values","report","historyLength","getLatest","Statistics","statistics","statistic","getByName","Stat","Simulator","occupancyGrid","fpsCounter","gamepadManager","visualizer","ticker","pulses","gridModificationMode","lastPathPlanningTime","gridSize","generate","axisValue","min","decimalPlaces","Visualizer","container","mapLayerOptions","defaultStyle","fillStyle","strokeStyle","font","textBaseline","getTransform","layer","screenOrigin","rotation","PI","scale","horizontalScaling","verticalSkewing","horizontalSkewing","verticalScaling","horizontalTranslation","verticalTranslation","createLayer","renderBackground","renderMap","onMouseDownEvent","onMouseDown","onMouseUpEvent","onMouseUp","onMouseMoveEvent","onMouseMove","renderForeground","FPS","PATH_FINDER","unit","Ticker","tick","start","stop","tickGamepad","tickPathFinder","speed","omega","pathPlanningIntervalMs","pathStartTime","pathTimeTaken","frame","circleStep","drawGrid","ceil","getScale","centered","circleRadius","drawCircle","drawText","origin","offset","drawCoordinateSystem","drawOccupancyGrid","drawPulses","drawRobot","fps","drawGraph","drawPulse","lifetime","age","world","currentOccupancy","isMouseDown","addMessageListener","isRunning","frameNumber","scheduledAnimationFrame","lastTickTime","autoStart","scheduleNextFrame","dt","newTime","TrackedVehicleKinematics","threshold","leftDifference","rightDifference","maxRequestedSpeedMagnitude","normalizationFactor","getSpeedEncoderCount","speedMetersPerSecond","targetEncoderCountPerSecond","getEncoderCountSpeed","encoderCountsPerSecond","circumference","motorToEncoderSpeed","motorSpeed","encoderToMotorSpeed","encoderSpeed","motionToSpeed","speeds","getLimitedSpeed","speedToMotion","drawObject","inMin","inMax","outMin","outMax","capped","uncapped","Layer","canvas","ctx","transform","mouseDownCounter","_layer","_info","getContext","offsetWidth","offsetHeight","setAttribute","style","removeProperty","pointerEvents","rotate","applyStyle","onmousedown","handleMouseEvent","onmouseup","onmousemove","opt","screenCenter","worldToScreen","save","beginPath","arc","stroke","restore","opacity","alpha","drawMarker","isPolar","screenSize","translate","fillRect","drawBox","padding","strokeRect","drawLine","screenFrom","screenTo","moveTo","lineTo","defaultRowCount","defaultColumnCount","toCartesian","rowY","columnX","isArray","delta","drawArrow","tipSize","Vector","fromObject","subtract","drawDirection","fillText","worldSize","screenToWorld","toX","clone","toY","lineWidth","textAlign","startIndex","range","wasAnyValueCapped","cappedValue","isCapped","draw","arrowSize","polarToCartesian","coordinates","angleCorrection","screen","canvasToScreen","getScreenOrigin","multiply","toRadians","angleDegrees","setTransform","clearRect","layers","createCanvasElement","append","createElement","kinematics","scheduleUpdateMotorSpeeds","lastSentSpeed","throttle","updateMotorSpeeds","motorSpeeds","encoderSpeeds","isSpeedDifferent","Command","messageListeners","buttonStates","encoderValues","reportVoltage","setImmediate","messageListener","HANDSHAKE","reportHandshake","STATE","reportState","VOLTAGE","SPEED","tickLocation","reportButtonStates","reportTargetSpeed","reportLidarState","reportCurrent","reportEncoderValues","reportButtonState","wrapRef","setupMap","componentWillUnmount","Map","wrap","containerRef","simulator","setup","targetLidarRpm","transportOnly"],"mappings":"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","file":"static/js/main.5488e5f5.chunk.js","sourcesContent":["import update from \"immutability-helper\";\nimport { Container } from \"unstated\";\n\nimport { config } from \"../config\";\nimport { TransportState } from \"../lib/transport/Transport\";\n\nexport enum SerialType {\n  USB = \"usb\",\n  BLUETOOTH = \"bluetooth\",\n}\n\nexport enum SerialState {\n  CONNECTING = \"CONNECTING\",\n  CONNECTED = \"CONNECTED\",\n  DISCONNECTED = \"DISCONNECTED\",\n  NOT_SUPPORTED = \"NOT_SUPPORTED\",\n  DEVICE_NOT_FOUND = \"DEVICE_NOT_FOUND\",\n  DISABLED = \"DISABLED\",\n}\n\nexport interface Serial {\n  readonly type: SerialType;\n  readonly state: SerialState;\n  readonly deviceName?: string;\n}\n\nexport type SerialsMap = { readonly [type in keyof typeof SerialType]: Serial };\n\nexport enum BatteryState {\n  UNKNOWN = \"UNKNOWN\",\n  FULL = \"FULL\",\n  LOW = \"LOW\",\n  CRITICAL = \"CRITICAL\",\n}\n\nexport interface State {\n  readonly transportState: TransportState;\n  readonly serials: SerialsMap;\n  readonly batteryVoltage?: number;\n  readonly remoteIp?: string;\n  readonly lastBeaconTime?: Date;\n  readonly lastResetTime?: Date;\n  readonly loopFrequency?: number;\n  readonly loopTimeUs?: number;\n}\n\nexport class StatusContainer extends Container<State> {\n  readonly state: State = {\n    serials: {\n      BLUETOOTH: {\n        type: SerialType.BLUETOOTH,\n        state: SerialState.DISCONNECTED,\n        deviceName: undefined,\n      },\n      USB: {\n        type: SerialType.USB,\n        state: SerialState.DISCONNECTED,\n        deviceName: undefined,\n      },\n    },\n    transportState: TransportState.DISCONNECTED,\n  };\n\n  setSerialState(type: SerialType, state: SerialState, deviceName?: string) {\n    const typeKey = Object.keys(SerialType).find(\n      (typeName) => SerialType[typeName as keyof typeof SerialType] === type\n    ) as keyof typeof SerialType;\n\n    // update serial state\n    return this.setState(\n      update(this.state, {\n        serials: {\n          [typeKey]: { $merge: { state, deviceName } },\n        },\n      })\n    );\n  }\n\n  setTransportState(newState: TransportState) {\n    return this.setState({\n      transportState: newState,\n    });\n  }\n\n  setBatteryVoltage(batteryVoltage: number | undefined) {\n    return this.setState({\n      batteryVoltage,\n    });\n  }\n\n  setRemoteIp(remoteIp: string) {\n    return this.setState({\n      remoteIp,\n    });\n  }\n\n  setOffline() {\n    return this.setState({\n      remoteIp: undefined,\n    });\n  }\n\n  setLoopStatistics(loopFrequency: number, loopTimeUs: number) {\n    return this.setState({\n      lastBeaconTime: new Date(),\n      loopFrequency,\n      loopTimeUs,\n    });\n  }\n\n  setResetReceived() {\n    return this.setState({\n      lastResetTime: new Date(),\n    });\n  }\n\n  getConnectedSerial(): Serial | undefined {\n    const serialNames = Object.keys(\n      this.state.serials\n    ) as (keyof typeof SerialType)[];\n    const connectedSerial = serialNames\n      .map((serialName) => this.state.serials[serialName])\n      .find((serial) => serial.state === SerialState.CONNECTED);\n\n    return connectedSerial;\n  }\n\n  get batteryState(): BatteryState {\n    const voltage = this.state.batteryVoltage;\n\n    if (voltage === undefined) {\n      return BatteryState.UNKNOWN;\n    }\n\n    if (voltage <= config.rules.battery.critical) {\n      return BatteryState.CRITICAL;\n    } else if (voltage <= config.rules.battery.low) {\n      return BatteryState.LOW;\n    }\n\n    return BatteryState.FULL;\n  }\n}\n","import { Container } from \"unstated\";\n\nexport interface Attitude {\n  readonly roll: number;\n  readonly pitch: number;\n  readonly yaw: number;\n}\n\nexport interface State extends Attitude {\n  lastUpdated: Date;\n}\n\nexport class AhrsContainer extends Container<State> {\n  readonly state: State = {\n    roll: 0,\n    pitch: 0,\n    yaw: 0,\n    lastUpdated: new Date(),\n  };\n\n  setAttitude(attitude: Attitude) {\n    return this.setState({\n      ...attitude,\n      lastUpdated: new Date(),\n    });\n  }\n}\n","import { Container } from \"unstated\";\n\nexport enum Button {\n  START = \"START\",\n  LEFT = \"LEFT\",\n  RIGHT = \"RIGHT\",\n}\n\nexport enum ButtonState {\n  UNKNOWN = \"UNKNOWN\",\n  PRESSED = \"PRESSED\",\n  RELEASED = \"RELEASED\",\n}\n\nexport type State = { readonly [key in keyof typeof Button]: ButtonState };\n\nexport class ButtonContainer extends Container<State> {\n  readonly state: State = {\n    [Button.START]: ButtonState.UNKNOWN,\n    [Button.LEFT]: ButtonState.UNKNOWN,\n    [Button.RIGHT]: ButtonState.UNKNOWN,\n  };\n\n  setButtonState(button: Button, state: ButtonState) {\n    return this.setState({\n      [button]: state,\n    });\n  }\n}\n","import { Container } from \"unstated\";\n\nexport enum MessageType {\n  INFO = \"INFO\",\n  ERROR = \"ERROR\",\n  RX = \"RX\",\n  TX = \"TX\",\n}\n\nexport interface LogEntry {\n  readonly id: string;\n  readonly time: Date;\n  readonly message: string;\n  readonly type: MessageType;\n  readonly count: number;\n}\n\nexport interface LogState {\n  readonly entries: LogEntry[];\n}\n\nexport const MAX_LOG_ENTRY_COUNT = 200;\n\nexport class LogContainer extends Container<LogState> {\n  readonly state: LogState = {\n    entries: [],\n  };\n\n  private lastId = 0;\n\n  addEntry(message: string, avoidDuplicate = true) {\n    // update state (use the callback syntax not to miss any updates if called in series)\n    this.setState((previousState) => {\n      const lastEntry =\n        this.state.entries.length > 0\n          ? this.state.entries[this.state.entries.length - 1]\n          : null;\n      const type = this.resolveMessageType(message);\n\n      // skip the message if requested not to add the same message twice in a row\n      if (lastEntry !== null && avoidDuplicate) {\n        // check whether the latest message is the same as last\n        if (message === lastEntry.message) {\n          const updatedEntries: LogEntry[] = [\n            // remove last entry\n            ...previousState.entries.slice(0, this.state.entries.length - 1),\n            // add it again with updated time\n            {\n              id: (this.lastId++).toString(),\n              time: new Date(),\n              message,\n              type,\n              count: lastEntry.count + 1,\n            },\n          ];\n\n          return {\n            entries: updatedEntries,\n          };\n        }\n      }\n\n      // appends the log entry\n      const entries: LogEntry[] = [\n        ...previousState.entries,\n        {\n          id: (this.lastId++).toString(),\n          time: new Date(),\n          message,\n          type,\n          count: 1,\n        },\n      ];\n\n      // limit the number of entries\n      while (entries.length > MAX_LOG_ENTRY_COUNT) {\n        entries.shift();\n      }\n\n      return {\n        entries,\n      };\n    }).catch((error) => console.error(error));\n  }\n\n  clear() {\n    this.setState({\n      entries: [],\n    }).catch((error) => console.error(error));\n  }\n\n  private resolveMessageType(message: string): MessageType {\n    const firstCharacter = message.substr(0, 1);\n\n    switch (firstCharacter) {\n      case \"<\":\n        return MessageType.RX;\n\n      case \">\":\n        return MessageType.TX;\n\n      case \"@\":\n        return MessageType.ERROR;\n\n      case \"#\":\n        return MessageType.INFO;\n\n      default:\n        return MessageType.INFO;\n    }\n  }\n}\n","import { Container } from \"unstated\";\n\nexport interface State {\n  readonly isStarted: boolean;\n  readonly isValid: boolean;\n  readonly targetRpm: number;\n  readonly currentRpm: number;\n  readonly motorPwm: number;\n}\n\nexport class LidarContainer extends Container<State> {\n  readonly state: State = {\n    isStarted: false,\n    isValid: false,\n    targetRpm: 0,\n    currentRpm: 0,\n    motorPwm: 0,\n  };\n\n  update(state: State) {\n    return this.setState({\n      ...state,\n    });\n  }\n}\n","import { Container } from \"unstated\";\n\nexport interface LidarMeasurement {\n  readonly angle: number;\n  readonly distance: number;\n  readonly quality: number;\n  readonly timestamp: number;\n}\n\nexport interface State {\n  readonly measurements: LidarMeasurement[];\n}\n\nexport class MeasurementsContainer extends Container<State> {\n  readonly state: State = {\n    measurements: [],\n  };\n\n  add(measurement: LidarMeasurement) {\n    const measurements = [...this.state.measurements, measurement];\n\n    // store a maximum of 360 measurements\n    if (measurements.length > 360) {\n      measurements.shift();\n    }\n\n    return this.setState({\n      measurements,\n    });\n  }\n}\n","import { Container } from \"unstated\";\n\nexport interface State {\n  readonly left: number;\n  readonly right: number;\n}\n\nexport class OdometryContainer extends Container<State> {\n  readonly state: State = {\n    left: 0,\n    right: 0,\n  };\n\n  update(left: number, right: number) {\n    return this.setState({\n      left,\n      right,\n    });\n  }\n}\n","import { Container } from \"unstated\";\n\nexport interface State {\n  readonly targetSpeed: {\n    readonly left: number;\n    readonly right: number;\n  };\n  readonly current: {\n    readonly left: number;\n    readonly right: number;\n  };\n}\n\nexport class RobotContainer extends Container<State> {\n  readonly state: State = {\n    targetSpeed: {\n      left: 0,\n      right: 0,\n    },\n    current: {\n      left: 0,\n      right: 0,\n    },\n  };\n\n  setTargetSpeed(left: number, right: number) {\n    return this.setState({\n      targetSpeed: {\n        left,\n        right,\n      },\n    });\n  }\n\n  setCurrent(left: number, right: number) {\n    return this.setState({\n      current: {\n        left,\n        right,\n      },\n    });\n  }\n}\n","import { SerialState, SerialType } from \"../containers/StatusContainer\";\nimport { ContainerMap } from \"../services/containers\";\nimport { robot } from \"../services/robot\";\n\nexport async function handleSerialCommand(\n  args: string[],\n  { status }: ContainerMap\n) {\n  // extract serial info\n  const serialType = args[0] as SerialType;\n  const serialState = args[1] as SerialState;\n  const serialDeviceName = typeof args[2] === \"string\" ? args[2] : undefined;\n\n  // update serial state\n  await status.setSerialState(serialType, serialState, serialDeviceName);\n\n  const connectedSerial = status.getConnectedSerial();\n\n  // ask for some initial state info once a serial connection is established\n  if (connectedSerial !== undefined && serialType === connectedSerial.type) {\n    // request current state\n    robot.requestState();\n\n    // also setup an interval to ask the voltage level periodically\n    // requestBatteryVoltageInterval = window.setInterval(() => {\n    //   requestVoltage();\n    // }, REQUEST_BATTERY_VOLTAGE_INTERVAL);\n  } else {\n    // clear the battery voltage interval if exists\n    // if (requestBatteryVoltageInterval !== null) {\n    //   window.clearInterval(requestBatteryVoltageInterval);\n\n    //   requestBatteryVoltageInterval = null;\n    // }\n\n    // no serial connection so we can't be sure of battery voltage\n    void status.setBatteryVoltage(undefined);\n  }\n}\n","import { ContainerMap } from \"../services/containers\";\n\nimport { handleAhrsCommand } from \"./handleAhrsCommand\";\nimport { handleBeaconCommand } from \"./handleBeaconCommand\";\nimport { handleButtonCommand } from \"./handleButtonCommand\";\nimport { handleCurrentCommand } from \"./handleCurrentCommand\";\nimport { handleEncoderCommand } from \"./handleEncoderCommand\";\nimport { handleVoltageCommand } from \"./handleGetVoltageCommand\";\nimport { handleIpCommand } from \"./handleIpCommand\";\nimport { handleLidarMeasurementCommand } from \"./handleLidarMeasurementCommand\";\nimport { handleLidarStateCommand } from \"./handleLidarStateCommand\";\nimport { handlePongCommand } from \"./handlePongCommand\";\nimport { handleResetCommand } from \"./handleResetCommand\";\nimport { handleSerialCommand } from \"./handleSerialCommand\";\nimport { handleSpeedCommand } from \"./handleSpeedCommand\";\nimport { handleUsbCommand } from \"./handleUsbCommand\";\n\nexport type CommandHandlerFn = (\n  args: string[],\n  containers: ContainerMap\n) => void;\n\nexport interface CommandHandlersMap {\n  [x: string]: CommandHandlerFn | undefined;\n}\n\nexport const commandHandlers: CommandHandlersMap = {\n  serial: handleSerialCommand,\n  ip: handleIpCommand,\n  usb: handleUsbCommand,\n  voltage: handleVoltageCommand,\n  button: handleButtonCommand,\n  reset: handleResetCommand,\n  current: handleCurrentCommand,\n  lidar: handleLidarStateCommand,\n  pong: handlePongCommand,\n  e: handleEncoderCommand,\n  b: handleBeaconCommand,\n  l: handleLidarMeasurementCommand,\n  s: handleSpeedCommand,\n  a: handleAhrsCommand,\n};\n\n// handles parsed web-socket commands\nexport function handleCommand(\n  name: string,\n  args: string[],\n  containers: ContainerMap\n) {\n  const handler = commandHandlers[name];\n\n  // check whether the handler exists\n  if (handler === undefined) {\n    console.warn(\n      `missing web-socket command handler for \"${name}\" (${args.join(\", \")})`\n    );\n\n    return;\n  }\n\n  // call the handler\n  handler(args, containers);\n}\n","import { ContainerMap } from \"../services/containers\";\n\nexport function handleIpCommand(args: string[], { status }: ContainerMap) {\n  const remoteIp = args[0];\n  const isOffline = remoteIp === \"null\";\n\n  if (!isOffline) {\n    void status.setRemoteIp(remoteIp);\n  } else {\n    void status.setOffline();\n  }\n}\n","import { ContainerMap } from \"../services/containers\";\n\nexport function handleUsbCommand(_args: string[], _containerMap: ContainerMap) {\n  // const vendorId = parseInt(args[0], 10);\n  // const productId = parseInt(args[1], 10);\n  // const productName = args[2];\n  // TODO: store in status?\n  // console.log(\"usb\", {\n  //   vendorId,\n  //   productId,\n  //   productName\n  // });\n}\n","import { ContainerMap } from \"../services/containers\";\n\nexport function handleVoltageCommand(args: string[], { status }: ContainerMap) {\n  const voltage = parseFloat(args[0]);\n\n  void status.setBatteryVoltage(voltage);\n}\n","import { Button, ButtonState } from \"../containers/ButtonContainer\";\nimport { ContainerMap } from \"../services/containers\";\n\nexport function handleButtonCommand(args: string[], { button }: ContainerMap) {\n  const name = args[0];\n  const state =\n    parseInt(args[1], 10) === 0 ? ButtonState.PRESSED : ButtonState.RELEASED;\n\n  void button.setButtonState(name.toUpperCase() as Button, state);\n}\n","import { ContainerMap } from \"../services/containers\";\n\nexport function handleResetCommand(_args: string[], { status }: ContainerMap) {\n  void status.setResetReceived();\n}\n","import { ContainerMap } from \"../services/containers\";\n\nexport function handleCurrentCommand(args: string[], { robot }: ContainerMap) {\n  const left = parseInt(args[0], 10);\n  const right = parseInt(args[1], 10);\n\n  void robot.setCurrent(left, right);\n}\n","import { ContainerMap } from \"../services/containers\";\n\nexport function handleLidarStateCommand(\n  args: string[],\n  { lidar }: ContainerMap\n) {\n  const isStarted = parseInt(args[0], 10) === 1;\n  const isValid = parseInt(args[1], 10) === 1;\n  const targetRpm = parseFloat(args[2]);\n  const currentRpm = parseFloat(args[3]);\n  const motorPwm = parseFloat(args[4]);\n\n  void lidar.update({\n    isStarted,\n    isValid,\n    targetRpm,\n    currentRpm,\n    motorPwm,\n  });\n}\n","import { ContainerMap } from \"../services/containers\";\nimport { robot } from \"../services/robot\";\n\nexport function handlePongCommand(args: string[], { log }: ContainerMap) {\n  if (!robot.pingSentTime) {\n    return;\n  }\n\n  const pingTimeTaken = Date.now() - robot.pingSentTime;\n\n  robot.pingSentTime = undefined;\n\n  log.addEntry(`# ping: ${pingTimeTaken} ms`);\n}\n","import { ContainerMap } from \"../services/containers\";\n\nexport function handleEncoderCommand(\n  args: string[],\n  { odometry }: ContainerMap\n) {\n  const left = parseInt(args[0], 10);\n  const right = parseInt(args[1], 10);\n\n  void odometry.update(left, right);\n}\n","import { ContainerMap } from \"../services/containers\";\n\nexport function handleBeaconCommand(args: string[], { status }: ContainerMap) {\n  const durationMs = parseInt(args[0], 10);\n  const cycleCount = parseInt(args[1], 10);\n  const loopFrequency = (cycleCount / durationMs) * 1000;\n  const loopTimeUs = (durationMs / cycleCount) * 1000;\n\n  void status.setLoopStatistics(loopFrequency, loopTimeUs);\n}\n","import { ContainerMap } from \"../services/containers\";\n\nexport function handleLidarMeasurementCommand(\n  args: string[],\n  { measurements }: ContainerMap\n) {\n  // the command includes 4 measurements\n  for (let i = 0; i < 4; i++) {\n    void measurements.add({\n      angle: parseInt(args[0 + i * 3], 10),\n      distance: parseInt(args[1 + i * 3], 10),\n      quality: parseInt(args[2 + i * 3], 10),\n      timestamp: Date.now(),\n    });\n  }\n}\n","import { ContainerMap } from \"../services/containers\";\n\nexport function handleSpeedCommand(args: string[], { robot }: ContainerMap) {\n  const left = parseInt(args[0], 10);\n  const right = parseInt(args[1], 10);\n\n  void robot.setTargetSpeed(left, right);\n}\n","import { ContainerMap } from \"../services/containers\";\n\nexport function handleAhrsCommand(args: string[], { ahrs }: ContainerMap) {\n  // console.log(\"measurement\", { args });\n  void ahrs.setAttitude({\n    roll: parseFloat(args[0]),\n    pitch: parseFloat(args[1]),\n    yaw: parseFloat(args[2]),\n  });\n}\n","import { AhrsContainer } from \"../containers/AhrsContainer\";\nimport { ButtonContainer } from \"../containers/ButtonContainer\";\nimport { LidarContainer } from \"../containers/LidarContainer\";\nimport { LogContainer } from \"../containers/LogContainer\";\nimport { MeasurementsContainer } from \"../containers/MeasurementsContainer\";\nimport { OdometryContainer } from \"../containers/OdometryContainer\";\nimport { RobotContainer } from \"../containers/RobotContainer\";\nimport { StatusContainer } from \"../containers/StatusContainer\";\n\nexport interface ContainerMap {\n  log: LogContainer;\n  status: StatusContainer;\n  odometry: OdometryContainer;\n  lidar: LidarContainer;\n  button: ButtonContainer;\n  robot: RobotContainer;\n  measurements: MeasurementsContainer;\n  ahrs: AhrsContainer;\n}\n\n// initial lie\nexport const containers: ContainerMap = {} as ContainerMap;\n\n// updates the containers to use\nexport function setContainers(newContainers: ContainerMap) {\n  Object.keys(newContainers).forEach((key) => {\n    const containerName = key as keyof ContainerMap;\n\n    // TODO: figure out how to type nicer\n    containers[containerName] = newContainers[containerName] as any;\n  });\n}\n","// simple log listener function\nexport type LogListenerFn = (message: string) => void;\n\n// list of registered log listeners\nexport const logListeners: LogListenerFn[] = [];\n\n// registers a new log listener\nexport const addLogListener = (listener: LogListenerFn) => {\n  logListeners.push(listener);\n};\n\n// global log function callable from anywhere, can be intercepted by any number of listeners\nexport const log = (message: string) =>\n  logListeners.forEach((listener) => listener(message));\n","import React from \"react\";\nimport { Subscribe } from \"unstated\";\n\nimport { AhrsContainer } from \"../containers/AhrsContainer\";\nimport { ButtonContainer } from \"../containers/ButtonContainer\";\nimport { LidarContainer } from \"../containers/LidarContainer\";\nimport { LogContainer } from \"../containers/LogContainer\";\nimport { MeasurementsContainer } from \"../containers/MeasurementsContainer\";\nimport { OdometryContainer } from \"../containers/OdometryContainer\";\nimport { RobotContainer } from \"../containers/RobotContainer\";\nimport { StatusContainer } from \"../containers/StatusContainer\";\nimport { handleCommand } from \"../handlers\";\nimport { ContainerMap, setContainers } from \"../services/containers\";\nimport { addLogListener } from \"../services/log\";\nimport { multiTransport } from \"../services/multiTransport\";\n\n// connects transport to containers, does not render anything visual\nexport class Hub extends React.Component {\n  private isInitialized = false;\n\n  render() {\n    return (\n      <Subscribe\n        to={[\n          LogContainer,\n          StatusContainer,\n          OdometryContainer,\n          LidarContainer,\n          ButtonContainer,\n          RobotContainer,\n          MeasurementsContainer,\n          AhrsContainer,\n        ]}\n      >\n        {(\n          log: LogContainer,\n          status: StatusContainer,\n          odometry: OdometryContainer,\n          lidar: LidarContainer,\n          button: ButtonContainer,\n          robot: RobotContainer,\n          measurements: MeasurementsContainer,\n          ahrs: AhrsContainer\n        ) => {\n          // only initialize the connection logic once\n          if (this.isInitialized) {\n            return null;\n          }\n\n          // setup container map\n          const containers: ContainerMap = {\n            log,\n            status,\n            odometry,\n            lidar,\n            button,\n            robot,\n            measurements,\n            ahrs,\n          };\n\n          // make the containers globally available\n          setContainers(containers);\n\n          // register as log listener and proxy to log container\n          addLogListener((message) => log.addEntry(message));\n\n          // set initial transport state\n          void status.setTransportState(multiTransport.getState());\n\n          // subscribe to transport events\n          multiTransport.addListener({\n            onStateChanged: (transport, newState, _previousState) => {\n              log.addEntry(\n                `# ${transport.getName()} state changed to ${newState}`\n              );\n\n              void status.setTransportState(newState);\n            },\n            onError: (_transport, error) => {\n              log.addEntry(\n                `# transport error occurred${\n                  error ? ` (${error.message})` : \"\"\n                }`\n              );\n            },\n            onMessageSent: (\n              _transport,\n              message,\n              wasSentSuccessfully: boolean\n            ) => {\n              const [command] = message.split(\":\");\n              const noLogCommands = [\"ping\", \"!ping\"];\n\n              // don't log single-character recurring commands (\"s\" for speed etc)\n              if (command.length === 1 || noLogCommands.includes(command)) {\n                return;\n              }\n\n              log.addEntry(\n                `> ${message}${!wasSentSuccessfully ? \" (sending failed)\" : \"\"}`\n              );\n            },\n            onMessageReceived: (_transport, message) => {\n              this.handleTransportMessage(message, containers);\n            },\n          });\n\n          // attempt to establish connection\n          void multiTransport.connect();\n\n          // don't run this logic again\n          this.isInitialized = true;\n\n          // don't render anything\n          return null;\n        }}\n      </Subscribe>\n    );\n  }\n\n  // handles web-socket messages\n  private handleTransportMessage(message: string, containers: ContainerMap) {\n    // ignore empty messages\n    if (message.length === 0) {\n      return;\n    }\n\n    // parse message\n    const [command, ...args] = message.split(\":\");\n    const noLogCommands = [\"pong\", \"lidar\"];\n\n    // dont log single-character commands (fast lidar measurements, encoders etc)\n    if (command.length > 1 && noLogCommands.indexOf(command) === -1) {\n      containers.log.addEntry(`< ${message}`);\n    }\n\n    // attempt to handle command\n    handleCommand(command, args, containers);\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport interface IconProps {\n  url: string;\n  width: number;\n  height: number;\n}\n\nexport const Icon = styled.i<IconProps>`\n  display: block;\n  width: ${(props) => props.width}px;\n  height: ${(props) => props.height}px;\n  mask-image: url(${(props) => props.url});\n  mask-size: ${(props) => props.height}px ${(props) => props.width}px;\n  mask-repeat: no-repeat;\n  mask-position: center center;\n  background-color: ${(props) => props.theme.text.primary};\n`;\n\nexport const StatusIcon: React.SFC = (props) => (\n  <Icon {...props} url=\"icons/status.svg\" width={37} height={32} />\n);\n\nexport const MapIcon: React.SFC = (props) => (\n  <Icon {...props} url=\"icons/map.svg\" width={32} height={32} />\n);\n\nexport const BotIcon: React.SFC = (props) => (\n  <Icon {...props} url=\"icons/bot.svg\" width={27} height={32} />\n);\n\nexport const RemoteIcon: React.SFC = (props) => (\n  <Icon {...props} url=\"icons/remote.svg\" width={44} height={32} />\n);\n\nexport const SettingsIcon: React.SFC = (props) => (\n  <Icon {...props} url=\"icons/settings.svg\" width={32} height={32} />\n);\n\nexport const BluetoothIcon: React.SFC = (props) => (\n  <Icon {...props} url=\"icons/bluetooth.svg\" width={32} height={32} />\n);\n\nexport const SerialIcon: React.SFC = (props) => (\n  <Icon {...props} url=\"icons/serial.svg\" width={32} height={32} />\n);\n\nexport const WebsocketIcon: React.SFC = (props) => (\n  <Icon {...props} url=\"icons/websocket.svg\" width={32} height={32} />\n);\n\nexport const NativeIcon: React.SFC = (props) => (\n  <Icon {...props} url=\"icons/native.svg\" width={32} height={32} />\n);\n\nexport const BatteryIcon: React.SFC = (props) => (\n  <Icon {...props} url=\"icons/battery.svg\" width={32} height={32} />\n);\n\nexport const ClearIcon: React.SFC = (props) => (\n  <Icon {...props} url=\"icons/clear.svg\" width={32} height={32} />\n);\n\nexport const LidarIcon: React.SFC = (props) => (\n  <Icon {...props} url=\"icons/lidar.svg\" width={32} height={32} />\n);\n","import styled from \"styled-components\";\n\nexport interface TextProps {\n  primary?: boolean;\n}\n\nexport const Text = styled.div<TextProps>`\n  text-align: center;\n  font-variant: ${(props) => (props.primary ? \"all-small-caps\" : \"normal\")};\n  line-height: 1.2em;\n`;\n","import { darken } from \"polished\";\nimport React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport { BotIcon, MapIcon, RemoteIcon, SettingsIcon, StatusIcon } from \"./Icon\";\nimport { Text } from \"./Text\";\n\nconst Wrap = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  background-color: #000;\n`;\n\nconst Items = styled.ul`\n  display: flex;\n  flex-direction: row;\n  height: ${(props) => props.theme.size.menuHeight};\n  flex: 1;\n  max-width: 600px;\n`;\n\nconst Item = styled.li`\n  height: 100%;\n  text-align: center;\n  font-variant: small-caps;\n  text-transform: uppercase;\n  font-size: 0.8em;\n  flex: 1;\n`;\n\nconst Link = styled(NavLink)`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  text-decoration: none;\n  color: ${(props) =>\n    darken(props.theme.size.darkerLighterPercentage, props.theme.text.primary)};\n  background-color: rgba(0, 0, 0, 0);\n  transition: background-color 300ms;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\n  &.active-main-menu-item {\n    background-color: ${(props) => props.theme.bg.secondary};\n    color: ${(props) => props.theme.text.primary};\n  }\n`;\n\nconst Label = styled(Text)`\n  padding-top: 4px;\n`;\n\nexport const MainMenu: React.SFC<{}> = () => (\n  <Wrap>\n    <Items>\n      <Item>\n        <Link to=\"/status\" activeClassName=\"active-main-menu-item\">\n          <StatusIcon />\n          <Label>Status</Label>\n        </Link>\n      </Item>\n      <Item>\n        <Link to=\"/map\" activeClassName=\"active-main-menu-item\">\n          <MapIcon />\n          <Label>Map</Label>\n        </Link>\n      </Item>\n      <Item>\n        <Link to=\"/simulation\" activeClassName=\"active-main-menu-item\">\n          <BotIcon />\n          <Label>Simulation</Label>\n        </Link>\n      </Item>\n      <Item>\n        <Link to=\"/remote\" activeClassName=\"active-main-menu-item\">\n          <RemoteIcon />\n          <Label>Remote</Label>\n        </Link>\n      </Item>\n      <Item>\n        <Link to=\"/settings\" activeClassName=\"active-main-menu-item\">\n          <SettingsIcon />\n          <Label>Settings</Label>\n        </Link>\n      </Item>\n    </Items>\n  </Wrap>\n);\n","import { lighten } from \"polished\";\nimport { MouseEventHandler } from \"react\";\nimport { createGlobalStyle, keyframes } from \"styled-components\";\n\n// common visual configuration used by various components\nexport const theme = {\n  text: {\n    primary: \"#f0f0f0\",\n    secondary: \"#969696\",\n  },\n  bg: {\n    primary: \"#cc3333\",\n    secondary: \"#282828\",\n    tertiary: lighten(0.05, \"#282828\"),\n    quaternary: \"#087099\",\n    good: \"#009900\",\n    warn: \"#999900\",\n    bad: \"#990000\",\n  },\n  size: {\n    darkerLighterPercentage: 0.25,\n    gridGap: \"2px\",\n    menuHeight: \"64px\",\n  },\n  animation: {\n    fadeIn: keyframes`\n      from {\n        opacity: 0;\n      }\n      to {\n        opacity: 1;\n      }\n    `,\n    pulse: (color: string) => keyframes`\n      0% {\n        background: ${color};\n      }\n      50% {\n        background: ${lighten(0.25, color)};\n      }\n      100% {\n        background: ${color};\n      }\n    `,\n  },\n};\n\n// resolve theme type\nexport type Theme = typeof theme;\n\n// clickable element\nexport interface Clickable<T = Element> {\n  onClick?: MouseEventHandler<T>;\n}\n\n// these global styles get injected in the document above all else\nexport const GlobalStyle = createGlobalStyle`\n  // main font\n  @font-face {\n    font-family: \"heebo-regular\";\n    src: url(\"fonts/Heebo-Regular.ttf\");\n  }\n\n  @font-face {\n    font-family: \"roboto-mono-light\";\n    src: url(\"fonts/RobotoMono-Light.ttf\");\n  }\n\n  // default to using border box sizing\n  html {\n    box-sizing: border-box;\n  }\n  *,\n  *:before,\n  *:after {\n    box-sizing: inherit;\n  }\n\n  // set body styles\n  body,\n  html {\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    font-family: \"heebo-regular\";\n    color: ${theme.text.primary};\n    background-color: ${theme.bg.secondary};\n  }\n`;\n","import styled from \"styled-components\";\n\nexport interface ViewProps {\n  text?: boolean;\n}\n\nexport const View = styled.div<ViewProps>`\n  position: relative;\n  flex: 1;\n  border-radius: 8px 8px 0 0;\n  padding: ${(props) => (props.text ? \"16px\" : \"0\")};\n`;\n","import React from \"react\";\n\nimport { LidarMap } from \"../components/LidarMap\";\nimport { View } from \"../components/View\";\n// import { LidarMeasurement } from \"../containers/MeasurementsContainer\";\nimport { containers } from \"../services/containers\";\n\n// const fakeMeasurements: LidarMeasurement[] = [\n//   {\n//     angle: 0,\n//     distance: 50,\n//     quality: 100,\n//     timestamp: Date.now(),\n//   },\n//   {\n//     angle: 90,\n//     distance: 100,\n//     quality: 50,\n//     timestamp: Date.now(),\n//   },\n// ];\n\nexport const MapView: React.SFC = () => (\n  <View>\n    <LidarMap\n      radius={4}\n      cellSize={0.1}\n      measurements={() => containers.measurements.state.measurements}\n      // measurements={() => fakeMeasurements}\n    />\n  </View>\n);\n","import styled, { css } from \"styled-components\";\n\nimport { Clickable, Theme } from \"../theme\";\n\nexport interface GridProps {\n  columns?: string;\n  rows?: string;\n  wide?: boolean;\n}\n\nexport interface CellProps {\n  primary?: boolean;\n  text?: boolean;\n  status?: CellStatus;\n}\n\nexport enum CellStatus {\n  GOOD = \"GOOD\",\n  WARN = \"WARN\",\n  BAD = \"BAD\",\n}\n\nexport const Grid = styled.div<GridProps>`\n  display: grid;\n  grid-gap: ${(props) => props.theme.size.gridGap};\n  margin: ${(props) => props.theme.size.gridGap};\n  height: calc(\n    100vh -\n      (\n        ${(props) => props.theme.size.menuHeight} +\n          (${(props) => props.theme.size.gridGap} * 2)\n      )\n  );\n\n  ${(props) =>\n    props.columns\n      ? css`\n          grid-template-columns: ${props.columns};\n        `\n      : \"\"}\n\n  ${(props) =>\n    props.rows\n      ? css`\n          grid-template-rows: ${props.rows};\n        `\n      : \"\"}\n`;\n\nconst getGridItemStatusColorMap = (theme: Theme) => ({\n  [CellStatus.GOOD]: theme.bg.good,\n  [CellStatus.WARN]: theme.bg.warn,\n  [CellStatus.BAD]: theme.bg.bad,\n});\n\nexport const Cell = styled.div<CellProps & Clickable>`\n  position: relative;\n  background-color: ${(props) => props.theme.bg.tertiary};\n  font-variant: ${(props) => (props.primary ? \"all-small-caps\" : \"normal\")};\n\n  ${(props) =>\n    props.text\n      ? css`\n          line-height: 1.25em;\n          text-align: center;\n          margin-top: 8px;\n        `\n      : \"\"}\n\n  ${(props) =>\n    props.status\n      ? css`\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          padding: 16px;\n          overflow: hidden;\n          background-color: ${getGridItemStatusColorMap(props.theme)[\n            props.status\n          ]};\n        `\n      : \"\"}\n\n  ${(props) =>\n    props.status === CellStatus.BAD\n      ? css`\n          animation: ${props.theme.animation.pulse(\n              getGridItemStatusColorMap(props.theme)[props.status]\n            )}\n            3s ease;\n          animation-iteration-count: infinite;\n          animation-delay: 1s;\n        `\n      : \"\"}\n`;\n","import {\n  create,\n  EventData,\n  JoystickManagerEventTypes,\n  JoystickOutputData,\n} from \"nipplejs\";\nimport React from \"react\";\n\nexport interface JoystickProps {\n  name: string;\n  x?: boolean;\n  y?: boolean;\n  onEvent?(name: string, event: EventData, info: JoystickOutputData): void;\n}\n\nexport class Joystick extends React.Component<JoystickProps> {\n  private readonly ref = React.createRef<HTMLDivElement>();\n\n  componentDidMount() {\n    const el = this.ref.current;\n\n    // return if element could not be found\n    if (!el) {\n      console.warn(\"grid item dom node not found\");\n\n      return;\n    }\n\n    // create the nipple manager\n    const manager = create({\n      zone: el,\n      color: \"#FFF\",\n      size: 200,\n      position: {\n        left: \"50%\",\n        top: \"50%\",\n      },\n      mode: \"static\",\n      lockX: this.props.x === true,\n      lockY: this.props.y === true,\n    });\n\n    const { onEvent } = this.props;\n\n    // only listen for events if even listener has been added\n    if (typeof onEvent === \"function\") {\n      const bind = \"start,move,end,dir,plain\" as JoystickManagerEventTypes;\n\n      manager.on(bind, (event, nipple) => {\n        onEvent(this.props.name, event, nipple);\n      });\n      manager.on(\"removed\", (event, nipple) => {\n        // @ts-ignore wrong typings\n        nipple.off(bind);\n      });\n    }\n  }\n\n  render() {\n    return <div className=\"joystick\" ref={this.ref} />;\n  }\n}\n","import {\n  EventData,\n  JoystickEventTypes,\n  JoystickOutputData,\n  ManagerOnlyEventTypes,\n} from \"nipplejs\";\nimport React from \"react\";\n\nimport { Cell, Grid } from \"../components/Grid\";\nimport { Joystick } from \"../components/Joystick\";\nimport { View } from \"../components/View\";\nimport { config } from \"../config\";\nimport { RemoteController } from \"../lib/remote-controller\";\nimport { robot } from \"../services/robot\";\n\n// TODO: show track speeds on edges (target and real)\nexport class RemoteView extends React.Component {\n  private readonly remoteController = new RemoteController({\n    vehicle: config.vehicle,\n    robot,\n    // log: console,\n  });\n\n  render() {\n    return (\n      <View>\n        <Grid>\n          <Cell>\n            <Joystick\n              x\n              name=\"speed\"\n              onEvent={(name, event, info) =>\n                this.onJoystickEvent(name, event, info)\n              }\n            />\n          </Cell>\n          <Cell>\n            <Joystick\n              y\n              name=\"omega\"\n              onEvent={(name, event, info) =>\n                this.onJoystickEvent(name, event, info)\n              }\n            />\n          </Cell>\n        </Grid>\n      </View>\n    );\n  }\n\n  private onJoystickEvent(\n    name: string,\n    event: EventData,\n    info: JoystickOutputData\n  ) {\n    const interestingEvents: (JoystickEventTypes | ManagerOnlyEventTypes)[] = [\n      \"move\",\n      \"end\",\n    ];\n\n    if (interestingEvents.indexOf(event.type) === -1) {\n      return;\n    }\n\n    const isMoveEvent = event.type === \"move\";\n\n    const xPos = isMoveEvent ? Math.sin(info.angle.radian) * info.distance : 0;\n    const yPos = isMoveEvent ? Math.cos(info.angle.radian) * info.distance : 0;\n\n    // console.log(`${name} x: ${xPos}, y: ${yPos}, distance: ${info.distance}`, this.remoteController);\n\n    switch (name) {\n      case \"speed\":\n        this.remoteController.setSpeed((yPos * -1) / 100.0);\n        break;\n\n      case \"omega\":\n        this.remoteController.setOmega(xPos / 100.0);\n        break;\n\n      default:\n        throw new Error(`Got unexpected joystick \"${name}\" info`);\n    }\n  }\n}\n","import React from \"react\";\n\nimport { View } from \"../components/View\";\n\nexport const SettingsView: React.SFC<{}> = () => (\n  <View text>\n    <p>\n      <button onClick={() => (window.location.href = \"http://kallaspriit\")}>\n        Open http://kallaspriit\n      </button>\n    </p>\n    <p>\n      <button onClick={() => (window.location.href = \"http://lab\")}>\n        Open http://lab\n      </button>\n    </p>\n  </View>\n);\n","import React from \"react\";\n\nimport { Simulation } from \"../components/Simulation\";\nimport { View } from \"../components/View\";\n\nexport const SimulationView: React.SFC = () => (\n  <View>\n    <Simulation />\n  </View>\n);\n","import React from \"react\";\nimport { Subscribe } from \"unstated\";\n\nimport { BatteryState, StatusContainer } from \"../containers/StatusContainer\";\nimport { assertUnreachable } from \"../services/assertUnreachable\";\nimport { robot } from \"../services/robot\";\n\nimport { Cell, CellStatus } from \"./Grid\";\nimport { BatteryIcon } from \"./Icon\";\nimport { Text } from \"./Text\";\n\nexport const BatteryStatus: React.SFC = () => (\n  <Subscribe to={[StatusContainer]}>\n    {(status: StatusContainer) => {\n      const batteryStatus = getBatteryStatus(status.batteryState);\n      const description = status.state.batteryVoltage\n        ? `${status.state.batteryVoltage.toFixed(1)}V`\n        : \"Unknown\";\n\n      return (\n        <Cell status={batteryStatus} onClick={() => robot.requestVoltage()}>\n          <BatteryIcon />\n          <Text primary>Battery</Text>\n          <Text>{description}</Text>\n        </Cell>\n      );\n    }}\n  </Subscribe>\n);\n\nfunction getBatteryStatus(batteryState: BatteryState): CellStatus {\n  switch (batteryState) {\n    case BatteryState.UNKNOWN:\n      return CellStatus.BAD;\n\n    case BatteryState.FULL:\n      return CellStatus.GOOD;\n\n    case BatteryState.LOW:\n      return CellStatus.WARN;\n\n    case BatteryState.CRITICAL:\n      return CellStatus.BAD;\n\n    default:\n      return assertUnreachable(batteryState, \"got unexpected battery state\");\n  }\n}\n","export function assertUnreachable(value: never, message: string): never {\n  throw new Error(`${message} (${value})`);\n}\n","import React from \"react\";\nimport { Subscribe } from \"unstated\";\n\nimport { LidarContainer } from \"../containers/LidarContainer\";\nimport { robot } from \"../services/robot\";\n\nimport { Cell, CellStatus } from \"./Grid\";\nimport { LidarIcon } from \"./Icon\";\nimport { Text } from \"./Text\";\n\nexport const LidarStatus: React.SFC = () => (\n  <Subscribe to={[LidarContainer]}>\n    {(lidar: LidarContainer) => {\n      const { status, description } = getLidarStatus(lidar);\n\n      return (\n        <Cell\n          status={status}\n          onClick={() =>\n            lidar.state.isStarted ? robot.stopLidar() : robot.startLidar()\n          }\n        >\n          <LidarIcon />\n          <Text primary>Lidar</Text>\n          <Text>{description}</Text>\n        </Cell>\n      );\n    }}\n  </Subscribe>\n);\n\nfunction getLidarStatus(lidar: LidarContainer) {\n  let status = CellStatus.BAD;\n  let description = \"Stopped\";\n\n  if (lidar.state.isValid) {\n    status = CellStatus.GOOD;\n    description = `${Math.round(lidar.state.currentRpm)}/${\n      lidar.state.targetRpm\n    } RPM`;\n  } else if (lidar.state.isStarted) {\n    status = CellStatus.WARN;\n    description = \"Unstable\";\n  }\n\n  return {\n    status,\n    description,\n  };\n}\n","export function pad(\n  data: string | number,\n  length: number,\n  padCharacter = \" \"\n): string {\n  const str = typeof data === \"string\" ? data : data.toString();\n\n  // return as is if already long enough\n  if (str.length >= length) {\n    return str;\n  }\n\n  const missingLength = length - str.length;\n\n  return `${new Array(missingLength + 1).join(padCharacter)}${str}`;\n}\n","import React from \"react\";\n\nexport type Props = React.DetailedHTMLProps<\n  React.HTMLAttributes<HTMLElement>,\n  HTMLElement\n> & {\n  scrollToBottom?: boolean;\n};\n\nexport class AutoScroll extends React.Component<Props> {\n  private readonly ref = React.createRef<HTMLDivElement>();\n\n  componentDidUpdate() {\n    // return if scrolling to bottom is not requested, default to true\n    if (this.props.scrollToBottom === false) {\n      return;\n    }\n\n    // get the dom node from the reference\n    const el = this.ref.current;\n\n    // return if element could not be found\n    if (!el) {\n      console.warn(\"auto-scroll dom node not found\");\n\n      return;\n    }\n\n    // check whether we're aready near the bottom\n    const isNearBottom = el.scrollHeight - el.clientHeight <= el.scrollTop + 50;\n\n    // only force the scroll if near bottom\n    if (isNearBottom) {\n      el.scrollTop = el.scrollHeight - el.clientHeight;\n    }\n  }\n\n  render() {\n    // filter out unsupported props\n    const { scrollToBottom, ...props } = this.props;\n\n    return (\n      <div {...props} ref={this.ref}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Subscribe } from \"unstated\";\n\nimport { LogContainer, MessageType } from \"../containers/LogContainer\";\nimport { formatTime } from \"../services/formatTime\";\nimport { Clickable } from \"../theme\";\n\nimport { AutoScroll } from \"./AutoScroll\";\nimport { Cell } from \"./Grid\";\nimport { ClearIcon } from \"./Icon\";\n\nconst StatusGridItem = styled(Cell)`\n  grid-column: 1 / 4;\n  font-family: Consolas, \"Courier New\", Courier, monospace;\n  display: flex;\n  overflow: hidden;\n`;\n\nconst LogWrap = styled(AutoScroll)`\n  flex: 1;\n  overflow: scroll;\n  padding: 8px;\n`;\n\nconst LogEntry = styled.div``;\n\nconst LogEntryTime = styled.span`\n  color: ${(props) => props.theme.text.secondary};\n`;\n\ninterface LogEntryMessageProps {\n  type: MessageType;\n}\n\nconst logEntryTypeColorMap = {\n  [MessageType.INFO]: \"#666\",\n  [MessageType.RX]: \"#090\",\n  [MessageType.TX]: \"#FF8000\",\n  [MessageType.ERROR]: \"#900\",\n};\n\nconst LogEntryMessage = styled.span<LogEntryMessageProps>`\n  padding-left: 6px;\n  border-left: 2px solid ${(props) => logEntryTypeColorMap[props.type]};\n  margin-left: 6px;\n`;\n\nconst LogEntryCount = styled.span`\n  display: inline-block;\n  padding: 0 4px;\n  margin-left: 8px;\n  border-radius: 8px;\n  background-color: ${(props) => props.theme.text.primary};\n  color: ${(props) => props.theme.bg.tertiary};\n`;\n\nconst ClearLogButton = styled.div<Clickable>`\n  box-sizing: content-box;\n  position: absolute;\n  bottom: ${(props) => props.theme.size.gridGap};\n  right: ${(props) => props.theme.size.gridGap};\n  width: 32px;\n  height: 32px;\n  padding: 10px;\n  background-color: ${(props) => props.theme.bg.tertiary};\n`;\n\nconst ClearLogIcon = styled(ClearIcon)`\n  background-color: ${(props) => props.theme.text.secondary};\n`;\n\nexport const Log: React.SFC = () => (\n  <Subscribe to={[LogContainer]}>\n    {(log: LogContainer) => (\n      <StatusGridItem>\n        <LogWrap>\n          {log.state.entries.map((entry) => (\n            <LogEntry key={entry.id}>\n              <LogEntryTime>{formatTime(entry.time)}</LogEntryTime>\n              <LogEntryMessage type={entry.type}>\n                {entry.message}\n              </LogEntryMessage>\n              {entry.count > 1 ? (\n                <LogEntryCount>{entry.count}</LogEntryCount>\n              ) : null}\n            </LogEntry>\n          ))}\n        </LogWrap>\n        <ClearLogButton onClick={() => log.clear()}>\n          <ClearLogIcon />\n        </ClearLogButton>\n      </StatusGridItem>\n    )}\n  </Subscribe>\n);\n","import { pad } from \"./pad\";\n\nexport function formatTime(date: Date): string {\n  return (\n    `${pad(date.getHours(), 2, \"0\")}:` +\n    `${pad(date.getMinutes(), 2, \"0\")}:` +\n    `${pad(date.getSeconds(), 2, \"0\")}.` +\n    `${pad(date.getMilliseconds(), 3, \"0\")}`\n  );\n}\n","import React from \"react\";\nimport { titleCase } from \"title-case\";\nimport { Subscribe } from \"unstated\";\n\nimport { StatusContainer } from \"../containers/StatusContainer\";\nimport { TransportState } from \"../lib/transport/Transport\";\nimport { multiTransport } from \"../services/multiTransport\";\nimport { robot } from \"../services/robot\";\n\nimport { Cell, CellStatus } from \"./Grid\";\nimport { NativeIcon, WebsocketIcon } from \"./Icon\";\nimport { Text } from \"./Text\";\n\nexport const TransportStatus: React.SFC = () => (\n  <Subscribe to={[StatusContainer]}>\n    {(status: StatusContainer) => {\n      const transportStatus =\n        status.state.transportState === TransportState.CONNECTED\n          ? CellStatus.GOOD\n          : CellStatus.BAD;\n      const description =\n        status.state.transportState !== TransportState.CONNECTED ||\n        status.state.remoteIp === undefined\n          ? titleCase(status.state.transportState)\n          : status.state.remoteIp;\n\n      return (\n        <Cell\n          status={transportStatus}\n          onClick={() => robot.ping(status.getConnectedSerial() === undefined)}\n        >\n          {multiTransport.getName() === \"Native\" ? (\n            <NativeIcon />\n          ) : (\n            <WebsocketIcon />\n          )}\n          <Text primary>{multiTransport.getName()}</Text>\n          <Text>{description}</Text>\n        </Cell>\n      );\n    }}\n  </Subscribe>\n);\n","import React from \"react\";\nimport { titleCase } from \"title-case\";\nimport { Subscribe } from \"unstated\";\n\nimport { SerialType, StatusContainer } from \"../containers/StatusContainer\";\n\nimport { Cell, CellStatus } from \"./Grid\";\nimport { BluetoothIcon, SerialIcon } from \"./Icon\";\nimport { Text } from \"./Text\";\n\nexport const UsbStatus: React.SFC = () => (\n  <Subscribe to={[StatusContainer]}>\n    {(status: StatusContainer) => {\n      const connectedSerial = status.getConnectedSerial();\n      const usbStatus =\n        connectedSerial !== undefined ? CellStatus.GOOD : CellStatus.BAD;\n      const Icon =\n        connectedSerial && connectedSerial.type === SerialType.BLUETOOTH\n          ? BluetoothIcon\n          : SerialIcon;\n      const title = connectedSerial ? connectedSerial.type : \"Serial\";\n      const description = titleCase(\n        connectedSerial ? connectedSerial.state : \"Disconnected\"\n      );\n\n      return (\n        <Cell status={usbStatus}>\n          <Icon />\n          <Text primary>{title}</Text>\n          <Text>{description}</Text>\n        </Cell>\n      );\n    }}\n  </Subscribe>\n);\n","import React from \"react\";\n\nimport { BatteryStatus } from \"../components/BatteryStatus\";\nimport { Grid } from \"../components/Grid\";\nimport { LidarStatus } from \"../components/LidarStatus\";\nimport { Log } from \"../components/Log\";\nimport { TransportStatus } from \"../components/TransportStatus\";\nimport { UsbStatus } from \"../components/UsbStatus\";\nimport { View } from \"../components/View\";\n\n// TODO: add target and real speed (compare %?)\n// TODO: add odometry (visualize path?)\n// TODO: add lidar (tiny map?)\n// TODO: add buttons (state for each?)\nexport const StatusView: React.SFC = () => (\n  <View>\n    <Grid columns=\"1fr 1fr 1fr\" rows=\"100px 100px\">\n      <UsbStatus />\n      <TransportStatus />\n      <BatteryStatus />\n      <LidarStatus />\n      <Log />\n    </Grid>\n  </View>\n);\n","import React from \"react\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"unstated\";\n\nimport { Hub } from \"./components/Hub\";\nimport { MainMenu } from \"./components/MainMenu\";\nimport { GlobalStyle, theme } from \"./theme\";\nimport { MapView } from \"./views/MapView\";\nimport { RemoteView } from \"./views/RemoteView\";\nimport { SettingsView } from \"./views/SettingsView\";\nimport { SimulationView } from \"./views/SimulationView\";\nimport { StatusView } from \"./views/StatusView\";\n\nexport class App extends React.Component {\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <Provider>\n          <GlobalStyle />\n          <Hub />\n          <BrowserRouter>\n            <AppWrap>\n              <Switch>\n                <Route path=\"/status\" component={StatusView} />\n                <Route path=\"/map\" component={MapView} />\n                <Route path=\"/remote\" component={RemoteView} />\n                <Route path=\"/simulation\" component={SimulationView} />\n                <Route path=\"/settings\" component={SettingsView} />\n                <Route>\n                  <Redirect to=\"/status\" />\n                </Route>\n              </Switch>\n              <MainMenu />\n            </AppWrap>\n          </BrowserRouter>\n        </Provider>\n      </ThemeProvider>\n    );\n  }\n}\n\nconst AppWrap = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  animation: ${(props) => props.theme.animation.fadeIn} 1000ms;\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"reset-css\";\n\nimport { App } from \"./App\";\n\n// render the application\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// import { TrackedVehicleOptions } from \"./lib/tracked-vehicle-kinematics\";\n// import { WebSocketClientOptions } from \"./lib/web-socket-client/index\";\n\n// export interface RulesConfig {\n//   battery: {\n//     low: number;\n//     critical: number;\n//   };\n// }\n\n// export interface Config {\n//   webSocket: WebSocketClientOptions;\n//   rules: RulesConfig;\n//   vehicle: TrackedVehicleOptions;\n// }\n\nexport const config = {\n  webSocket: {\n    // allow overriding web-socket options via local storage\n    host:\n      // process.env.NODE_ENV === \"development\" &&\n      localStorage.webSocketHost !== undefined\n        ? localStorage.webSocketHost\n        : \"127.0.0.1\",\n    port:\n      localStorage.webSocketPort !== undefined\n        ? parseInt(localStorage.webSocketPort, 10)\n        : 8000,\n    useSSL: false,\n    reconnectInterval: 3000,\n  },\n  rules: {\n    battery: {\n      low: 15.0,\n      critical: 13.5,\n    },\n  },\n  vehicle: {\n    trackWidth: 0.12, // meters\n    maxSpeed: 1, // meters per second\n    wheelDiameter: 0.039, // meters\n    encoderCountsPerRotation: 20, // encoder pulse count per revolution\n    gearboxRatio: 25, // 25/1 gearbox ratio\n    speedUpdateInterval: 1000 / 20, // 20Hz\n  },\n};\n","import { dummyLogger, Logger } from \"ts-log\";\n\nimport { Transport, TransportListener, TransportState } from \"./Transport\";\n\nexport interface WebsocketTransportOptions {\n  host: string;\n  port: number;\n  useSSL?: boolean;\n  reconnectInterval?: number;\n  log?: Logger;\n}\n\nexport class WebsocketTransport implements Transport {\n  private readonly options: Required<WebsocketTransportOptions>;\n  private readonly log: Logger;\n  private readonly listeners: TransportListener[] = [];\n  private state: TransportState = TransportState.DISCONNECTED;\n  private wasConnected = false;\n  private ws?: WebSocket;\n\n  constructor(options: WebsocketTransportOptions) {\n    this.options = {\n      useSSL: false,\n      log: dummyLogger,\n      reconnectInterval: 1000,\n      ...options,\n    };\n    this.log = this.options.log;\n  }\n\n  getName() {\n    return \"WebSocket\";\n  }\n\n  isAvailable() {\n    return WebSocket !== undefined;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  addListener(listener: TransportListener) {\n    this.listeners.push(listener);\n  }\n\n  async connect() {\n    const url = `${this.options.useSSL ? \"wss\" : \"ws\"}://${this.options.host}:${\n      this.options.port\n    }`;\n\n    this.log.info(`connecting to web-socket server at ${url}`);\n\n    // update state depending on whether the connection was ever established\n    this.setState(\n      this.wasConnected\n        ? TransportState.RECONNECTING\n        : TransportState.CONNECTING\n    );\n\n    // attempt to open web-socket connection\n    this.ws = new WebSocket(url);\n\n    // handle open event\n    this.ws.onopen = (event) => {\n      this.log.info(\"established web-socket connection\");\n\n      this.wasConnected = true;\n\n      // update state\n      this.setState(TransportState.CONNECTED);\n    };\n\n    // handle close event\n    this.ws.onclose = (event) => {\n      const logDetails = `code: ${event.code}, reason: ${\n        event.reason\n      }, was clean: ${event.wasClean ? \"yes\" : \"no\"}`;\n\n      if (this.wasConnected) {\n        this.log.warn(`connection to web-socket was lost (${logDetails})`);\n      } else {\n        this.log.warn(`connecting to web-socket failed (${logDetails})`);\n      }\n\n      // update state\n      this.setState(TransportState.DISCONNECTED);\n\n      // only attempt to reconnect if connection has succeeded before\n      if (this.wasConnected) {\n        setTimeout(() => {\n          void this.connect();\n        }, this.options.reconnectInterval);\n      }\n    };\n\n    // handle error event\n    this.ws.onerror = (_event) => {\n      this.log.warn(\"got web-socket error\");\n\n      // notify the listeners\n      this.listeners.forEach((listener) => listener.onError(this));\n    };\n\n    // handle message event\n    this.ws.onmessage = (event) => {\n      const message = event.data;\n\n      // this.log.info(\"got message\", message);\n\n      // notify the listeners of message received\n      this.listeners.forEach((listener) =>\n        listener.onMessageReceived(this, message)\n      );\n    };\n  }\n\n  send(message: string) {\n    // we can only send messages if we're connected\n    if (!this.ws || this.state !== TransportState.CONNECTED) {\n      this.log.warn(\n        `sending message \"${message}\" requested but websocket state is ${this.state}`\n      );\n\n      // notify of failed message sending attempt\n      this.listeners.forEach((listener) =>\n        listener.onMessageSent(this, message, false)\n      );\n\n      return false;\n    }\n\n    // send the message\n    this.ws.send(message);\n\n    // notify the listeners\n    this.listeners.forEach((listener) =>\n      listener.onMessageSent(this, message, true)\n    );\n\n    return true;\n  }\n\n  private setState(newState: TransportState) {\n    // ignore if state did not change\n    if (newState === this.state) {\n      return;\n    }\n\n    // remember previous state\n    const previousState = this.state;\n\n    // update current state\n    this.state = newState;\n\n    // notify the listeners of state change\n    this.listeners.forEach((listener) =>\n      listener.onStateChanged(this, newState, previousState)\n    );\n  }\n}\n","import { dummyLogger, Logger } from \"ts-log\";\n\nimport { Transport, TransportListener, TransportState } from \"./Transport\";\n\ninterface BridgeInterface {\n  receive(message: string): void;\n}\n\n// extend the global window interface with the bridge interfaces\ndeclare global {\n  interface Window {\n    native?: BridgeInterface;\n    app?: BridgeInterface;\n  }\n}\n\nexport interface NativeTransportOptions {\n  log?: Logger;\n}\n\nexport class NativeTransport implements Transport {\n  private readonly options: Required<NativeTransportOptions>;\n  private readonly log: Logger;\n  private readonly listeners: TransportListener[] = [];\n  private readonly bridgeExists: boolean;\n  private state: TransportState = TransportState.DISCONNECTED;\n  private native?: BridgeInterface;\n\n  constructor(options: NativeTransportOptions = {}) {\n    this.options = {\n      log: dummyLogger,\n      ...options,\n    };\n    this.log = this.options.log;\n    this.bridgeExists = window.native !== undefined;\n  }\n\n  getName() {\n    return \"Native\";\n  }\n\n  isAvailable() {\n    return this.bridgeExists;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  addListener(listener: TransportListener) {\n    this.listeners.push(listener);\n  }\n\n  async connect() {\n    // attempt to connect\n    this.setState(TransportState.CONNECTING);\n\n    // default to using mock interface if not available\n    if (window.native === undefined) {\n      this.log.info(\"no native bridge is available\");\n\n      // connection failed\n      this.setState(TransportState.DISCONNECTED);\n\n      return;\n    }\n\n    this.log.info(\"native bridge is available\");\n\n    // store reference to the native javascript bridge interface\n    this.native = window.native;\n\n    // setup native to app interface\n    window.app = {\n      receive: (message) => this.onMessageReceived(message),\n    };\n\n    // perform handshake to test connection\n    this.send(\"!handshake\");\n\n    // set connecting state until handshake response is received\n    this.setState(TransportState.CONNECTING);\n  }\n\n  send(message: string) {\n    // fail to send if no bridge available\n    if (!this.native) {\n      this.log.warn(\n        `sending message \"${message}\" requested but the native bridge is not available`\n      );\n\n      // notify of failed message sending attempt\n      this.listeners.forEach((listener) =>\n        listener.onMessageSent(this, message, false)\n      );\n\n      return false;\n    }\n\n    // attempt to send the message\n    try {\n      // call the receive native bridge function\n      this.native.receive(message);\n\n      // notify of message sent\n      this.listeners.forEach((listener) =>\n        listener.onMessageSent(this, message, true)\n      );\n\n      return true;\n    } catch (error) {\n      // notify of error\n      this.listeners.forEach((listener) => listener.onError(this, error));\n    }\n\n    return false;\n  }\n\n  private setState(newState: TransportState) {\n    // ignore if state did not change\n    if (newState === this.state) {\n      return;\n    }\n\n    // remember previous state\n    const previousState = this.state;\n\n    // update current state\n    this.state = newState;\n\n    // notify the listeners of state change\n    this.listeners.forEach((listener) =>\n      listener.onStateChanged(this, newState, previousState)\n    );\n  }\n\n  private onMessageReceived(message: string) {\n    this.log.info(`received: \"${message}\"`);\n\n    // notify the listeners of message received\n    this.listeners.forEach((listener) =>\n      listener.onMessageReceived(this, message)\n    );\n\n    // handle handshake response\n    if (message === \"!handshake\") {\n      // consider connection successful\n      this.setState(TransportState.CONNECTED);\n    }\n  }\n}\n","import { dummyLogger, Logger } from \"ts-log\";\nimport { Transport, TransportListener, TransportState } from \"./Transport\";\n\nexport interface MultiTransportOptions {\n  log?: Logger;\n}\n\nexport class MultiTransport implements Transport {\n  private readonly options: Required<MultiTransportOptions>;\n  private readonly log: Logger;\n  private readonly listeners: TransportListener[] = [];\n  private readonly transports: Transport[] = [];\n\n  constructor(options: MultiTransportOptions = {}) {\n    this.options = {\n      log: dummyLogger,\n      ...options,\n    };\n    this.log = this.options.log;\n  }\n\n  getName() {\n    const activeTransport = this.getActiveTransport();\n\n    // return none if no transport is available\n    if (!activeTransport) {\n      return \"None\";\n    }\n\n    // return active transport name\n    return activeTransport.getName();\n  }\n\n  isAvailable() {\n    return this.getAvailableTransport() !== undefined;\n  }\n\n  getState() {\n    const activeTransport = this.getActiveTransport();\n\n    // return disconnected if no transport is available\n    if (!activeTransport) {\n      return TransportState.DISCONNECTED;\n    }\n\n    // return active transport state\n    return activeTransport.getState();\n  }\n\n  addListener(listener: TransportListener) {\n    this.listeners.push(listener);\n  }\n\n  async connect() {\n    // call connect on all disconnected transports\n    const promises = this.transports.map((transport) => {\n      if (transport.getState() !== TransportState.DISCONNECTED) {\n        return Promise.resolve();\n      }\n\n      return transport.connect();\n    });\n\n    // wait for all transports to connect\n    await Promise.all(promises);\n  }\n\n  send(message: string) {\n    const connectedTransport = this.getConnectedTransport();\n\n    if (!connectedTransport) {\n      this.log.warn(\n        `sending message \"${message}\" requested but there is no connected transport available`\n      );\n\n      // notify of failed message sending attempt\n      this.listeners.forEach((listener) =>\n        listener.onMessageSent(this, message, false)\n      );\n\n      return false;\n    }\n\n    return connectedTransport.send(message);\n  }\n\n  addTransport(transport: Transport) {\n    // listen for transport events and forward active transport events\n    transport.addListener({\n      onStateChanged: (eventTransport, newState, previousState) => {\n        const activeTransport = this.getActiveTransport();\n\n        if (eventTransport !== activeTransport) {\n          return;\n        }\n\n        this.listeners.forEach((listener) =>\n          listener.onStateChanged(eventTransport, newState, previousState)\n        );\n      },\n      onError: (eventTransport, error) => {\n        const activeTransport = this.getActiveTransport();\n\n        if (eventTransport !== activeTransport) {\n          return;\n        }\n\n        this.listeners.forEach((listener) =>\n          listener.onError(eventTransport, error)\n        );\n      },\n      onMessageSent: (\n        eventTransport,\n        message,\n        wasSentSuccessfully: boolean\n      ) => {\n        const activeTransport = this.getActiveTransport();\n\n        if (eventTransport !== activeTransport) {\n          return;\n        }\n\n        this.listeners.forEach((listener) =>\n          listener.onMessageSent(eventTransport, message, wasSentSuccessfully)\n        );\n      },\n      onMessageReceived: (eventTransport, message) => {\n        const activeTransport = this.getActiveTransport();\n\n        if (eventTransport !== activeTransport) {\n          return;\n        }\n\n        this.listeners.forEach((listener) =>\n          listener.onMessageReceived(eventTransport, message)\n        );\n      },\n    });\n\n    this.transports.push(transport);\n  }\n\n  getAvailableTransport() {\n    // return first available transport\n    return this.transports.find((transport) => transport.isAvailable());\n  }\n\n  getConnectedTransport() {\n    // return first connected transport if any\n    return this.transports.find(\n      (transport) => transport.getState() === TransportState.CONNECTED\n    );\n  }\n\n  getActiveTransport() {\n    const connectedTransport = this.getConnectedTransport();\n\n    // return first connected transport if exists\n    if (connectedTransport) {\n      return connectedTransport;\n    }\n\n    // return first available transport if exists\n    return this.getAvailableTransport();\n  }\n}\n","import { NativeTransport } from \"../lib/transport\";\n\nexport const nativeTransport = new NativeTransport({\n  // log: console\n});\n","import { SimulatedRobot } from \"../lib/simulator\";\n\nexport const simulatedRobot = new SimulatedRobot({\n  log: console,\n});\n","import { SimulatedTransport } from \"../lib/simulator\";\n\nimport { simulatedRobot } from \"./simulatedRobot\";\n\nexport const simulatedTransport = new SimulatedTransport({\n  simulatedRobot,\n  log: console,\n});\n","import { config } from \"../config\";\nimport { WebsocketTransport } from \"../lib/transport\";\n\nexport const websocketTransport = new WebsocketTransport({\n  ...config.webSocket,\n  // log: console,\n});\n","import { MultiTransport } from \"../lib/transport\";\n\nimport { nativeTransport } from \"./nativeTransport\";\nimport { simulatedTransport } from \"./simulatedTransport\";\nimport { websocketTransport } from \"./websocketTransport\";\n\nexport const multiTransport = new MultiTransport({\n  // log: console\n});\n\n// register sub-transports in preferred order\nmultiTransport.addTransport(nativeTransport);\nmultiTransport.addTransport(websocketTransport);\nmultiTransport.addTransport(simulatedTransport);\n","export interface FpsCounterOptions {\n  historySize?: number;\n  averageSize?: number;\n}\n\nexport class FpsCounter {\n  private options: Required<FpsCounterOptions>;\n  private frameDurations: number[] = [];\n  private lastFrameTime?: number;\n\n  constructor(options: FpsCounterOptions = {}) {\n    this.options = {\n      historySize: 60,\n      averageSize: 60,\n      ...options,\n    };\n  }\n\n  update() {\n    const currentTime = Date.now();\n\n    if (!this.lastFrameTime) {\n      this.lastFrameTime = currentTime;\n\n      return;\n    }\n\n    const frameDuration = currentTime - this.lastFrameTime;\n\n    this.frameDurations.push(frameDuration);\n\n    if (this.frameDurations.length > this.options.historySize) {\n      this.frameDurations.shift();\n    }\n\n    this.lastFrameTime = currentTime;\n  }\n\n  getFps() {\n    const samples = this.frameDurations.slice(\n      Math.max(this.frameDurations.length - this.options.averageSize, 0),\n      this.frameDurations.length\n    );\n\n    if (samples.length === 0) {\n      return 0;\n    }\n\n    const sum = samples.reduce(\n      (result, frameDuration) => result + frameDuration,\n      0\n    );\n    const avg = sum / samples.length;\n    const fps = 1000 / avg;\n\n    return fps;\n  }\n\n  getHistory() {\n    return this.frameDurations;\n  }\n}\n","import { dummyLogger, Logger } from \"ts-log\";\n\nimport { ManagedGamepad } from \"./\";\n\nexport interface GamepadManagerOptions {\n  readonly log?: Logger;\n  readonly autoPoll?: boolean;\n  readonly defaultDeadzone?: number;\n  onConnect?(gamepad: ManagedGamepad): void;\n  onDisconnect?(gamepad: ManagedGamepad): void;\n  onUpdate?(gamepad: ManagedGamepad): void;\n}\n\nexport class GamepadManager {\n  gamepads: ManagedGamepad[] = [];\n  private options: Required<GamepadManagerOptions>;\n  private log: Logger;\n\n  constructor(options: GamepadManagerOptions = {}) {\n    this.options = {\n      log: dummyLogger,\n      autoPoll: true,\n      defaultDeadzone: 0,\n      onConnect: (_gamepad) => {\n        /* nothing */\n      },\n      onDisconnect: (_gamepad) => {\n        /* nothing */\n      },\n      onUpdate: (_gamepad) => {\n        /* nothing */\n      },\n      ...options,\n    };\n    this.log = this.options.log;\n\n    // detect gamepad support\n    if (typeof navigator.getGamepads !== \"function\") {\n      this.log.info(\"gamepads are not supported\");\n\n      return;\n    }\n\n    // listen for gamepad connect events\n    window.addEventListener(\"gamepadconnected\", (e) => {\n      const event = e as GamepadEvent;\n      const gamepad = event.gamepad;\n\n      this.log.info(\n        `gamepad #${gamepad.index} \"${gamepad.id}\" connected (${gamepad.buttons.length} buttons, ${gamepad.axes.length} axes)`\n      );\n\n      // create managed gamepad\n      const managedGamepad = new ManagedGamepad({\n        index: gamepad.index,\n        defaultDeadzone: this.options.defaultDeadzone,\n        log: this.log,\n      });\n\n      // listen for updates, trigger update events\n      managedGamepad.addUpdateListener((updatedGamepad) =>\n        this.options.onUpdate(updatedGamepad)\n      );\n\n      // start polling if requested automatically\n      if (this.options.autoPoll) {\n        managedGamepad.startPolling();\n      }\n\n      // store reference\n      this.gamepads.push(managedGamepad);\n\n      // trigger connect event\n      this.options.onConnect(managedGamepad);\n    });\n\n    // listen for gamepad disconnect events\n    window.addEventListener(\"gamepaddisconnected\", (e) => {\n      const event = e as GamepadEvent;\n      const gamepad = event.gamepad;\n\n      // attempt to find the gamepad by index\n      const managedGamepad = this.getGamepadByIndex(gamepad.index);\n\n      // handle failure to find the gamepad\n      if (!managedGamepad) {\n        this.log.warn(\n          `gamepad #${gamepad.index} \"${gamepad.id}\" disconnected but no managed gamepad with this index was found, this should not happen`\n        );\n\n        return;\n      }\n\n      this.log.info(`gamepad #${gamepad.index} \"${gamepad.id}\" disconnected`);\n\n      // remove the gamepad from the list of managed gamepads\n      this.gamepads = this.gamepads.filter((item) => item !== managedGamepad);\n\n      // stop polling\n      managedGamepad.stopPolling();\n\n      // trigger disconnect event\n      this.options.onDisconnect(managedGamepad);\n    });\n\n    // const gamepads = navigator.getGamepads();\n  }\n\n  getGamepadByIndex(index: number) {\n    return this.gamepads.find((gamepad) => gamepad.index === index);\n  }\n\n  getFirstAvailableGamepad() {\n    return this.gamepads.length > 0 ? this.gamepads[0] : undefined;\n  }\n}\n","import { dummyLogger, Logger } from \"ts-log\";\n\nexport interface ManagedGamepadOptions {\n  readonly index: number;\n  readonly defaultDeadzone?: number;\n  readonly log?: Logger;\n}\n\nexport type HandleUpdateFn = (gamepad: ManagedGamepad) => void;\n\nexport class ManagedGamepad {\n  index: number;\n  axes: number[] = [];\n  buttons: GamepadButton[] = [];\n  private deadzone: number[] = [];\n  private defaultDeadzone: number = 0;\n  private readonly options: Required<ManagedGamepadOptions>;\n  private readonly log: Logger;\n  private updateListeners: HandleUpdateFn[] = [];\n  private isPolling = false;\n  private animationFrameRequest?: number;\n\n  constructor(options: ManagedGamepadOptions) {\n    this.options = {\n      defaultDeadzone: 0,\n      log: dummyLogger,\n      ...options,\n    };\n    this.index = this.options.index;\n    this.defaultDeadzone = this.options.defaultDeadzone;\n    this.log = this.options.log;\n\n    // get initial state\n    this.poll();\n  }\n\n  setDeadzone(axisIndex: number, deadzone: number) {\n    this.deadzone[axisIndex] = deadzone;\n  }\n\n  setDefaultDeadzone(deadzone: number) {\n    this.defaultDeadzone = deadzone;\n  }\n\n  addUpdateListener(listener: HandleUpdateFn) {\n    this.updateListeners.push(listener);\n  }\n\n  removeUpdateListener(listener: HandleUpdateFn) {\n    this.updateListeners = this.updateListeners.filter(\n      (item) => item !== listener\n    );\n  }\n\n  startPolling() {\n    if (!this.isPolling) {\n      this.log.info(`starting polling of gamepad #${this.index}`);\n    }\n\n    // we're now in polling mode\n    this.isPolling = true;\n\n    // request animation frame for polling\n    this.animationFrameRequest = requestAnimationFrame(() => {\n      this.animationFrameRequest = undefined;\n\n      // perform poll\n      this.poll();\n\n      // request another poll if not stopped\n      if (this.isPolling) {\n        this.startPolling();\n      }\n    });\n  }\n\n  stopPolling() {\n    // do nothing if not polling\n    if (!this.isPolling) {\n      return;\n    }\n\n    // not polling any more\n    this.isPolling = false;\n\n    this.log.info(`stopping polling of gamepad #${this.index}`);\n\n    // cancel next animation frame if scheduled\n    if (this.animationFrameRequest !== undefined) {\n      cancelAnimationFrame(this.animationFrameRequest);\n    }\n  }\n\n  poll() {\n    // get current gamepad info\n    const gamepad = this.getCurrentState();\n\n    // give up if not found\n    if (!gamepad) {\n      this.log.warn(\n        `attempted to poll gamepad #${this.index} but the gamepad could not be found`\n      );\n\n      // stop polling unavailable gamepad\n      if (this.isPolling) {\n        this.stopPolling();\n      }\n\n      return;\n    }\n\n    // store current state\n    this.axes = [...gamepad.axes];\n    this.buttons = [...gamepad.buttons];\n\n    // applies deadzone to axes\n    this.applyDeadzone();\n\n    // call the update listeners\n    for (const updateListener of this.updateListeners) {\n      updateListener(this);\n    }\n  }\n\n  private getCurrentState() {\n    // get gamepad by index\n    const gamepad = navigator.getGamepads()[this.index];\n\n    // return undefined if no valid gamepad could be found\n    if (gamepad === undefined || gamepad === null) {\n      return undefined;\n    }\n\n    return gamepad;\n  }\n\n  private applyDeadzone() {\n    this.axes = this.axes.map((value, index) => {\n      const deadzone =\n        this.deadzone[index] !== undefined\n          ? this.deadzone[index]\n          : this.defaultDeadzone;\n\n      if (Math.abs(value) < deadzone) {\n        return 0;\n      }\n\n      return value;\n    });\n  }\n}\n","import {\n  AStarFinder as PathFinder,\n  DiagonalMovement,\n  Grid,\n  Heuristic,\n} from \"pathfinding\";\n\nexport interface OccupancyGridOptions {\n  cellWidth: number;\n  cellHeight: number;\n}\n\nexport interface GenerateOccupancyGridOptions {\n  rows: number;\n  columns: number;\n  defaultValue: number;\n}\n\nexport interface Coordinates {\n  x: number;\n  y: number;\n}\n\nexport interface SetOccupancyOptions {\n  row: number;\n  column: number;\n  occupancy: number;\n}\n\nexport interface SetOccupancyAtOptions {\n  center: Coordinates;\n  occupancy: number;\n}\n\nexport interface FindShortestPathOptions {\n  from: Cell;\n  to: Cell;\n}\n\nexport interface OccupancyGridSize {\n  rows: number;\n  columns: number;\n  width: number;\n  height: number;\n}\n\nexport type OccupancyGridData = number[][];\n\nexport type Cell = [number, number];\n\nexport type Path = Cell[];\n\nexport class OccupancyGrid {\n  options: Required<OccupancyGridOptions>;\n\n  constructor(public data: OccupancyGridData, options: OccupancyGridOptions) {\n    this.options = {\n      ...options,\n    };\n  }\n\n  static generate(\n    { rows, columns, defaultValue }: GenerateOccupancyGridOptions,\n    options: OccupancyGridOptions\n  ) {\n    const data: OccupancyGridData = [];\n    // const data: OccupancyGridData = Array(rows).fill(Array(columns).fill(defaultValue));\n\n    for (let row = 0; row < rows; row++) {\n      data[row] = Array(columns).fill(defaultValue);\n    }\n\n    return new OccupancyGrid(data, options);\n  }\n\n  setOccupancy({ row, column, occupancy }: SetOccupancyOptions) {\n    this.data[row][column] = occupancy;\n  }\n\n  setOccupancyAt({ center, occupancy }: SetOccupancyAtOptions) {\n    const { row, column, exists } = this.getCellAtCoordinates(center);\n\n    if (!exists) {\n      return;\n    }\n\n    this.setOccupancy({ row, column, occupancy });\n  }\n\n  getOccupancyAt(center: Coordinates) {\n    const { row, column, exists } = this.getCellAtCoordinates(center);\n\n    if (!exists) {\n      return undefined;\n    }\n\n    return this.getOccupancy(row, column);\n  }\n\n  getOccupancy(row: number, column: number) {\n    if (this.data[row] === undefined || this.data[row][column] === undefined) {\n      return undefined;\n    }\n\n    return this.data[row][column];\n  }\n\n  getCellAtCoordinates(center: Coordinates) {\n    const { rows, columns, width, height } = this.getSize();\n    const position = { x: center.x + width / 2, y: center.y + height / 2 };\n    const row = Math.floor(position.y / this.options.cellHeight);\n    const column = Math.floor(position.x / this.options.cellWidth);\n    const exists = row >= 0 && row < rows && column >= 0 && column < columns;\n\n    return {\n      row,\n      column,\n      exists,\n    };\n  }\n\n  getSize(): OccupancyGridSize {\n    const rows = this.data.length;\n    const columns = this.data.length > 0 ? this.data[0].length : 0;\n\n    return {\n      rows,\n      columns,\n      width: rows * this.options.cellWidth,\n      height: columns * this.options.cellHeight,\n    };\n  }\n\n  findShortestPath({ from, to }: FindShortestPathOptions): Path {\n    const grid = new Grid(this.data);\n    const finder = new PathFinder({\n      diagonalMovement: DiagonalMovement.Never,\n      heuristic: Heuristic.euclidean,\n    });\n    const path = finder.findPath(from[0], from[1], to[0], to[1], grid);\n\n    return path as Cell[];\n  }\n}\n","export interface StatisticOptions {\n  readonly name: string;\n  readonly min?: number;\n  readonly max?: number;\n  readonly unit?: string;\n  readonly decimalPlaces?: number;\n  readonly historyLength?: number;\n}\n\nexport class Statistic {\n  readonly values: number[] = [];\n\n  constructor(readonly options: StatisticOptions) {}\n\n  report(value: number) {\n    const historyLength = this.options.historyLength || 200;\n\n    this.values.push(value);\n\n    if (this.values.length > historyLength) {\n      this.values.shift();\n    }\n  }\n\n  getLatest() {\n    if (this.values.length === 0) {\n      return 0;\n    }\n\n    return this.values[this.values.length - 1];\n  }\n}\n","import { Statistic, StatisticOptions } from \"./Statistic\";\n\nexport class Statistics {\n  readonly statistics: Statistic[] = [];\n\n  create(options: StatisticOptions) {\n    const statistic = new Statistic(options);\n\n    this.statistics.push(statistic);\n  }\n\n  getByName(name: string) {\n    return this.statistics.find((statistic) => statistic.options.name === name);\n  }\n\n  report(name: string, value: number) {\n    const statistic = this.getByName(name);\n\n    if (!statistic) {\n      throw new Error(`Statistic called \"${name}\" could not be found`);\n    }\n\n    statistic.report(value);\n\n    return statistic;\n  }\n}\n","import { config } from \"../../config\";\nimport { drawRobot } from \"../../services/drawRobot\";\nimport { robot } from \"../../services/robot\";\nimport { FpsCounter } from \"../fps-counter\";\nimport { GamepadManager, ManagedGamepad } from \"../gamepad\";\nimport { OccupancyGrid, Path } from \"../occupancy-grid\";\nimport { RemoteController } from \"../remote-controller\";\nimport { Statistics } from \"../statistics\";\nimport { Ticker, TickInfo } from \"../ticker\";\nimport {\n  CartesianCoordinates,\n  FrameInfo,\n  Layer,\n  LayerMouseEvent,\n  LayerOptions,\n  Visualizer,\n} from \"../visualizer\";\n\nexport interface TimedCartesianCoordinates extends CartesianCoordinates {\n  time: number;\n}\n\nexport interface SimulatorOptions {\n  container: HTMLElement;\n  radius: number;\n  cellSize: number;\n  pathPlanningIntervalMs: number;\n}\n\nexport enum Stat {\n  FPS = \"FPS\",\n  PATH_FINDER = \"Path finder\",\n}\n\nexport class Simulator {\n  private readonly occupancyGrid: OccupancyGrid;\n  private readonly fpsCounter: FpsCounter;\n  private readonly statistics: Statistics;\n  private readonly gamepadManager: GamepadManager;\n  private readonly remoteController: RemoteController;\n  private readonly visualizer: Visualizer;\n  private ticker: Ticker;\n  private gamepad?: ManagedGamepad;\n  private pulses: TimedCartesianCoordinates[] = [];\n  private gridModificationMode = 0;\n  private lastPathPlanningTime = 0;\n  private path: Path = [];\n\n  constructor(readonly options: SimulatorOptions) {\n    const gridSize = (options.radius * 2) / options.cellSize;\n\n    // setup occupancy grid\n    this.occupancyGrid = OccupancyGrid.generate(\n      { rows: gridSize, columns: gridSize, defaultValue: 0 },\n      { cellWidth: options.cellSize, cellHeight: options.cellSize }\n    );\n\n    // setup fps counter\n    this.fpsCounter = new FpsCounter();\n\n    // setup statistics manager\n    this.statistics = new Statistics();\n\n    // setup gamepad\n    this.gamepadManager = new GamepadManager({\n      defaultDeadzone: 0.01,\n      log: console,\n      onConnect: (gamepad) => {\n        console.log(\"GOT GAMEPAD\", gamepad, this.gamepadManager.gamepads);\n\n        this.gamepad = this.gamepadManager.getFirstAvailableGamepad();\n      },\n      onDisconnect: (gamepad) => {\n        console.log(\"LOST GAMEPAD\", gamepad, this.gamepadManager.gamepads);\n\n        this.gamepad = this.gamepadManager.getFirstAvailableGamepad();\n      },\n      onUpdate: (gamepad) => {\n        // console.log(\"GAMEPAD UPDATED\", gamepad.index, gamepad.axes, gamepad.buttons);\n        gamepad.axes.forEach((axisValue, axisIndex) => {\n          const name = `Gamepad #${gamepad.index}.${axisIndex}`;\n\n          if (!this.statistics.getByName(name)) {\n            this.statistics.create({\n              name,\n              min: -1,\n              max: 1,\n              decimalPlaces: 2,\n            });\n          }\n\n          this.statistics.report(name, axisValue);\n        });\n      },\n    });\n\n    // setup remote controller\n    this.remoteController = new RemoteController({\n      vehicle: config.vehicle,\n      robot,\n      log: console,\n    });\n\n    // setup visualizer\n    this.visualizer = new Visualizer(this.options.container);\n\n    // common map layer options\n    const mapLayerOptions: LayerOptions = {\n      defaultStyle: {\n        fillStyle: \"#000\",\n        strokeStyle: \"#000\",\n        font: \"16px roboto-mono-light\",\n        textBaseline: \"top\",\n      },\n      getTransform: (layer) => {\n        const screenOrigin = {\n          x: layer.width / 2,\n          y: layer.height / 2,\n        };\n        const rotation = -Math.PI / 2;\n        const scale = layer.size / 2 / (options.radius + options.cellSize);\n\n        return {\n          horizontalScaling: -1,\n          verticalSkewing: 0,\n          horizontalSkewing: 0,\n          verticalScaling: 1,\n          horizontalTranslation: screenOrigin.x,\n          verticalTranslation: screenOrigin.y,\n          rotation,\n          scale,\n        };\n      },\n    };\n\n    // background\n    this.visualizer.createLayer({\n      ...mapLayerOptions,\n      render: this.renderBackground.bind(this),\n    });\n\n    // // map\n    this.visualizer.createLayer({\n      ...mapLayerOptions,\n      render: this.renderMap.bind(this),\n      onMouseDownEvent: this.onMouseDown.bind(this),\n      onMouseUpEvent: this.onMouseUp.bind(this),\n      onMouseMoveEvent: this.onMouseMove.bind(this),\n    });\n\n    // foreground\n    this.visualizer.createLayer({\n      defaultStyle: {\n        fillStyle: \"#000\",\n        strokeStyle: \"#000\",\n        font: \"16px roboto-mono-light\",\n        textBaseline: \"top\",\n      },\n      render: this.renderForeground.bind(this),\n    });\n\n    // create statistics\n    this.statistics.create({\n      name: Stat.FPS,\n      min: 0,\n      max: 62,\n    });\n\n    this.statistics.create({\n      name: Stat.PATH_FINDER,\n      unit: \"ms\",\n      min: 0,\n      max: 100,\n    });\n\n    // setup ticker\n    this.ticker = new Ticker({\n      tick: this.tick.bind(this),\n    });\n  }\n\n  start() {\n    this.visualizer.start();\n    this.ticker.start();\n  }\n\n  stop() {\n    this.ticker.stop();\n    this.visualizer.stop();\n  }\n\n  private tick(info: TickInfo) {\n    this.tickGamepad(info);\n    this.tickPathFinder(info);\n\n    // update the fps counter\n    this.fpsCounter.update();\n  }\n\n  private tickGamepad(info: TickInfo) {\n    if (!this.gamepad) {\n      return;\n    }\n\n    const speed = this.gamepad.axes[3] * -1;\n    const omega = this.gamepad.axes[0];\n\n    this.remoteController.setSpeed(speed);\n    this.remoteController.setOmega(omega);\n  }\n\n  private tickPathFinder(info: TickInfo) {\n    const currentTime = Date.now();\n    const timeSinceLastUpdate = currentTime - this.lastPathPlanningTime;\n\n    if (timeSinceLastUpdate < this.options.pathPlanningIntervalMs) {\n      return;\n    }\n\n    const pathStartTime = Date.now();\n    this.path = this.occupancyGrid.findShortestPath({\n      from: [0, 0],\n      to: [\n        this.occupancyGrid.data.length - 1,\n        this.occupancyGrid.data[0].length - 1,\n      ],\n    });\n    const pathTimeTaken = Date.now() - pathStartTime;\n\n    this.statistics.report(Stat.PATH_FINDER, pathTimeTaken);\n\n    this.lastPathPlanningTime = currentTime;\n  }\n\n  private renderBackground({ layer, frame }: FrameInfo) {\n    // only draw the first frame\n    if (frame > 0) {\n      return;\n    }\n\n    const cellWidth = this.options.cellSize;\n    const cellHeight = this.options.cellSize;\n    const gridSize = (this.options.radius * 2) / this.options.cellSize;\n    const circleStep = this.options.radius / 4;\n\n    // draw full size background grid\n    layer.drawGrid(\n      {\n        cellWidth,\n        cellHeight,\n        columns: 2 * Math.ceil(layer.height / layer.getScale() / cellWidth / 2),\n        rows: 2 * Math.ceil(layer.width / layer.getScale() / cellHeight / 2),\n        centered: true,\n      },\n      { strokeStyle: \"#222\" }\n    );\n\n    // draw map sized active grid\n    layer.drawGrid(\n      {\n        rows: gridSize,\n        columns: gridSize,\n        cellWidth,\n        cellHeight,\n        centered: true,\n      },\n      { strokeStyle: \"#333\" }\n    );\n\n    // draw radius circles\n    for (\n      let circleRadius = circleStep;\n      circleRadius <= this.options.radius;\n      circleRadius += circleStep\n    ) {\n      layer.drawCircle({ radius: circleRadius }, { strokeStyle: \"#444\" });\n      layer.drawText(\n        {\n          origin: { x: 0, y: circleRadius },\n          text: `${circleRadius.toFixed(2)}m`,\n          offset: { x: 10, y: 0 },\n        },\n        { fillStyle: \"#444\", textBaseline: \"middle\" }\n      );\n    }\n\n    // draw coordinates system on the grid\n    layer.drawCoordinateSystem({\n      gridSize: this.options.cellSize,\n    });\n  }\n\n  private renderMap({ layer }: FrameInfo) {\n    // clear map\n    layer.clear();\n\n    // draw occupancy grid\n    layer.drawOccupancyGrid({\n      grid: this.occupancyGrid.data,\n      path: this.path,\n      cellWidth: this.options.cellSize,\n      cellHeight: this.options.cellSize,\n      centered: true,\n    });\n\n    // draw pulses\n    this.drawPulses(layer);\n\n    // draw robot\n    // TODO: draw at actual coordinates / angle\n    drawRobot({\n      center: { x: 0, y: 0 },\n      angle: 0,\n      layer,\n    });\n  }\n\n  private renderForeground({ layer }: FrameInfo) {\n    layer.clear();\n\n    // get current fps\n    const fps = this.fpsCounter.getFps();\n\n    // report the FPS statistic\n    this.statistics.report(Stat.FPS, fps);\n\n    // draw statistic graphs\n    this.statistics.statistics.forEach((statistic, i) => {\n      layer.drawGraph({\n        name: `${statistic.options.name}: ${statistic\n          .getLatest()\n          .toFixed(statistic.options.decimalPlaces || 0)}${\n          statistic.options.unit || \"\"\n        }`,\n        origin: { x: 10, y: 30 + i * 90 },\n        min: statistic.options.min,\n        max: statistic.options.max,\n        values: statistic.values,\n      });\n    });\n\n    // draw gamepad buttons as a grid\n    for (const gamepad of this.gamepadManager.gamepads) {\n      // reduce the button values to a grid\n      const grid = [\n        gamepad.buttons.reduce<number[]>((values, button) => {\n          values.push(button.value);\n          // values.push(1);\n\n          return values;\n        }, []),\n      ];\n      const cellSize = 200 / gamepad.buttons.length;\n      const origin = { x: 10, y: 10 };\n\n      layer.drawGrid(\n        {\n          origin,\n          rows: 1,\n          columns: gamepad.buttons.length,\n          cellWidth: cellSize,\n          cellHeight: cellSize,\n        },\n        { strokeStyle: \"#111\" }\n      );\n\n      layer.drawOccupancyGrid({\n        grid,\n        origin,\n        cellWidth: cellSize,\n        cellHeight: cellSize,\n      });\n    }\n  }\n\n  private drawPulses(layer: Layer) {\n    // draw mouse events\n    const currentTime = Date.now();\n    const lifetime = 250;\n\n    // remove expired pulses\n    this.pulses = this.pulses.filter(\n      ({ time }) => currentTime - time < lifetime\n    );\n\n    // draw pulses\n    this.pulses.forEach(({ x, y, time }) =>\n      layer.drawPulse(\n        { center: { x, y }, lifetime, age: currentTime - time },\n        { fillStyle: \"#0F0\" }\n      )\n    );\n  }\n\n  private onMouseDown({ world }: LayerMouseEvent) {\n    const currentOccupancy = this.occupancyGrid.getOccupancyAt(world);\n\n    if (currentOccupancy !== undefined) {\n      if (this.gridModificationMode === 0) {\n        this.gridModificationMode = currentOccupancy === 0 ? 1 : -1;\n      }\n\n      this.occupancyGrid.setOccupancyAt({\n        center: world,\n        occupancy: currentOccupancy === 1 ? 0 : 1,\n      });\n      this.pulses.push({ ...world, time: Date.now() });\n    }\n  }\n\n  private onMouseUp(_event: LayerMouseEvent) {\n    this.gridModificationMode = 0;\n  }\n\n  private onMouseMove({ world, isMouseDown, event }: LayerMouseEvent) {\n    if (!isMouseDown || event.button !== 0) {\n      return;\n    }\n\n    if (this.gridModificationMode === 0) {\n      const currentOccupancy = this.occupancyGrid.getOccupancyAt(world);\n\n      this.gridModificationMode = currentOccupancy === 0 ? 1 : -1;\n    }\n\n    this.occupancyGrid.setOccupancyAt({\n      center: world,\n      occupancy: this.gridModificationMode === 1 ? 1 : 0,\n    });\n  }\n}\n","import { dummyLogger, Logger } from \"ts-log\";\n\nimport { Transport, TransportListener, TransportState } from \"../transport\";\n\nimport { SimulatedRobot } from \"./SimulatedRobot\";\n\nexport interface SimulatedTransportOptions {\n  simulatedRobot: SimulatedRobot;\n  readonly log?: Logger;\n}\n\nexport class SimulatedTransport implements Transport {\n  private readonly options: Required<SimulatedTransportOptions>;\n  private readonly log: Logger;\n  private readonly listeners: TransportListener[] = [];\n  private state = TransportState.DISCONNECTED;\n\n  constructor(options: SimulatedTransportOptions) {\n    this.options = {\n      log: dummyLogger,\n      ...options,\n    };\n    this.log = this.options.log;\n\n    // listen for simulated robot messages\n    this.options.simulatedRobot.addMessageListener((message) =>\n      this.onMessageReceived(message)\n    );\n  }\n\n  getName() {\n    return \"Simulated robot\";\n  }\n\n  isAvailable() {\n    return true;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  addListener(listener: TransportListener) {\n    this.listeners.push(listener);\n  }\n\n  async connect() {\n    this.setState(TransportState.CONNECTING);\n\n    this.send(\"!handshake\");\n  }\n\n  send(message: string) {\n    // send the message to the simulated robot\n    this.options.simulatedRobot.receive(message);\n\n    this.listeners.forEach((listener) =>\n      listener.onMessageSent(this, message, true)\n    );\n\n    return true;\n  }\n\n  private setState(newState: TransportState) {\n    // ignore if state did not change\n    if (newState === this.state) {\n      return;\n    }\n\n    // remember previous state\n    const previousState = this.state;\n\n    // update current state\n    this.state = newState;\n\n    // notify the listeners of state change\n    this.listeners.forEach((listener) =>\n      listener.onStateChanged(this, newState, previousState)\n    );\n  }\n\n  private onMessageReceived(message: string) {\n    this.log.info(`received: \"${message}\"`);\n\n    // notify the listeners of message received\n    this.listeners.forEach((listener) =>\n      listener.onMessageReceived(this, message)\n    );\n\n    // handle handshake response\n    if (message === \"!handshake\") {\n      // consider connection successful\n      this.setState(TransportState.CONNECTED);\n    }\n  }\n}\n","import { dummyLogger, Logger } from \"ts-log\";\n\nexport interface TickerOptions {\n  readonly autoStart?: boolean;\n  readonly log?: Logger;\n  tick(info: TickInfo): void;\n}\n\nexport interface TickInfo {\n  dt: number;\n  time: number;\n  frame: number;\n}\n\nexport class Ticker {\n  private readonly options: Required<TickerOptions>;\n  private readonly log: Logger;\n  private isRunning = false;\n  private frameNumber = 0;\n  private scheduledAnimationFrame?: number;\n  private lastTickTime?: number;\n\n  constructor(options: TickerOptions) {\n    this.options = {\n      autoStart: false,\n      log: dummyLogger,\n      ...options,\n    };\n    this.log = this.options.log;\n\n    if (this.options.autoStart) {\n      this.start();\n    }\n  }\n\n  start() {\n    this.log.info(\"starting\");\n\n    this.isRunning = true;\n\n    this.scheduleNextFrame();\n  }\n\n  stop() {\n    this.log.info(\"stopping\");\n\n    this.isRunning = false;\n\n    if (this.scheduledAnimationFrame !== undefined) {\n      cancelAnimationFrame(this.scheduledAnimationFrame);\n\n      this.scheduledAnimationFrame = undefined;\n    }\n  }\n\n  tick() {\n    if (!this.isRunning) {\n      return;\n    }\n\n    const currentTime = Date.now();\n    const dt =\n      (this.lastTickTime ? currentTime - this.lastTickTime : 16) / 1000;\n\n    this.options.tick({\n      dt,\n      time: currentTime,\n      frame: this.frameNumber++,\n    });\n\n    this.lastTickTime = currentTime;\n  }\n\n  private scheduleNextFrame() {\n    this.scheduledAnimationFrame = window.requestAnimationFrame((newTime) => {\n      this.scheduledAnimationFrame = undefined;\n\n      if (!this.isRunning) {\n        return;\n      }\n\n      this.tick();\n      this.scheduleNextFrame();\n    });\n  }\n}\n","export interface TrackedVehicleOptions {\n  trackWidth: number;\n  maxSpeed: number;\n  wheelDiameter: number;\n  encoderCountsPerRotation: number;\n  gearboxRatio: number;\n  speedUpdateInterval: number;\n}\n\nexport interface MotorValue {\n  readonly left: number;\n  readonly right: number;\n}\n\nexport interface Motion {\n  position: {\n    x: number;\n    y: number;\n  };\n  angle: number;\n}\n\n// https://pdfs.semanticscholar.org/29ae/0bc974737b58afd63b6edb8d0837a3383321.pdf\nexport class TrackedVehicleKinematics {\n  constructor(private readonly options: TrackedVehicleOptions) {}\n\n  static isSpeedDifferent(a: MotorValue, b: MotorValue, threshold = 0) {\n    const leftDifference = Math.abs(a.left - b.left);\n    const rightDifference = Math.abs(a.right - b.right);\n\n    const isLeftDifferent = leftDifference <= threshold;\n    const isRightDifferent = rightDifference <= threshold;\n\n    return !isLeftDifferent && !isRightDifferent;\n  }\n\n  static getLimitedSpeed(speed: MotorValue, maxSpeed: number): MotorValue {\n    const maxRequestedSpeedMagnitude = Math.max(\n      Math.abs(speed.left),\n      Math.abs(speed.right)\n    );\n    const normalizationFactor = Math.min(\n      maxSpeed / maxRequestedSpeedMagnitude,\n      1.0\n    );\n\n    // console.log(\"normalize\", {\n    //   maxRequestedSpeedMagnitude,\n    //   normalizationFactor,\n    //   speeds,\n    //   maxSpeed,\n    // });\n\n    return {\n      left: speed.left * normalizationFactor,\n      right: speed.right * normalizationFactor,\n    };\n  }\n\n  getSpeedEncoderCount(speedMetersPerSecond: number) {\n    const circumference = this.options.wheelDiameter * Math.PI;\n    const gearedEncoderCountsPerRevolution =\n      this.options.encoderCountsPerRotation * this.options.gearboxRatio;\n    const rotationsPerSecond = speedMetersPerSecond / circumference;\n    const targetEncoderCountPerSecond =\n      rotationsPerSecond * gearedEncoderCountsPerRevolution;\n\n    return Math.floor(targetEncoderCountPerSecond);\n  }\n\n  getEncoderCountSpeed(encoderCountsPerSecond: number) {\n    const circumference = this.options.wheelDiameter * Math.PI;\n    const gearedEncoderCountsPerRevolution =\n      this.options.encoderCountsPerRotation * this.options.gearboxRatio;\n\n    const revolutionsPerSecond =\n      encoderCountsPerSecond / gearedEncoderCountsPerRevolution;\n    const speed = revolutionsPerSecond / circumference;\n\n    return speed;\n  }\n\n  motorToEncoderSpeed(motorSpeed: MotorValue): MotorValue {\n    return {\n      left: this.getSpeedEncoderCount(motorSpeed.left),\n      right: this.getSpeedEncoderCount(motorSpeed.right),\n    };\n  }\n\n  encoderToMotorSpeed(encoderSpeed: MotorValue): MotorValue {\n    return {\n      left: this.getEncoderCountSpeed(encoderSpeed.left),\n      right: this.getEncoderCountSpeed(encoderSpeed.right),\n    };\n  }\n\n  motionToSpeed(speed: number, omega: number): MotorValue {\n    // TODO: calculate actual kinematics\n    const speeds: MotorValue = {\n      left: speed + omega,\n      right: speed - omega,\n    };\n\n    return TrackedVehicleKinematics.getLimitedSpeed(\n      speeds,\n      this.options.maxSpeed\n    );\n  }\n\n  speedToMotion(encoderSpeed: MotorValue): Motion {\n    // TODO: convert encoder speeds to track speeds in meters per second\n    // const motorSpeed = this.encoderToMotorSpeed(encoderSpeed);\n\n    return {\n      position: {\n        x: 0,\n        y: 0,\n      },\n      angle: 0,\n    };\n  }\n}\n","import { Coordinates, Layer } from \"../lib/visualizer\";\n\nexport function drawRobot({\n  center,\n  angle,\n  layer,\n}: {\n  center: Coordinates;\n  angle: number;\n  layer: Layer;\n}) {\n  layer.drawObject({\n    center,\n    angle,\n    size: { x: 0.123, y: 0.195 },\n    // TODO: draw more detailed robot including tracks, lidar scan line etc\n    // draw: (ctx, { size }) => {\n    //   const screenSize = layer.worldToScreen(size);\n    //   const arrowScale = 0.5;\n\n    //   // draw body\n    //   ctx.fillStyle = \"#000\";\n    //   ctx.fillRect(-screenSize.x / 2, -screenSize.y / 2, screenSize.x, screenSize.y);\n\n    //   // draw direction arrow\n    //   ctx.fillStyle = \"#FFF\";\n    //   ctx.beginPath();\n    //   ctx.moveTo((-screenSize.x / 2) * arrowScale, (-screenSize.y / 2) * arrowScale);\n    //   ctx.lineTo(0, (screenSize.y / 2) * arrowScale);\n    //   ctx.lineTo((screenSize.x / 2) * arrowScale, (-screenSize.y / 2) * arrowScale);\n    //   ctx.lineTo((-screenSize.x / 2) * arrowScale, (-screenSize.y / 2) * arrowScale);\n    //   ctx.fill();\n    // },\n  });\n}\n","export function map(\n  x: number,\n  inMin: number,\n  inMax: number,\n  outMin: number,\n  outMax: number,\n  capped = true\n) {\n  const uncapped = ((x - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n\n  if (!capped) {\n    return uncapped;\n  }\n\n  const min = Math.min(outMin, outMax);\n  const max = Math.max(outMin, outMax);\n\n  return Math.min(Math.max(uncapped, min), max);\n}\n","import color from \"color\";\nimport Vector from \"victor\";\n\nimport { map } from \"../../services/map\";\nimport { Ticker, TickInfo } from \"../ticker\";\n\nexport interface LayerOptions {\n  readonly defaultStyle?: DrawStyle;\n  getTransform?(layer: Layer): Transform;\n  render?(info: FrameInfo): void;\n  onMouseDownEvent?(event: LayerMouseDownEvent): void;\n  onMouseUpEvent?(event: LayerMouseUpEvent): void;\n  onMouseMoveEvent?(event: LayerMouseMoveEvent): void;\n}\n\nexport interface Transform {\n  horizontalScaling?: number;\n  verticalSkewing?: number;\n  horizontalSkewing?: number;\n  verticalScaling?: number;\n  horizontalTranslation?: number;\n  verticalTranslation?: number;\n  rotation?: number;\n  scale?: number;\n}\n\nexport interface FrameInfo {\n  time: number;\n  dt: number;\n  frame: number;\n  layer: Layer;\n}\n\nexport type LayerMouseEventType = \"down\" | \"up\" | \"move\";\n\nexport interface LayerMouseEvent {\n  type: LayerMouseEventType;\n  screen: CartesianCoordinates;\n  world: CartesianCoordinates;\n  isMouseDown: boolean;\n  event: MouseEvent;\n}\n\nexport interface LayerMouseDownEvent extends LayerMouseEvent {\n  type: \"down\";\n}\n\nexport interface LayerMouseUpEvent extends LayerMouseEvent {\n  type: \"up\";\n}\n\nexport interface LayerMouseMoveEvent extends LayerMouseEvent {\n  type: \"move\";\n}\n\nexport interface CartesianCoordinates {\n  x: number;\n  y: number;\n}\n\nexport type Size = CartesianCoordinates;\n\nexport interface PolarCoordinates {\n  angle: number; // radians\n  distance: number;\n}\n\nexport type Coordinates = CartesianCoordinates | PolarCoordinates;\n\nexport type ColorStyle = string | CanvasGradient | CanvasPattern;\n\nexport interface DrawStyle {\n  color?: ColorStyle;\n  fillStyle?: ColorStyle;\n  strokeStyle?: ColorStyle;\n  lineWidth?: number;\n  font?: string;\n  textAlign?: CanvasTextAlign;\n  textBaseline?: CanvasTextBaseline;\n}\n\nexport interface DrawCircleOptions {\n  center?: Coordinates;\n  radius: number;\n}\n\nexport interface DrawPulseOptions {\n  center?: Coordinates;\n  lifetime?: number;\n  age?: number;\n  size?: number;\n}\n\nexport interface DrawMarkerOptions {\n  center: Coordinates;\n  size?: number;\n}\n\nexport interface DrawBoxOptions {\n  origin: Coordinates;\n  width: number;\n  height: number;\n  padding?: number;\n  centered?: boolean;\n}\n\n// TODO: support center, angle, length\nexport interface DrawLineOptions {\n  from: Coordinates;\n  to: Coordinates;\n}\n\nexport interface DrawTextOptions {\n  origin: Coordinates;\n  text: string;\n  offset?: CartesianCoordinates;\n}\n\nexport interface DrawArrowOptions extends DrawLineOptions {\n  tipSize?: number;\n  name?: string;\n}\n\nexport interface DrawDirectionOptions {\n  center: Coordinates;\n  angle: number;\n  size?: number;\n  name?: string;\n}\n\nexport interface DrawGridOptions {\n  cellWidth: number;\n  cellHeight: number;\n  rows?: number;\n  columns?: number;\n  origin?: Coordinates;\n  centered?: boolean;\n}\n\nexport interface DrawOccupancyGridOptions {\n  cellWidth: number;\n  cellHeight: number;\n  grid: OccupancyGrid;\n  path?: Path;\n  origin?: Coordinates;\n  centered?: boolean;\n}\n\nexport interface DrawCoordinateSystemOptions {\n  center?: Coordinates;\n  gridSize?: number;\n  length?: number;\n}\n\nexport interface DrawObjectOptions {\n  center: Coordinates;\n  size: Size;\n  angle: number;\n  draw?(\n    ctx: CanvasRenderingContext2D,\n    options: Required<DrawObjectOptions> & { layer: Layer }\n  ): void;\n}\n\nexport interface DrawGraphOptions {\n  origin: Coordinates;\n  name: string;\n  values: number[];\n  min?: number;\n  max?: number;\n  width?: number;\n  height?: number;\n}\n\nexport type OccupancyGrid = number[][];\n\nexport type Cell = [number, number];\n\nexport type Path = Cell[];\n\nexport class Layer {\n  readonly options: Required<LayerOptions>;\n  readonly ctx: CanvasRenderingContext2D;\n  readonly width: number;\n  readonly height: number;\n  readonly size: number;\n  readonly transform: Required<Transform>;\n  private ticker: Ticker;\n  private mouseDownCounter = 0;\n\n  constructor(readonly canvas: HTMLCanvasElement, options: LayerOptions) {\n    this.options = {\n      defaultStyle: {\n        fillStyle: \"#000\",\n        strokeStyle: \"#000\",\n        font: \"16px monospace\",\n        textBaseline: \"top\",\n      },\n      getTransform: (_layer: Layer) => ({}),\n      render: (_info: FrameInfo) => {\n        /* do nothing */\n      },\n      onMouseDownEvent: (_event: LayerMouseDownEvent) => {\n        /* do nothing */\n      },\n      onMouseUpEvent: (_event: LayerMouseUpEvent) => {\n        /* do nothing */\n      },\n      onMouseMoveEvent: (_event: LayerMouseMoveEvent) => {\n        /* do nothing */\n      },\n      ...options,\n    };\n\n    // get canvas drawing context\n    const ctx = this.canvas.getContext(\"2d\");\n\n    // this should generally not fail\n    if (!ctx) {\n      throw new Error(\n        \"Getting layer 2D context failed, this should not happen\"\n      );\n    }\n\n    // store context\n    this.ctx = ctx;\n\n    // get dimensions\n    this.width = this.canvas.offsetWidth;\n    this.height = this.canvas.offsetHeight;\n\n    // use minimum of width/height as size\n    this.size = Math.min(this.width, this.height) - 2;\n\n    // set fixed canvas dimensions\n    this.canvas.setAttribute(\"width\", `${this.width.toString()}px`);\n    this.canvas.setAttribute(\"height\", `${this.height.toString()}px`);\n\n    // remove style dimension properties\n    this.canvas.style.removeProperty(\"width\");\n    this.canvas.style.removeProperty(\"height\");\n\n    // mouse events should pass through if no listeners were set\n    const passThroughMouseEvents =\n      options.onMouseDownEvent === undefined &&\n      options.onMouseUpEvent === undefined &&\n      options.onMouseMoveEvent === undefined;\n\n    // disable canvas pointer events (pass them through) if no event listeners are present\n    if (passThroughMouseEvents) {\n      this.canvas.style.pointerEvents = \"none\";\n    }\n\n    // resolve transform to use\n    this.transform = {\n      horizontalScaling: 1,\n      verticalSkewing: 0,\n      horizontalSkewing: 0,\n      verticalScaling: 1,\n      horizontalTranslation: 0,\n      verticalTranslation: 0,\n      rotation: 0,\n      scale: 1,\n      ...this.options.getTransform(this),\n    };\n\n    // apply transformation and rotation\n    this.ctx.transform(\n      this.transform.horizontalScaling,\n      this.transform.verticalSkewing,\n      this.transform.horizontalSkewing,\n      this.transform.verticalScaling,\n      this.transform.horizontalTranslation,\n      this.transform.verticalTranslation\n    );\n    this.ctx.rotate(this.transform.rotation);\n\n    // set default styles\n    this.applyStyle(this.options.defaultStyle);\n\n    // only add mouse events if listener is registered\n    if (options.onMouseDownEvent) {\n      this.canvas.onmousedown = (event) => this.handleMouseEvent(\"down\", event);\n    }\n\n    if (options.onMouseUpEvent) {\n      this.canvas.onmouseup = (event) => this.handleMouseEvent(\"up\", event);\n    }\n\n    if (options.onMouseMoveEvent) {\n      this.canvas.onmousemove = (event) => this.handleMouseEvent(\"move\", event);\n    }\n\n    // setup ticker\n    this.ticker = new Ticker({\n      tick: this.tick.bind(this),\n    });\n  }\n\n  start() {\n    this.ticker.start();\n  }\n\n  stop() {\n    this.ticker.stop();\n  }\n\n  drawCircle(\n    options: DrawCircleOptions,\n    style: DrawStyle = { strokeStyle: \"#000\" }\n  ) {\n    const opt: Required<DrawCircleOptions> = {\n      center: { x: 0, y: 0 },\n      ...options,\n    };\n    const screenCenter = this.worldToScreen(opt.center);\n\n    this.ctx.save();\n    this.applyStyle(style);\n\n    this.ctx.beginPath();\n    this.ctx.arc(\n      screenCenter.x,\n      screenCenter.y,\n      this.scale(opt.radius),\n      0,\n      Math.PI * 2\n    );\n\n    if (style.fillStyle) {\n      this.ctx.fill();\n    }\n\n    if (style.strokeStyle || (!style.strokeStyle && !style.fillStyle)) {\n      this.ctx.stroke();\n    }\n\n    this.ctx.restore();\n  }\n\n  drawPulse(\n    options: DrawPulseOptions,\n    style: DrawStyle = { strokeStyle: \"#000\" }\n  ) {\n    const opt: Required<DrawPulseOptions> = {\n      center: { x: 0, y: 0 },\n      lifetime: 300,\n      age: 0,\n      size: this.size / 50 / this.getScale(),\n      ...options,\n    };\n\n    // don't draw dead pulses\n    if (opt.age > opt.lifetime) {\n      return;\n    }\n\n    const opacity = map(opt.age, 0, opt.lifetime, 1, 0);\n    const fillStyle = color(style.fillStyle || \"#F00\")\n      .alpha(opacity)\n      .toString();\n\n    this.drawCircle(\n      {\n        center: opt.center,\n        radius: map(opt.age, 0, opt.lifetime, opt.size / 10, opt.size),\n      },\n      {\n        fillStyle,\n      }\n    );\n  }\n\n  drawMarker(options: DrawMarkerOptions, style: DrawStyle = {}) {\n    const opt: Required<DrawMarkerOptions> = {\n      size: this.size / 100 / this.getScale(),\n      ...options,\n    };\n    const angle = this.isPolar(opt.center) ? opt.center.angle : 0;\n    const screenCenter = this.worldToScreen(opt.center);\n    const screenSize = this.scale(opt.size);\n\n    this.ctx.save();\n    this.applyStyle(style);\n\n    this.ctx.translate(screenCenter.x, screenCenter.y);\n    this.ctx.rotate(angle);\n    this.ctx.fillRect(-screenSize / 2, -screenSize / 2, screenSize, screenSize);\n\n    this.ctx.restore();\n  }\n\n  drawBox(options: DrawBoxOptions, style: DrawStyle = {}) {\n    const opt: Required<DrawBoxOptions> = {\n      padding: 0,\n      centered: false,\n      ...options,\n    };\n\n    const origin = this.worldToScreen(opt.origin);\n    const width = this.scale(opt.width);\n    const height = this.scale(opt.height);\n\n    const offset = opt.centered\n      ? { x: -width / 2, y: -height / 2 }\n      : { x: 0, y: 0 };\n\n    this.ctx.save();\n    this.applyStyle(style);\n\n    if (style.fillStyle) {\n      this.ctx.fillRect(\n        origin.x + offset.x + opt.padding,\n        origin.y + offset.y + opt.padding,\n        width - opt.padding * 2,\n        height - opt.padding * 2\n      );\n    }\n\n    if (style.strokeStyle || (!style.strokeStyle && !style.fillStyle)) {\n      this.ctx.strokeRect(\n        origin.x + offset.x + opt.padding,\n        origin.y + offset.y + opt.padding,\n        width - opt.padding * 2,\n        height - opt.padding * 2\n      );\n    }\n\n    this.ctx.restore();\n  }\n\n  drawLine(options: DrawLineOptions, style: DrawStyle = {}) {\n    const opt: Required<DrawLineOptions> = {\n      ...options,\n    };\n    const screenFrom = this.worldToScreen(opt.from);\n    const screenTo = this.worldToScreen(opt.to);\n\n    this.ctx.save();\n    this.applyStyle(style);\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(screenFrom.x, screenFrom.y);\n    this.ctx.lineTo(screenTo.x, screenTo.y);\n    this.ctx.stroke();\n\n    this.ctx.restore();\n  }\n\n  drawGrid(options: DrawGridOptions, style: DrawStyle = {}) {\n    const defaultRowCount = Math.ceil(\n      this.height / this.getScale() / options.cellHeight\n    );\n    const defaultColumnCount = Math.ceil(\n      this.width / this.getScale() / options.cellWidth\n    );\n\n    const opt: Required<DrawGridOptions> = {\n      origin: { x: 0, y: 0 },\n      centered: false,\n      rows: defaultRowCount % 2 === 0 ? defaultRowCount : defaultRowCount + 1,\n      columns:\n        defaultColumnCount % 2 === 0\n          ? defaultColumnCount\n          : defaultColumnCount + 1,\n      ...options,\n    };\n\n    const height = opt.cellHeight * opt.rows;\n    const width = opt.cellWidth * opt.columns;\n\n    const origin = this.toCartesian(opt.origin);\n    const offset: CartesianCoordinates = opt.centered\n      ? { x: -width / 2, y: -height / 2 }\n      : { x: 0, y: 0 };\n\n    for (let row = 0; row <= opt.rows; row++) {\n      const rowY = row * opt.cellHeight;\n\n      this.drawLine(\n        {\n          from: {\n            x: origin.x + offset.x,\n            y: origin.y + offset.y + rowY,\n          },\n          to: {\n            x: origin.x + offset.x + width,\n            y: origin.y + offset.y + rowY,\n          },\n        },\n        style\n      );\n    }\n\n    for (let column = 0; column <= opt.columns; column++) {\n      const columnX = column * opt.cellWidth;\n\n      this.drawLine(\n        {\n          from: {\n            x: origin.x + offset.x + columnX,\n            y: origin.y + offset.y,\n          },\n          to: {\n            x: origin.x + offset.x + columnX,\n            y: origin.y + offset.y + height,\n          },\n        },\n        style\n      );\n    }\n  }\n\n  drawOccupancyGrid(options: DrawOccupancyGridOptions, style: DrawStyle = {}) {\n    const opt: Required<DrawOccupancyGridOptions> = {\n      origin: { x: 0, y: 0 },\n      centered: false,\n      path: [],\n      ...options,\n    };\n\n    // don't attempt to draw an empty map\n    if (opt.grid.length === 0) {\n      return;\n    }\n\n    const rows = opt.grid.length;\n    const columns = opt.grid[0].length;\n\n    const width = opt.cellWidth * columns;\n    const height = opt.cellHeight * rows;\n\n    const origin = this.toCartesian(opt.origin);\n    const offset: CartesianCoordinates = opt.centered\n      ? { x: -width / 2, y: -height / 2 }\n      : { x: 0, y: 0 };\n\n    // draw grid\n    for (let row = 0; row < rows; row++) {\n      for (let column = 0; column < columns; column++) {\n        if (!Array.isArray(opt.grid[row])) {\n          throw new Error(\n            `Expected occupancy map row #${row} to be an array, got ${typeof opt\n              .grid[row]}`\n          );\n        }\n\n        const occupancy = opt.grid[row][column];\n\n        if (typeof occupancy !== \"number\") {\n          throw new Error(\n            `Expected occupancy map row cell ${row}x${column} to be a number, got ${typeof occupancy}`\n          );\n        }\n\n        // don't draw empty or unknown cells\n        if (occupancy <= 0) {\n          continue;\n        }\n\n        const delta = {\n          x: column * opt.cellWidth,\n          y: row * opt.cellHeight,\n        };\n\n        const position = {\n          x: origin.x + offset.x + delta.x,\n          y: origin.y + offset.y + delta.y,\n        };\n\n        this.drawBox(\n          {\n            origin: position,\n            width: opt.cellWidth,\n            height: opt.cellHeight,\n            padding: 1,\n          },\n          { fillStyle: `rgba(0, 0, 0, ${occupancy})` }\n        );\n      }\n    }\n\n    // draw path\n    for (const [column, row] of opt.path) {\n      const delta = {\n        x: column * opt.cellWidth,\n        y: row * opt.cellHeight,\n      };\n\n      const position = {\n        x: origin.x + offset.x + delta.x,\n        y: origin.y + offset.x + delta.y,\n      };\n\n      this.drawBox(\n        {\n          origin: position,\n          width: opt.cellWidth,\n          height: opt.cellHeight,\n          padding: 1,\n        },\n        { fillStyle: \"rgba(0, 255, 0, 0.2)\" }\n      );\n    }\n  }\n\n  drawArrow(options: DrawArrowOptions, style: DrawStyle = {}) {\n    const opt: Required<DrawArrowOptions> = {\n      tipSize: this.size / 100 / this.getScale(),\n      name: \"\",\n      ...options,\n    };\n\n    this.drawLine({ ...opt }, style);\n\n    const screenFrom = this.worldToScreen(opt.from);\n    const screenTo = this.worldToScreen(opt.to);\n    const directionVector = Vector.fromObject(screenTo).subtract(\n      Vector.fromObject(screenFrom)\n    );\n    const angle = directionVector.angle();\n\n    this.drawDirection(\n      {\n        ...opt,\n        center: opt.to,\n        angle,\n        size: opt.tipSize,\n      },\n      style\n    );\n  }\n\n  drawDirection(options: DrawDirectionOptions, style: DrawStyle = {}) {\n    const opt: Required<DrawDirectionOptions> = {\n      size: this.size / 100 / this.getScale(),\n      name: \"\",\n      ...options,\n    };\n\n    const screenCenter = this.worldToScreen(opt.center);\n    const screenSize = this.scale(opt.size);\n\n    this.ctx.save();\n    this.applyStyle(style);\n\n    this.ctx.translate(screenCenter.x, screenCenter.y);\n    this.ctx.rotate(opt.angle);\n    this.ctx.beginPath();\n    this.ctx.moveTo(-screenSize / 2, screenSize / 2);\n    this.ctx.lineTo(-screenSize / 2, -screenSize / 2);\n    this.ctx.lineTo(0, 0);\n    this.ctx.lineTo(-screenSize / 2, screenSize / 2);\n    this.ctx.fill();\n\n    this.ctx.restore();\n\n    if (opt.name.length > 0) {\n      const origin = this.toCartesian(opt.center);\n      origin.x += opt.size * 2;\n\n      this.drawText({ origin, text: opt.name }, style);\n    }\n  }\n\n  drawText(options: DrawTextOptions, style: DrawStyle = {}) {\n    const opt: Required<DrawTextOptions> = {\n      offset: { x: 0, y: 0 },\n      ...options,\n    };\n\n    const screenOrigin = this.worldToScreen(opt.origin);\n\n    this.ctx.save();\n    this.applyStyle(style);\n\n    this.ctx.translate(screenOrigin.x, screenOrigin.y);\n\n    // roll back transforms to get the text to draw correctly\n    this.ctx.rotate(-this.transform.rotation);\n    this.ctx.scale(\n      this.transform.horizontalScaling,\n      this.transform.verticalScaling\n    );\n\n    this.ctx.fillText(opt.text, opt.offset.x, opt.offset.y);\n    this.ctx.restore();\n  }\n\n  drawCoordinateSystem(options: DrawCoordinateSystemOptions = {}) {\n    const worldSize = this.screenToWorld({ x: this.width, y: this.height });\n    const gridSize =\n      options.gridSize !== undefined\n        ? options.gridSize\n        : this.size / 50 / this.getScale();\n    const length = gridSize * 2;\n    const opt: Required<DrawCoordinateSystemOptions> = {\n      center: {\n        x: -Math.ceil(worldSize.y / 2 / gridSize) * gridSize + length,\n        y: -Math.ceil(worldSize.x / 2 / gridSize) * gridSize + length,\n      },\n      gridSize,\n      length,\n      ...options,\n    };\n    const center = Vector.fromObject(this.toCartesian(opt.center));\n\n    const toX = center.clone().add(new Vector(opt.length, 0));\n    const toY = center.clone().add(new Vector(0, opt.length));\n\n    this.drawArrow(\n      { from: opt.center, to: toX, name: \"X\" },\n      { lineWidth: 2, color: \"#F00\", textAlign: \"center\" }\n    );\n    this.drawArrow(\n      { from: opt.center, to: toY, name: \"Y\" },\n      { lineWidth: 2, color: \"#0F0\", textAlign: \"center\" }\n    );\n  }\n\n  drawGraph(options: DrawGraphOptions) {\n    const opt = {\n      width: 200,\n      height: 80,\n      ...options,\n    };\n\n    const screenOrigin = this.worldToScreen(opt.origin);\n    const startIndex = Math.max(opt.values.length - opt.width, 0);\n    const samples = opt.values.slice(startIndex, opt.values.length);\n    const min = options.min !== undefined ? options.min : Math.min(...samples);\n    const max = options.max !== undefined ? options.max : Math.max(...samples);\n    const range = max - min;\n\n    this.ctx.save();\n    this.ctx.translate(screenOrigin.x, screenOrigin.y);\n\n    // draw background\n    this.ctx.fillStyle = \"rgba(0, 0, 0, 0.1)\";\n    this.ctx.fillRect(0, 0, opt.width, opt.height);\n\n    let xPos = opt.width;\n\n    // draw line\n    this.ctx.beginPath();\n\n    let wasAnyValueCapped = false;\n\n    // build the line path\n    for (let i = samples.length; i >= 0; i--) {\n      const value = samples[i];\n      const cappedValue = Math.min(Math.max(value, min), max);\n      const isCapped = Math.abs(cappedValue - value) > 0.1;\n      const yPos =\n        opt.height - Math.round(((cappedValue - min) / range) * opt.height);\n\n      if (i === 0) {\n        this.ctx.moveTo(xPos, yPos);\n      } else {\n        this.ctx.lineTo(xPos, yPos);\n      }\n\n      xPos--;\n\n      if (isCapped) {\n        wasAnyValueCapped = true;\n      }\n    }\n\n    // draw red when any of the values were capped to min/max\n    this.ctx.strokeStyle = wasAnyValueCapped\n      ? \"rgba(200, 0, 0, 0.75)\"\n      : \"rgba(0, 200, 0, 0.75)\";\n\n    // draw graph line and restore\n    this.ctx.stroke();\n    this.ctx.restore();\n\n    // draw name on top of the graph\n    this.drawText(\n      {\n        origin: options.origin,\n        text: options.name,\n        offset: {\n          x: 10,\n          y: 10,\n        },\n      },\n      {\n        fillStyle: \"#FFF\",\n      }\n    );\n  }\n\n  drawObject(options: DrawObjectOptions) {\n    const opt: Required<DrawObjectOptions> = {\n      ...options,\n      size: {\n        x: this.size / 50 / this.getScale(),\n        y: this.size / 50 / this.getScale(),\n      },\n      draw: (ctx, { size }) => {\n        const screenSize = this.worldToScreen(size);\n\n        // draw body\n        ctx.fillStyle = \"#900\";\n        ctx.fillRect(\n          -screenSize.x / 2,\n          -screenSize.y / 2,\n          screenSize.x,\n          screenSize.y\n        );\n\n        // draw direction arrow\n        const arrowScale = 0.5;\n        const arrowSize = Math.min(screenSize.x, screenSize.y) * arrowScale;\n\n        ctx.fillStyle = \"#FFF\";\n        ctx.beginPath();\n        ctx.moveTo(-arrowSize / 2, -arrowSize / 2);\n        ctx.lineTo(0, arrowSize / 2);\n        ctx.lineTo(arrowSize / 2, -arrowSize / 2);\n        ctx.lineTo(-arrowSize / 2, -arrowSize / 2);\n        ctx.fill();\n      },\n    };\n    const screenCenter = this.worldToScreen(opt.center);\n\n    this.ctx.save();\n\n    this.ctx.translate(screenCenter.x, screenCenter.y);\n    this.ctx.rotate(opt.angle);\n\n    opt.draw(this.ctx, { ...opt, layer: this });\n\n    this.ctx.restore();\n  }\n\n  polarToCartesian({\n    angle,\n    distance,\n  }: PolarCoordinates): CartesianCoordinates {\n    return {\n      x: distance * Math.cos(angle),\n      y: distance * Math.sin(angle),\n    };\n  }\n\n  toCartesian(coordinates: Coordinates): CartesianCoordinates {\n    if (this.isPolar(coordinates)) {\n      const angleCorrection = Math.PI / 2;\n\n      return {\n        x: coordinates.distance * Math.cos(coordinates.angle + angleCorrection),\n        y: coordinates.distance * Math.sin(coordinates.angle + angleCorrection),\n      };\n    }\n\n    // already cartesian\n    return coordinates;\n  }\n\n  worldToScreen(world: Coordinates): CartesianCoordinates {\n    const { x, y } = this.toCartesian(world);\n\n    return {\n      x: this.scale(x),\n      y: this.scale(y),\n    };\n  }\n\n  screenToWorld(screen: Coordinates): CartesianCoordinates {\n    const { x, y } = this.toCartesian(screen);\n    const scale = this.getScale();\n\n    return {\n      x: x / scale,\n      y: y / scale,\n    };\n  }\n\n  canvasToScreen(canvas: CartesianCoordinates) {\n    const origin = Vector.fromObject(this.getScreenOrigin());\n    const screen = Vector.fromObject(canvas)\n      .subtract(origin)\n      .rotate(this.transform.rotation)\n      .multiply(\n        new Vector(\n          this.transform.horizontalScaling,\n          this.transform.verticalScaling\n        )\n      );\n\n    return {\n      x: screen.x,\n      y: screen.y,\n    };\n  }\n\n  isPolar(coordinates: any): coordinates is PolarCoordinates {\n    return (\n      typeof coordinates.angle === \"number\" &&\n      typeof coordinates.distance === \"number\"\n    );\n  }\n\n  getScale() {\n    return this.transform.scale;\n  }\n\n  scale(distance: number) {\n    return distance * this.getScale();\n  }\n\n  toRadians(angleDegrees: number) {\n    return angleDegrees * (Math.PI / 180);\n  }\n\n  clear() {\n    this.ctx.save();\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    this.ctx.restore();\n  }\n\n  private applyStyle(options: DrawStyle) {\n    if (options.color) {\n      this.ctx.strokeStyle = options.color;\n      this.ctx.fillStyle = options.color;\n    }\n\n    if (options.strokeStyle) {\n      this.ctx.strokeStyle = options.strokeStyle;\n    }\n\n    if (options.fillStyle) {\n      this.ctx.fillStyle = options.fillStyle;\n    }\n\n    if (options.lineWidth) {\n      this.ctx.lineWidth = options.lineWidth;\n    }\n\n    if (options.font) {\n      this.ctx.font = options.font;\n    }\n\n    if (options.textAlign) {\n      this.ctx.textAlign = options.textAlign;\n    }\n\n    if (options.textBaseline) {\n      this.ctx.textBaseline = options.textBaseline;\n    }\n  }\n\n  // TODO: remove / refactor\n  private getScreenOrigin(): CartesianCoordinates {\n    return {\n      x: this.width / 2,\n      y: this.height / 2,\n    };\n  }\n\n  private tick(info: TickInfo) {\n    this.options.render({\n      ...info,\n      layer: this,\n    });\n  }\n\n  private handleMouseEvent(type: LayerMouseEventType, event: MouseEvent) {\n    const screen = this.canvasToScreen(event);\n    const world = this.screenToWorld(screen);\n\n    const info = {\n      screen,\n      world,\n      isMouseDown: this.mouseDownCounter > 0,\n      event,\n    };\n\n    switch (type) {\n      case \"down\":\n        this.mouseDownCounter++;\n\n        this.options.onMouseDownEvent({ type, ...info });\n        break;\n\n      case \"up\":\n        this.mouseDownCounter--;\n\n        this.options.onMouseUpEvent({ type, ...info });\n        break;\n\n      case \"move\":\n        this.options.onMouseMoveEvent({ type, ...info });\n        break;\n    }\n  }\n}\n","import { Layer, LayerOptions } from \"./Layer\";\n\nexport class Visualizer {\n  readonly layers: Layer[] = [];\n\n  constructor(readonly container: HTMLElement) {}\n\n  createLayer(options: LayerOptions) {\n    // create canvas and add it to DOM\n    const canvas = this.createCanvasElement();\n    this.container.append(canvas);\n\n    // create layer and register it\n    const layer = new Layer(canvas, options);\n\n    this.layers.push(layer);\n\n    return layer;\n  }\n\n  start() {\n    // start rendering all layers\n    for (const layer of this.layers) {\n      layer.start();\n    }\n  }\n\n  stop() {\n    // stop rendering all layers\n    for (const layer of this.layers) {\n      layer.stop();\n    }\n  }\n\n  private createCanvasElement() {\n    const canvas = document.createElement(\"canvas\");\n\n    canvas.style.position = \"absolute\";\n    canvas.style.width = \"100%\";\n    canvas.style.height = \"100%\";\n    canvas.style.left = \"0\";\n    canvas.style.right = \"0\";\n\n    return canvas;\n  }\n}\n","import throttle from \"lodash.throttle\";\nimport { dummyLogger, Logger } from \"ts-log\";\n\nimport { Robot } from \"../robot\";\nimport {\n  MotorValue,\n  TrackedVehicleKinematics,\n  TrackedVehicleOptions,\n} from \"../tracked-vehicle-kinematics\";\n\nexport interface RemoteControllerOptions {\n  robot: Robot;\n  vehicle: TrackedVehicleOptions;\n  log?: Logger;\n}\n\nexport class RemoteController {\n  private readonly options: Required<RemoteControllerOptions>;\n  private readonly kinematics: TrackedVehicleKinematics;\n  private readonly robot: Robot;\n  private readonly scheduleUpdateMotorSpeeds: () => void;\n  private speed = 0;\n  private omega = 0;\n  private lastSentSpeed?: MotorValue;\n\n  constructor(options: RemoteControllerOptions) {\n    this.options = {\n      log: dummyLogger,\n      ...options,\n    };\n    this.robot = this.options.robot;\n    this.kinematics = new TrackedVehicleKinematics(this.options.vehicle);\n\n    this.scheduleUpdateMotorSpeeds = throttle(\n      () => this.updateMotorSpeeds(),\n      this.options.vehicle.speedUpdateInterval\n    );\n  }\n\n  setSpeed(speed: number) {\n    this.speed = speed;\n\n    this.scheduleUpdateMotorSpeeds();\n  }\n\n  setOmega(omega: number) {\n    this.omega = omega;\n\n    this.scheduleUpdateMotorSpeeds();\n  }\n\n  private updateMotorSpeeds() {\n    const motorSpeeds = this.kinematics.motionToSpeed(this.speed, this.omega);\n    const encoderSpeeds = this.kinematics.motorToEncoderSpeed(motorSpeeds);\n\n    // only send the speed if different from last\n    if (\n      !this.lastSentSpeed ||\n      TrackedVehicleKinematics.isSpeedDifferent(\n        encoderSpeeds,\n        this.lastSentSpeed\n      )\n    ) {\n      this.robot.setSpeed(encoderSpeeds.left, encoderSpeeds.right);\n\n      this.lastSentSpeed = encoderSpeeds;\n    }\n  }\n}\n","import { dummyLogger, Logger } from \"ts-log\";\n\nimport { config } from \"../../config\";\nimport { SerialState, SerialType } from \"../../containers/StatusContainer\";\nimport { Ticker, TickInfo } from \"../ticker\";\nimport { TrackedVehicleKinematics } from \"../tracked-vehicle-kinematics\";\nimport { CartesianCoordinates } from \"../visualizer\";\n\nexport interface SimulatedRobotOptions {\n  readonly log?: Logger;\n}\n\nexport type MessageListenerFn = (message: string) => void;\n\n/*\nMessages to handle:\n1. voltage > [1]\n2. s:M1:M2 > [2]\n3. rpm:RPM > [3]\n4. lidar > [4]\n5. current > [5]\n6. ping > [6]\n7. state > [7.left,7.right,7.start,2,4,1,5,8]\n8. proxy:CMD\n\nMessages to report:\n1. voltage:VOLTAGE\n2. s:M1:M2\n3. rpm:RPM\n4. lidar:RUNNING:VALID:TARGET_RPM:CURRENT_RPM:MOTOR_PWM\n5. current:CURRENT_M1:CURRENT_M2:VALID\n6. pong\n7. button:NAME:STATE\n8: e:M1:M2 (encoder values)\n9. reset\n10: l:ANGLE1:DISTANCE1:QUALITY1:ANGLE2:DISTANCE2:QUALITY2:ANGLE3:DISTANCE3:QUALITY3:ANGLE4:DISTANCE4:QUALITY4\n11: serial:SerialType:SerialState\n*/\n\nexport enum Command {\n  HANDSHAKE = \"!handshake\",\n  VOLTAGE = \"voltage\",\n  SPEED = \"s\",\n  RPM = \"rpm\",\n  CURRENT = \"current\",\n  PING = \"ping\",\n  STATE = \"state\",\n  PROXY = \"proxy\",\n  LIDAR_STATE = \"lidar\",\n  PONG = \"pong\",\n  BUTTON = \"button\",\n  ENCODER = \"e\",\n  RESET = \"reset\",\n  LIDAR_MEASUREMENT = \"l\",\n  SERIAL = \"serial\",\n}\n\nexport interface ButtonStates {\n  readonly left: number;\n  readonly right: number;\n  readonly start: number;\n}\n\nexport interface MotorValue {\n  readonly left: number;\n  readonly right: number;\n}\n\nexport class SimulatedRobot {\n  location: CartesianCoordinates = { x: 0, y: 0 };\n  speed: MotorValue = { left: 0, right: 0 };\n  angle = 0;\n\n  private readonly options: Required<SimulatedRobotOptions>;\n  private readonly log: Logger;\n  private readonly kinematics: TrackedVehicleKinematics;\n  private readonly ticker: Ticker;\n  private readonly messageListeners: MessageListenerFn[] = [];\n  private buttonStates: ButtonStates = { left: 1, right: 1, start: 1 };\n  private current: MotorValue = { left: 0, right: 0 };\n  private encoderValues: MotorValue = { left: 0, right: 0 };\n  private targetSpeed: MotorValue = { left: 0, right: 0 };\n\n  constructor(options: SimulatedRobotOptions) {\n    this.options = {\n      log: dummyLogger,\n      ...options,\n    };\n    this.log = this.options.log;\n\n    // setup kinematics\n    this.kinematics = new TrackedVehicleKinematics(config.vehicle);\n\n    // setup ticker\n    this.ticker = new Ticker({\n      tick: this.tick.bind(this),\n    });\n\n    // TODO: don't run unless simulated transport is used\n    this.ticker.start();\n  }\n\n  addMessageListener(listener: MessageListenerFn) {\n    this.messageListeners.push(listener);\n\n    this.reportVoltage();\n  }\n\n  send(message: string) {\n    // make it async\n    setImmediate(() => {\n      this.messageListeners.forEach((messageListener) =>\n        messageListener(message)\n      );\n    });\n  }\n\n  receive(message: string) {\n    const [command, ...args] = message.split(\":\");\n\n    switch (command) {\n      case Command.HANDSHAKE:\n        this.reportHandshake();\n        break;\n\n      case Command.STATE:\n        this.reportState();\n        break;\n\n      case Command.VOLTAGE:\n        this.reportVoltage();\n        break;\n\n      case Command.SPEED:\n        this.setSpeed({\n          left: parseFloat(args[0]),\n          right: parseFloat(args[1]),\n        });\n        break;\n\n      default:\n        this.log.warn(`missing handler for \"${message}\"`);\n\n        return;\n    }\n\n    this.log.info(`handled command \"${message}\"`);\n  }\n\n  setSpeed(speed: MotorValue) {\n    this.targetSpeed = speed;\n  }\n\n  private tick(info: TickInfo) {\n    this.tickLocation(info);\n  }\n\n  private tickLocation({ dt }: TickInfo) {\n    // TODO: apply realistic acceleration\n    this.speed = this.targetSpeed;\n\n    this.encoderValues = {\n      left: this.speed.left * dt,\n      right: this.speed.right * dt,\n    };\n  }\n\n  private reportHandshake() {\n    // respond to handshake\n    this.send(\"!handshake\");\n\n    // also fake connected USB serial\n    this.send(`serial:${SerialType.USB}:${SerialState.CONNECTED}`);\n\n    // also send initial state\n    // this.reportVoltage();\n  }\n\n  private reportState() {\n    this.reportButtonStates();\n    this.reportTargetSpeed();\n    this.reportLidarState();\n    this.reportVoltage();\n    this.reportCurrent();\n    this.reportEncoderValues();\n  }\n\n  private reportVoltage() {\n    this.send(\"voltage:15.9\");\n  }\n\n  private reportButtonState(button: keyof ButtonStates) {\n    this.send(`button:${button}:${this.buttonStates[button]}`);\n  }\n\n  private reportButtonStates() {\n    this.reportButtonState(\"left\");\n    this.reportButtonState(\"right\");\n    this.reportButtonState(\"start\");\n  }\n\n  private reportTargetSpeed() {\n    this.send(`s:${this.targetSpeed.left}:${this.targetSpeed.right}`);\n  }\n\n  private reportLidarState() {\n    // TODO: report actualy simulated lidar state\n    this.send(\"lidar:0:0:0:0:0\");\n  }\n\n  private reportCurrent() {\n    this.send(`current:${this.current.left}:${this.current.right}`);\n  }\n\n  private reportEncoderValues() {\n    this.send(`e:${this.encoderValues.left}:${this.encoderValues.right}`);\n  }\n}\n","export enum TransportState {\n  DISCONNECTED = \"DISCONNECTED\",\n  CONNECTING = \"CONNECTING\",\n  RECONNECTING = \"RECONNECTING\",\n  CONNECTED = \"CONNECTED\",\n}\n\nexport interface TransportListener {\n  onStateChanged(\n    transport: Transport,\n    newState: TransportState,\n    previousState: TransportState\n  ): void;\n  onError(transport: Transport, error?: Error): void;\n  onMessageSent(\n    transport: Transport,\n    message: string,\n    wasSentSuccessfully: boolean\n  ): void;\n  onMessageReceived(transport: Transport, message: string): void;\n}\n\nexport interface Transport {\n  getName(): string;\n  isAvailable(): boolean;\n  getState(): TransportState;\n  addListener(listener: TransportListener): void;\n  connect(): Promise<void>;\n  send(message: string): boolean;\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { LidarMeasurement } from \"../containers/MeasurementsContainer\";\nimport { FrameInfo, LayerOptions, Visualizer } from \"../lib/visualizer\";\nimport { drawRobot } from \"../services/drawRobot\";\n\nexport interface LidarMapProps {\n  radius: number;\n  cellSize: number;\n  measurements(): LidarMeasurement[];\n}\n\nexport class LidarMap extends React.Component<LidarMapProps> {\n  private readonly wrapRef = React.createRef<HTMLDivElement>();\n  private visualizer: Visualizer | null = null;\n\n  componentDidMount() {\n    // map setup is delayed to allow for it to get correct size\n    setImmediate(() => this.setupMap());\n  }\n\n  componentWillUnmount() {\n    // stop and destroy the visualizer\n    if (this.visualizer !== null) {\n      this.visualizer.stop();\n      this.visualizer = null;\n    }\n  }\n\n  render() {\n    return <Map ref={this.wrapRef} />;\n  }\n\n  private setupMap() {\n    const wrap = this.wrapRef.current;\n\n    if (!wrap) {\n      throw new Error(\"Wrap element was not found, this should not happen\");\n    }\n\n    // setup visualizer\n    this.visualizer = new Visualizer(wrap);\n\n    // common map layer options\n    const mapLayerOptions: LayerOptions = {\n      getTransform: (layer) => {\n        const screenOrigin = {\n          x: layer.width / 2,\n          y: layer.height / 2,\n        };\n        const rotation = -Math.PI / 2;\n        const scale =\n          layer.size / 2 / (this.props.radius + this.props.cellSize);\n\n        return {\n          horizontalScaling: -1,\n          verticalSkewing: 0,\n          horizontalSkewing: 0,\n          verticalScaling: 1,\n          horizontalTranslation: screenOrigin.x,\n          verticalTranslation: screenOrigin.y,\n          rotation,\n          scale,\n        };\n      },\n    };\n\n    this.visualizer.createLayer({\n      ...mapLayerOptions,\n      render: this.renderBackground.bind(this),\n    });\n\n    this.visualizer.createLayer({\n      ...mapLayerOptions,\n      render: this.renderMap.bind(this),\n    });\n\n    // start rendering\n    this.visualizer.start();\n  }\n\n  private renderBackground({ layer, frame }: FrameInfo) {\n    // only draw the first frame\n    if (frame > 0) {\n      return;\n    }\n\n    const gridSize = (this.props.radius * 2) / this.props.cellSize;\n    const circleStep = this.props.radius / 4;\n\n    // draw full size background grid\n    layer.drawGrid(\n      {\n        cellWidth: this.props.cellSize,\n        cellHeight: this.props.cellSize,\n        columns:\n          2 *\n          Math.ceil(layer.height / layer.getScale() / this.props.cellSize / 2),\n        rows:\n          2 *\n          Math.ceil(layer.width / layer.getScale() / this.props.cellSize / 2),\n        centered: true,\n      },\n      { strokeStyle: \"#222\" }\n    );\n\n    // draw map sized active grid\n    layer.drawGrid(\n      {\n        rows: gridSize,\n        columns: gridSize,\n        cellWidth: this.props.cellSize,\n        cellHeight: this.props.cellSize,\n        centered: true,\n      },\n      { strokeStyle: \"#333\" }\n    );\n\n    // draw radius circles\n    for (\n      let circleRadius = circleStep;\n      circleRadius <= this.props.radius;\n      circleRadius += circleStep\n    ) {\n      layer.drawCircle({ radius: circleRadius }, { strokeStyle: \"#444\" });\n      layer.drawText(\n        {\n          origin: { x: 0, y: circleRadius },\n          text: `${circleRadius.toFixed(2)}m`,\n          offset: { x: 10, y: 0 },\n        },\n        { fillStyle: \"#444\", textBaseline: \"middle\" }\n      );\n    }\n\n    // draw coordinates system\n    layer.drawCoordinateSystem();\n  }\n\n  private renderMap({ layer }: FrameInfo) {\n    // clear map\n    layer.clear();\n\n    // get measurements\n    const measurements = this.props.measurements();\n\n    // render measurements\n    for (const measurement of measurements) {\n      layer.drawMarker(\n        {\n          center: {\n            angle: layer.toRadians(measurement.angle),\n            distance: measurement.distance / 1000,\n          },\n        },\n        {\n          // draw lower quality measurements with lower opacity\n          fillStyle: `rgba(255, 255, 255, ${measurement.quality / 100})`,\n        }\n      );\n    }\n\n    // draw robot\n    // TODO: draw at predicted coordinates / angle\n    drawRobot({\n      center: { x: 0, y: 0 },\n      angle: 0,\n      layer,\n    });\n  }\n}\n\nconst Map = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Simulator } from \"../lib/simulator\";\n\nexport class Simulation extends React.Component {\n  private readonly containerRef = React.createRef<HTMLDivElement>();\n  private simulator: Simulator | null = null;\n\n  componentDidMount() {\n    // setup is delayed to allow for it to get correct size\n    setImmediate(() => this.setup());\n  }\n\n  componentWillUnmount() {\n    if (this.simulator !== null) {\n      this.simulator.stop();\n      this.simulator = null;\n    }\n  }\n\n  render() {\n    return <Map ref={this.containerRef} />;\n  }\n\n  private setup() {\n    const container = this.containerRef.current;\n\n    if (!container) {\n      throw new Error(\"Wrap element was not found, this should not happen\");\n    }\n\n    this.simulator = new Simulator({\n      container,\n      radius: 4,\n      cellSize: 0.1,\n      pathPlanningIntervalMs: 100,\n    });\n\n    this.simulator.start();\n  }\n}\n\nconst Map = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n`;\n","import { Robot } from \"../lib/robot\";\n\nimport { multiTransport } from \"./multiTransport\";\n\nexport const robot = new Robot(multiTransport);\n","import { Transport } from \"../transport/Transport\";\n\nexport interface RobotConfig {\n  targetLidarRpm?: number;\n}\n\nexport type SendArgument = string | number;\n\nexport class Robot {\n  pingSentTime?: number;\n\n  private readonly config: Required<RobotConfig>;\n\n  constructor(private readonly transport: Transport, config: RobotConfig = {}) {\n    this.config = {\n      targetLidarRpm: 300,\n      ...config,\n    };\n  }\n\n  requestVoltage() {\n    this.send(\"voltage\");\n  }\n\n  requestState() {\n    this.send(\"state\");\n  }\n\n  setSpeed(left: number, right: number) {\n    this.send(\"s\", left, right);\n  }\n\n  ping(transportOnly = false) {\n    this.pingSentTime = Date.now();\n\n    if (transportOnly) {\n      // send internal ping command if testing the transport only (Android responds to this)\n      this.send(\"!ping\");\n    } else {\n      // send full ping, responded by the MCU\n      this.send(\"ping\");\n    }\n  }\n\n  startLidar(): void {\n    this.send(`rpm:${this.config.targetLidarRpm}`);\n  }\n\n  stopLidar(): void {\n    this.send(\"rpm:0\");\n  }\n\n  // don't use directly, add new robot method\n  private send(command: string, ...args: SendArgument[]) {\n    const message = `${command}${args.length > 0 ? \":\" : \"\"}${args.join(\":\")}`;\n\n    this.transport.send(message);\n  }\n}\n"],"sourceRoot":""}