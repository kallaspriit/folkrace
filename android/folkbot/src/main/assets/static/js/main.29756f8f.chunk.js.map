{"version":3,"sources":["containers/ButtonContainer.ts","containers/LogContainer.ts","containers/LidarContainer.ts","lib/transport/Transport.ts","containers/StatusContainer.ts","containers/MeasurementsContainer.ts","containers/OdometryContainer.ts","containers/RobotContainer.ts","config.ts","lib/robot/index.ts","lib/transport/MultiTransport.ts","services/nativeTransport.ts","lib/transport/NativeTransport.ts","services/websocketTransport.ts","lib/transport/WebsocketTransport.ts","services/multiTransport.ts","services/robot.ts","handlers/handleSerialCommand.ts","handlers/index.ts","handlers/handleIpCommand.ts","handlers/handleUsbCommand.ts","handlers/handleGetVoltageCommand.ts","handlers/handleButtonCommand.ts","handlers/handleResetCommand.ts","handlers/handleCurrentCommand.ts","handlers/handleLidarCommand.ts","handlers/handlePongCommand.ts","handlers/handleEncoderCommand.ts","handlers/handleBeaconCommand.ts","handlers/handleMeasurementCommand.ts","handlers/handleSpeedCommand.ts","services/log.ts","components/Hub.tsx","styled.ts","components/Icon.tsx","components/Text.tsx","components/MainMenu.tsx","components/View.tsx","components/Grid.tsx","views/BotView.tsx","views/MapView.tsx","components/Joystick.tsx","lib/tracked-vehicle-kinematics/index.ts","lib/remote-controller/index.ts","views/RemoteView.tsx","views/SettingsView.tsx","components/BatteryStatus.tsx","services/assertUnreachable.ts","services/pad.ts","components/AutoScroll.tsx","components/Log.tsx","services/formatTime.ts","components/TransportStatus.tsx","components/UsbStatus.tsx","views/StatusView.tsx","App.tsx","index.tsx"],"names":["Button","ButtonState","MessageType","ButtonContainer","_Container","_getPrototypeOf2","_this$state","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","defineProperty","START","UNKNOWN","LEFT","RIGHT","inherits","createClass","key","value","button","setState","Container","LidarContainer","isStarted","isValid","targetRpm","currentRpm","motorPwm","objectSpread","TransportState","SerialType","SerialState","BatteryState","LogContainer","entries","lastId","message","_this2","avoidDuplicate","undefined","previousState","lastEntry","type","resolveMessageType","toConsumableArray","slice","id","toString","time","Date","count","shift","catch","error","console","substr","RX","TX","ERROR","INFO","MeasurementsContainer","measurements","measurement","OdometryContainer","left","right","RobotContainer","targetSpeed","current","config","webSocket","host","localStorage","webSocketHost","port","webSocketPort","parseInt","useSSL","reconnectInterval","rules","battery","low","critical","vehicle","trackWidth","maxSpeed","wheelDiameter","encoderCountsPerRotation","gearboxRatio","speedUpdateInterval","StatusContainer","serials","BLUETOOTH","DISCONNECTED","deviceName","USB","transportState","typeKey","keys","find","typeName","update","$merge","newState","batteryVoltage","remoteIp","loopFrequency","loopTimeUs","lastBeaconTime","lastResetTime","map","serialName","serial","CONNECTED","get","voltage","CRITICAL","LOW","FULL","Robot","transport","send","transportOnly","pingSentTime","now","command","join","MultiTransport","options","listeners","transports","log","dummyLogger","activeTransport","getActiveTransport","getName","getAvailableTransport","getState","listener","push","_connect","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","forEach","connect","stop","connectedTransport","getConnectedTransport","warn","onMessageSent","addListener","onStateChanged","eventTransport","onError","wasSentSuccessfully","onMessageReceived","isAvailable","nativeTransport","NativeTransport","bridgeExists","window","native","CONNECTING","info","abrupt","app","receive","_this3","_this4","websocketTransport","WebsocketTransport","wasConnected","WebSocket","url","RECONNECTING","ws","onopen","event","onclose","logDetails","code","reason","wasClean","setTimeout","onerror","_event","onmessage","data","multiTransport","addTransport","robot","_ref","status","serialType","serialState","serialDeviceName","connectedSerial","setSerialState","getConnectedSerial","requestState","setBatteryVoltage","commandHandlers","_x","_x2","_handleSerialCommand","ip","setOffline","setRemoteIp","usb","_containerMap","vendorId","productId","productName","parseFloat","name","PRESSED","RELEASED","setButtonState","toUpperCase","reset","_args","setResetReceived","setCurrent","lidar","pong","pingTimeTaken","addEntry","e","odometry","b","durationMs","cycleCount","setLoopStatistics","m","add","angle","distance","quality","date","s","setTargetSpeed","logListeners","Hub","_React$Component","isInitialized","react","unstated_es","to","setTransportState","_previousState","_transport","_message$split","split","slicedToArray","includes","containers","handleTransportMessage","_message$split3","_message$split4","toArray","indexOf","handler","handleCommand","React","theme","text","primary","secondary","bg","tertiary","lighten","quaternary","good","bad","size","darkerLighterPercentage","gridGap","menuHeight","animation","fadeIn","keyframes","_templateObject","pulse","color","_templateObject2","styled","baseStyled","GlobalStyle","createGlobalStyle","_templateObject3","Icon","i","Icon_templateObject","props","width","height","StatusIcon","Icon_Icon","assign","MapIcon","BotIcon","RemoteIcon","SettingsIcon","BluetoothIcon","SerialIcon","WebsocketIcon","NativeIcon","BatteryIcon","Text","div","Text_templateObject","Wrap","MainMenu_templateObject","Items","ul","MainMenu_templateObject2","Item","li","MainMenu_templateObject3","Link","NavLink","_templateObject4","darken","Label","_templateObject5","MainMenu","activeClassName","Icon_StatusIcon","Icon_MapIcon","Icon_BotIcon","Icon_RemoteIcon","Icon_SettingsIcon","GridItemStatus","View","View_templateObject","grid","BotView","MapView","Grid","Grid_templateObject","gridItemStatusColorMap","_gridItemStatusColorM","GOOD","WARN","BAD","GridItem","Grid_templateObject2","css","Grid_templateObject3","Grid_templateObject4","Grid_templateObject5","Joystick","ref","el","manager","nipplejs","zone","position","top","mode","lockX","x","lockY","y","onEvent","bind","on","nipple","off","className","TrackedVehicleKinematics","speed","omega","limit","targetEncoderCountPerSecond","Math","PI","floor","speeds","maxRequestedSpeedMagnitude","max","abs","normalizationFactor","min","getSpeedEncoderCount","RemoteController","kinematics","scheduleUpdateMotorSpeeds","throttle","updateMotorSpeeds","motorSpeeds","calculateMotorSpeeds","encoderSpeeds","getEncoderSpeeds","setSpeed","JoystickGrid","RemoteView_templateObject","RemoteView","remoteController","Joystick_Joystick","onJoystickEvent","isMoveEvent","xPos","sin","radian","yPos","cos","setOmega","Error","SettingsView","onClick","location","href","BatteryStatus","statusContainer","batteryState","assertUnreachable","getBatteryStatus","description","toFixed","requestVoltage","Icon_BatteryIcon","pad","padCharacter","str","missingLength","AutoScroll","scrollToBottom","scrollHeight","clientHeight","scrollTop","_this$props","objectWithoutProperties","children","StatusGridItem","Log_templateObject","LogWrap","Log_templateObject2","LogEntry","Log_templateObject3","LogEntryTime","span","Log_templateObject4","logEntryTypeColorMap","_logEntryTypeColorMap","LogEntryMessage","Log_templateObject5","LogEntryCount","_templateObject6","ClearLogButton","_templateObject7","ClearLogIcon","_templateObject8","Log","logContainer","entry","getHours","getMinutes","getSeconds","getMilliseconds","clear","TransportStatus","titleCase","ping","Icon_NativeIcon","Icon_WebsocketIcon","UsbStatus","title","StatusGrid","StatusView_templateObject","StatusView","UsbStatus_UsbStatus","TransportStatus_TransportStatus","BatteryStatus_BatteryStatus","Log_Log","AppWrap","App_templateObject","App","styled_components_browser_esm","Hub_Hub","BrowserRouter","Switch","Route","path","component","exact","Redirect","MainMenu_MainMenu","ReactDOM","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.29756f8f.chunk.js","sourcesContent":["import { Container } from \"unstated\";\r\n\r\nexport enum Button {\r\n  START = \"START\",\r\n  LEFT = \"LEFT\",\r\n  RIGHT = \"RIGHT\"\r\n}\r\n\r\nexport enum ButtonState {\r\n  UNKNOWN = \"UNKNOWN\",\r\n  PRESSED = \"PRESSED\",\r\n  RELEASED = \"RELEASED\"\r\n}\r\n\r\nexport type State = { readonly [key in keyof typeof Button]: ButtonState };\r\n\r\nexport class ButtonContainer extends Container<State> {\r\n  readonly state: State = {\r\n    [Button.START]: ButtonState.UNKNOWN,\r\n    [Button.LEFT]: ButtonState.UNKNOWN,\r\n    [Button.RIGHT]: ButtonState.UNKNOWN\r\n  };\r\n\r\n  setButtonState(button: Button, state: ButtonState) {\r\n    return this.setState({\r\n      [button]: state\r\n    });\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport enum MessageType {\r\n  INFO = \"INFO\",\r\n  ERROR = \"ERROR\",\r\n  RX = \"RX\",\r\n  TX = \"TX\"\r\n}\r\n\r\nexport interface LogEntry {\r\n  readonly id: string;\r\n  readonly time: Date;\r\n  readonly message: string;\r\n  readonly type: MessageType;\r\n  readonly count: number;\r\n}\r\n\r\nexport interface LogState {\r\n  readonly entries: LogEntry[];\r\n}\r\n\r\nexport const MAX_LOG_ENTRY_COUNT = 200;\r\n\r\nexport class LogContainer extends Container<LogState> {\r\n  readonly state: LogState = {\r\n    entries: []\r\n  };\r\n\r\n  private lastId = 0;\r\n\r\n  addEntry(message: string, avoidDuplicate = true) {\r\n    // update state (use the callback syntax not to miss any updates if called in series)\r\n    this.setState(previousState => {\r\n      const lastEntry =\r\n        this.state.entries.length > 0\r\n          ? this.state.entries[this.state.entries.length - 1]\r\n          : null;\r\n      const type = this.resolveMessageType(message);\r\n\r\n      // skip the message if requested not to add the same message twice in a row\r\n      if (lastEntry !== null && avoidDuplicate) {\r\n        // check whether the latest message is the same as last\r\n        if (message === lastEntry.message) {\r\n          const updatedEntries: LogEntry[] = [\r\n            // remove last entry\r\n            ...previousState.entries.slice(0, this.state.entries.length - 1),\r\n            // add it again with updated time\r\n            {\r\n              id: (this.lastId++).toString(),\r\n              time: new Date(),\r\n              message,\r\n              type,\r\n              count: lastEntry.count + 1\r\n            }\r\n          ];\r\n\r\n          return {\r\n            entries: updatedEntries\r\n          };\r\n        }\r\n      }\r\n\r\n      // appends the log entry\r\n      const entries: LogEntry[] = [\r\n        ...previousState.entries,\r\n        {\r\n          id: (this.lastId++).toString(),\r\n          time: new Date(),\r\n          message,\r\n          type,\r\n          count: 1\r\n        }\r\n      ];\r\n\r\n      // limit the number of entries\r\n      while (entries.length > MAX_LOG_ENTRY_COUNT) {\r\n        entries.shift();\r\n      }\r\n\r\n      return {\r\n        entries\r\n      };\r\n    }).catch(error => console.error(error));\r\n  }\r\n\r\n  clear() {\r\n    this.setState({\r\n      entries: []\r\n    }).catch(error => console.error(error));\r\n  }\r\n\r\n  private resolveMessageType(message: string): MessageType {\r\n    const firstCharacter = message.substr(0, 1);\r\n\r\n    switch (firstCharacter) {\r\n      case \"<\":\r\n        return MessageType.RX;\r\n\r\n      case \">\":\r\n        return MessageType.TX;\r\n\r\n      case \"@\":\r\n        return MessageType.ERROR;\r\n\r\n      case \"#\":\r\n        return MessageType.INFO;\r\n\r\n      default:\r\n        return MessageType.INFO;\r\n    }\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface State {\r\n  readonly isStarted: boolean;\r\n  readonly isValid: boolean;\r\n  readonly targetRpm: number;\r\n  readonly currentRpm: number;\r\n  readonly motorPwm: number;\r\n}\r\n\r\nexport class LidarContainer extends Container<State> {\r\n  readonly state: State = {\r\n    isStarted: false,\r\n    isValid: false,\r\n    targetRpm: 0,\r\n    currentRpm: 0,\r\n    motorPwm: 0\r\n  };\r\n\r\n  update(state: State) {\r\n    return this.setState({\r\n      ...state\r\n    });\r\n  }\r\n}\r\n","export enum TransportState {\r\n  DISCONNECTED = \"DISCONNECTED\",\r\n  CONNECTING = \"CONNECTING\",\r\n  RECONNECTING = \"RECONNECTING\",\r\n  CONNECTED = \"CONNECTED\"\r\n}\r\n\r\nexport interface TransportListener {\r\n  onStateChanged(\r\n    transport: Transport,\r\n    newState: TransportState,\r\n    previousState: TransportState\r\n  ): void;\r\n  onError(transport: Transport, error?: Error): void;\r\n  onMessageSent(\r\n    transport: Transport,\r\n    message: string,\r\n    wasSentSuccessfully: boolean\r\n  ): void;\r\n  onMessageReceived(transport: Transport, message: string): void;\r\n}\r\n\r\nexport interface Transport {\r\n  getName(): string;\r\n  isAvailable(): boolean;\r\n  getState(): TransportState;\r\n  addListener(listener: TransportListener): void;\r\n  connect(): Promise<void>;\r\n  send(message: string): boolean;\r\n}\r\n","import update from \"immutability-helper\";\r\nimport { Container } from \"unstated\";\r\n\r\nimport { config } from \"../config\";\r\nimport { TransportState } from \"../lib/transport/Transport\";\r\n\r\nexport enum SerialType {\r\n  USB = \"usb\",\r\n  BLUETOOTH = \"bluetooth\"\r\n}\r\n\r\nexport enum SerialState {\r\n  CONNECTING = \"CONNECTING\",\r\n  CONNECTED = \"CONNECTED\",\r\n  DISCONNECTED = \"DISCONNECTED\",\r\n  NOT_SUPPORTED = \"NOT_SUPPORTED\",\r\n  DEVICE_NOT_FOUND = \"DEVICE_NOT_FOUND\",\r\n  DISABLED = \"DISABLED\"\r\n}\r\n\r\nexport interface Serial {\r\n  readonly type: SerialType;\r\n  readonly state: SerialState;\r\n  readonly deviceName?: string;\r\n}\r\n\r\nexport type SerialsMap = { readonly [type in keyof typeof SerialType]: Serial };\r\n\r\nexport enum BatteryState {\r\n  UNKNOWN = \"UNKNOWN\",\r\n  FULL = \"FULL\",\r\n  LOW = \"LOW\",\r\n  CRITICAL = \"CRITICAL\"\r\n}\r\n\r\nexport interface State {\r\n  readonly transportState: TransportState;\r\n  readonly serials: SerialsMap;\r\n  readonly batteryVoltage?: number;\r\n  readonly remoteIp?: string;\r\n  readonly lastBeaconTime?: Date;\r\n  readonly lastResetTime?: Date;\r\n  readonly loopFrequency?: number;\r\n  readonly loopTimeUs?: number;\r\n}\r\n\r\nexport class StatusContainer extends Container<State> {\r\n  readonly state: State = {\r\n    serials: {\r\n      BLUETOOTH: {\r\n        type: SerialType.BLUETOOTH,\r\n        state: SerialState.DISCONNECTED,\r\n        deviceName: undefined\r\n      },\r\n      USB: {\r\n        type: SerialType.USB,\r\n        state: SerialState.DISCONNECTED,\r\n        deviceName: undefined\r\n      }\r\n    },\r\n    transportState: TransportState.DISCONNECTED\r\n  };\r\n\r\n  setSerialState(type: SerialType, state: SerialState, deviceName?: string) {\r\n    const typeKey = Object.keys(SerialType).find(\r\n      typeName => SerialType[typeName as keyof typeof SerialType] === type\r\n    ) as keyof typeof SerialType;\r\n\r\n    // update serial state\r\n    return this.setState(\r\n      update(this.state, {\r\n        serials: {\r\n          [typeKey]: { $merge: { state, deviceName } }\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  setTransportState(newState: TransportState) {\r\n    return this.setState({\r\n      transportState: newState\r\n    });\r\n  }\r\n\r\n  setBatteryVoltage(batteryVoltage: number | undefined) {\r\n    return this.setState({\r\n      batteryVoltage\r\n    });\r\n  }\r\n\r\n  setRemoteIp(remoteIp: string) {\r\n    return this.setState({\r\n      remoteIp\r\n    });\r\n  }\r\n\r\n  setOffline() {\r\n    return this.setState({\r\n      remoteIp: undefined\r\n    });\r\n  }\r\n\r\n  setLoopStatistics(loopFrequency: number, loopTimeUs: number) {\r\n    return this.setState({\r\n      lastBeaconTime: new Date(),\r\n      loopFrequency,\r\n      loopTimeUs\r\n    });\r\n  }\r\n\r\n  setResetReceived() {\r\n    return this.setState({\r\n      lastResetTime: new Date()\r\n    });\r\n  }\r\n\r\n  getConnectedSerial(): Serial | undefined {\r\n    const serialNames = Object.keys(\r\n      this.state.serials\r\n    ) as (keyof typeof SerialType)[];\r\n    const connectedSerial = serialNames\r\n      .map(serialName => this.state.serials[serialName])\r\n      .find(serial => serial.state === SerialState.CONNECTED);\r\n\r\n    return connectedSerial;\r\n  }\r\n\r\n  get batteryState(): BatteryState {\r\n    const voltage = this.state.batteryVoltage;\r\n\r\n    if (voltage === undefined) {\r\n      return BatteryState.UNKNOWN;\r\n    }\r\n\r\n    if (voltage <= config.rules.battery.critical) {\r\n      return BatteryState.CRITICAL;\r\n    } else if (voltage <= config.rules.battery.low) {\r\n      return BatteryState.LOW;\r\n    }\r\n\r\n    return BatteryState.FULL;\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface LidarMeasurement {\r\n  readonly angle: number;\r\n  readonly distance: number;\r\n  readonly quality: number;\r\n  readonly date: Date;\r\n}\r\n\r\nexport interface State {\r\n  readonly measurements: LidarMeasurement[];\r\n}\r\n\r\nexport class MeasurementsContainer extends Container<State> {\r\n  readonly state: State = {\r\n    measurements: []\r\n  };\r\n\r\n  add(measurement: LidarMeasurement) {\r\n    return this.setState({\r\n      measurements: [...this.state.measurements, measurement]\r\n    });\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface State {\r\n  readonly left: number;\r\n  readonly right: number;\r\n}\r\n\r\nexport class OdometryContainer extends Container<State> {\r\n  readonly state: State = {\r\n    left: 0,\r\n    right: 0\r\n  };\r\n\r\n  update(left: number, right: number) {\r\n    return this.setState({\r\n      left,\r\n      right\r\n    });\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface State {\r\n  readonly targetSpeed: {\r\n    readonly left: number;\r\n    readonly right: number;\r\n  };\r\n  readonly current: {\r\n    readonly left: number;\r\n    readonly right: number;\r\n  };\r\n}\r\n\r\nexport class RobotContainer extends Container<State> {\r\n  readonly state: State = {\r\n    targetSpeed: {\r\n      left: 0,\r\n      right: 0\r\n    },\r\n    current: {\r\n      left: 0,\r\n      right: 0\r\n    }\r\n  };\r\n\r\n  setTargetSpeed(left: number, right: number) {\r\n    return this.setState({\r\n      targetSpeed: {\r\n        left,\r\n        right\r\n      }\r\n    });\r\n  }\r\n\r\n  setCurrent(left: number, right: number) {\r\n    return this.setState({\r\n      current: {\r\n        left,\r\n        right\r\n      }\r\n    });\r\n  }\r\n}\r\n","// import { TrackedVehicleOptions } from \"./lib/tracked-vehicle-kinematics\";\r\n// import { WebSocketClientOptions } from \"./lib/web-socket-client/index\";\r\n\r\n// export interface RulesConfig {\r\n//   battery: {\r\n//     low: number;\r\n//     critical: number;\r\n//   };\r\n// }\r\n\r\n// export interface Config {\r\n//   webSocket: WebSocketClientOptions;\r\n//   rules: RulesConfig;\r\n//   vehicle: TrackedVehicleOptions;\r\n// }\r\n\r\nexport const config = {\r\n  webSocket: {\r\n    // allow overriding web-socket options via local storage\r\n    host:\r\n      // process.env.NODE_ENV === \"development\" &&\r\n      localStorage.webSocketHost !== undefined\r\n        ? localStorage.webSocketHost\r\n        : \"127.0.0.1\",\r\n    port:\r\n      localStorage.webSocketPort !== undefined\r\n        ? parseInt(localStorage.webSocketPort, 10)\r\n        : 8000,\r\n    useSSL: false,\r\n    reconnectInterval: 3000\r\n  },\r\n  rules: {\r\n    battery: {\r\n      low: 15.0,\r\n      critical: 13.5\r\n    }\r\n  },\r\n  vehicle: {\r\n    trackWidth: 0.15, // meters\r\n    maxSpeed: 1, // meters per second\r\n    wheelDiameter: 0.039, // meters\r\n    encoderCountsPerRotation: 20, // encoder pulse count per revolution\r\n    gearboxRatio: 25, // 25/1 gearbox ratio\r\n    speedUpdateInterval: 50 // 20Hz\r\n  }\r\n};\r\n","import { Transport } from \"../transport/Transport\";\r\n\r\nexport type SendArgument = string | number;\r\n\r\nexport class Robot {\r\n  pingSentTime?: number;\r\n\r\n  constructor(private readonly transport: Transport) {}\r\n\r\n  requestVoltage() {\r\n    this.send(\"voltage\");\r\n  }\r\n\r\n  requestState() {\r\n    this.send(\"state\");\r\n  }\r\n\r\n  setSpeed(left: number, right: number) {\r\n    this.send(\"s\", left, right);\r\n  }\r\n\r\n  ping(transportOnly = false) {\r\n    this.pingSentTime = Date.now();\r\n\r\n    if (transportOnly) {\r\n      // send internal ping command if testing the transport only (Android responds to this)\r\n      this.send(\"!ping\");\r\n    } else {\r\n      // send full ping, responded by the MCU\r\n      this.send(\"ping\");\r\n    }\r\n  }\r\n\r\n  // don't use directly, add new robot method\r\n  private send(command: string, ...args: SendArgument[]) {\r\n    const message = `${command}${args.length > 0 ? \":\" : \"\"}${args.join(\":\")}`;\r\n\r\n    this.transport.send(message);\r\n  }\r\n}\r\n","import { dummyLogger, Logger } from \"ts-log\";\r\n\r\nimport { log as logGlobal } from \"../../services/log\";\r\n\r\nimport { Transport, TransportListener, TransportState } from \"./Transport\";\r\n\r\nexport interface MultiTransportOptions {\r\n  log?: Logger;\r\n}\r\n\r\nexport class MultiTransport implements Transport {\r\n  private readonly options: Required<MultiTransportOptions>;\r\n  private readonly log: Logger;\r\n  private readonly listeners: TransportListener[] = [];\r\n  private readonly transports: Transport[] = [];\r\n\r\n  constructor(options: MultiTransportOptions = {}) {\r\n    this.options = {\r\n      log: dummyLogger,\r\n      ...options\r\n    };\r\n    this.log = this.options.log;\r\n  }\r\n\r\n  getName() {\r\n    const activeTransport = this.getActiveTransport();\r\n\r\n    // return none if no transport is available\r\n    if (!activeTransport) {\r\n      return \"None\";\r\n    }\r\n\r\n    // return active transport name\r\n    return activeTransport.getName();\r\n  }\r\n\r\n  isAvailable() {\r\n    return this.getAvailableTransport() !== undefined;\r\n  }\r\n\r\n  getState() {\r\n    const activeTransport = this.getActiveTransport();\r\n\r\n    // return disconnected if no transport is available\r\n    if (!activeTransport) {\r\n      return TransportState.DISCONNECTED;\r\n    }\r\n\r\n    // return active transport state\r\n    return activeTransport.getState();\r\n  }\r\n\r\n  addListener(listener: TransportListener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  async connect() {\r\n    // call connect on all disconnected transports\r\n    this.transports.forEach(transport => {\r\n      if (transport.getState() !== TransportState.DISCONNECTED) {\r\n        return;\r\n      }\r\n\r\n      transport.connect();\r\n    });\r\n  }\r\n\r\n  send(message: string) {\r\n    const connectedTransport = this.getConnectedTransport();\r\n\r\n    if (!connectedTransport) {\r\n      this.log.warn(\r\n        `sending message \"${message}\" requested but there is no connected transport available`\r\n      );\r\n\r\n      // notify of failed message sending attempt\r\n      this.listeners.forEach(listener =>\r\n        listener.onMessageSent(this, message, false)\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    return connectedTransport.send(message);\r\n  }\r\n\r\n  addTransport(transport: Transport) {\r\n    // listen for transport events and forward active transport events\r\n    transport.addListener({\r\n      onStateChanged: (eventTransport, newState, previousState) => {\r\n        const activeTransport = this.getActiveTransport();\r\n\r\n        if (eventTransport !== activeTransport) {\r\n          return;\r\n        }\r\n\r\n        this.listeners.forEach(listener =>\r\n          listener.onStateChanged(eventTransport, newState, previousState)\r\n        );\r\n      },\r\n      onError: (eventTransport, error) => {\r\n        const activeTransport = this.getActiveTransport();\r\n\r\n        if (eventTransport !== activeTransport) {\r\n          return;\r\n        }\r\n\r\n        this.listeners.forEach(listener =>\r\n          listener.onError(eventTransport, error)\r\n        );\r\n      },\r\n      onMessageSent: (\r\n        eventTransport,\r\n        message,\r\n        wasSentSuccessfully: boolean\r\n      ) => {\r\n        const activeTransport = this.getActiveTransport();\r\n\r\n        if (eventTransport !== activeTransport) {\r\n          return;\r\n        }\r\n\r\n        this.listeners.forEach(listener =>\r\n          listener.onMessageSent(eventTransport, message, wasSentSuccessfully)\r\n        );\r\n      },\r\n      onMessageReceived: (eventTransport, message) => {\r\n        const activeTransport = this.getActiveTransport();\r\n\r\n        if (eventTransport !== activeTransport) {\r\n          return;\r\n        }\r\n\r\n        this.listeners.forEach(listener =>\r\n          listener.onMessageReceived(eventTransport, message)\r\n        );\r\n      }\r\n    });\r\n\r\n    this.transports.push(transport);\r\n  }\r\n\r\n  getAvailableTransport() {\r\n    // return first available transport\r\n    return this.transports.find(transport => transport.isAvailable());\r\n  }\r\n\r\n  getConnectedTransport() {\r\n    // return first connected transport if any\r\n    return this.transports.find(\r\n      transport => transport.getState() === TransportState.CONNECTED\r\n    );\r\n  }\r\n\r\n  getActiveTransport() {\r\n    const connectedTransport = this.getConnectedTransport();\r\n\r\n    // return first connected transport if exists\r\n    if (connectedTransport) {\r\n      return connectedTransport;\r\n    }\r\n\r\n    // return first available transport if exists\r\n    return this.getAvailableTransport();\r\n  }\r\n}\r\n","import { NativeTransport } from \"../lib/transport/NativeTransport\";\r\n\r\nexport const nativeTransport = new NativeTransport({\r\n  // log: console\r\n});\r\n","import { dummyLogger, Logger } from \"ts-log\";\r\n\r\nimport { Transport, TransportListener, TransportState } from \"./Transport\";\r\n\r\ninterface BridgeInterface {\r\n  receive(message: string): void;\r\n}\r\n\r\n// extend the global window interface with the bridge interfaces\r\ndeclare global {\r\n  interface Window {\r\n    native?: BridgeInterface;\r\n    app?: BridgeInterface;\r\n  }\r\n}\r\n\r\nexport interface NativeTransportOptions {\r\n  log?: Logger;\r\n}\r\n\r\nexport class NativeTransport implements Transport {\r\n  private readonly options: Required<NativeTransportOptions>;\r\n  private readonly log: Logger;\r\n  private readonly listeners: TransportListener[] = [];\r\n  private readonly bridgeExists: boolean;\r\n  private state: TransportState = TransportState.DISCONNECTED;\r\n  private native?: BridgeInterface;\r\n\r\n  constructor(options: NativeTransportOptions = {}) {\r\n    this.options = {\r\n      log: dummyLogger,\r\n      ...options\r\n    };\r\n    this.log = this.options.log;\r\n    this.bridgeExists = window.native !== undefined;\r\n  }\r\n\r\n  getName() {\r\n    return \"Native\";\r\n  }\r\n\r\n  isAvailable() {\r\n    return this.bridgeExists;\r\n  }\r\n\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  addListener(listener: TransportListener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  async connect() {\r\n    // attempt to connect\r\n    this.setState(TransportState.CONNECTING);\r\n\r\n    // default to using mock interface if not available\r\n    if (window.native === undefined) {\r\n      this.log.info(\"no native bridge is available\");\r\n\r\n      // connection failed\r\n      this.setState(TransportState.DISCONNECTED);\r\n\r\n      return;\r\n    }\r\n\r\n    this.log.info(\"native bridge is available\");\r\n\r\n    // store reference to the native javascript bridge interface\r\n    this.native = window.native;\r\n\r\n    // setup native to app interface\r\n    window.app = {\r\n      receive: message => this.onMessageReceived(message)\r\n    };\r\n\r\n    // connection successful\r\n    this.setState(TransportState.CONNECTED);\r\n  }\r\n\r\n  send(message: string) {\r\n    // fail to send if no bridge available or not connected\r\n    if (!this.native || this.state !== TransportState.CONNECTED) {\r\n      this.log.warn(\r\n        `sending message \"${message}\" requested but the native bridge is not available`\r\n      );\r\n\r\n      // notify of failed message sending attempt\r\n      this.listeners.forEach(listener =>\r\n        listener.onMessageSent(this, message, false)\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    // attempt to send the message\r\n    try {\r\n      // call the receive native bridge function\r\n      this.native.receive(message);\r\n\r\n      // notify of message sent\r\n      this.listeners.forEach(listener =>\r\n        listener.onMessageSent(this, message, true)\r\n      );\r\n\r\n      return true;\r\n    } catch (error) {\r\n      // notify of error\r\n      this.listeners.forEach(listener => listener.onError(this, error));\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private setState(newState: TransportState) {\r\n    // ignore if state did not change\r\n    if (newState === this.state) {\r\n      return;\r\n    }\r\n\r\n    // remember previous state\r\n    const previousState = this.state;\r\n\r\n    // update current state\r\n    this.state = newState;\r\n\r\n    // notify the listeners of state change\r\n    this.listeners.forEach(listener =>\r\n      listener.onStateChanged(this, newState, previousState)\r\n    );\r\n  }\r\n\r\n  private onMessageReceived(message: string) {\r\n    this.log.info(`received: \"${message}\"`);\r\n\r\n    // notify the listeners of message received\r\n    this.listeners.forEach(listener =>\r\n      listener.onMessageReceived(this, message)\r\n    );\r\n  }\r\n}\r\n","import { config } from \"../config\";\r\nimport { WebsocketTransport } from \"../lib/transport/WebsocketTransport\";\r\n\r\nexport const websocketTransport = new WebsocketTransport({\r\n  ...config.webSocket\r\n  // log: console\r\n});\r\n","import { dummyLogger, Logger } from \"ts-log\";\r\n\r\nimport { Transport, TransportListener, TransportState } from \"./Transport\";\r\n\r\nexport interface WebsocketTransportOptions {\r\n  host: string;\r\n  port: number;\r\n  useSSL?: boolean;\r\n  reconnectInterval?: number;\r\n  log?: Logger;\r\n}\r\n\r\nexport class WebsocketTransport implements Transport {\r\n  private readonly options: Required<WebsocketTransportOptions>;\r\n  private readonly log: Logger;\r\n  private readonly listeners: TransportListener[] = [];\r\n  private state: TransportState = TransportState.DISCONNECTED;\r\n  private wasConnected = false;\r\n  private ws?: WebSocket;\r\n\r\n  constructor(options: WebsocketTransportOptions) {\r\n    this.options = {\r\n      useSSL: false,\r\n      log: dummyLogger,\r\n      reconnectInterval: 1000,\r\n      ...options\r\n    };\r\n    this.log = this.options.log;\r\n  }\r\n\r\n  getName() {\r\n    return \"WebSocket\";\r\n  }\r\n\r\n  isAvailable() {\r\n    return WebSocket !== undefined;\r\n  }\r\n\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  addListener(listener: TransportListener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  async connect() {\r\n    const url = `${this.options.useSSL ? \"wss\" : \"ws\"}://${this.options.host}:${\r\n      this.options.port\r\n    }`;\r\n\r\n    this.log.info(`connecting to web-socket server at ${url}`);\r\n\r\n    // update state depending on whether the connection was ever established\r\n    this.setState(\r\n      this.wasConnected\r\n        ? TransportState.RECONNECTING\r\n        : TransportState.CONNECTING\r\n    );\r\n\r\n    // attempt to open web-socket connection\r\n    this.ws = new WebSocket(url);\r\n\r\n    // handle open event\r\n    this.ws.onopen = event => {\r\n      this.log.info(\"established web-socket connection\");\r\n\r\n      this.wasConnected = true;\r\n\r\n      // update state\r\n      this.setState(TransportState.CONNECTED);\r\n    };\r\n\r\n    // handle close event\r\n    this.ws.onclose = event => {\r\n      const logDetails = `code: ${event.code}, reason: ${\r\n        event.reason\r\n      }, was clean: ${event.wasClean ? \"yes\" : \"no\"}`;\r\n\r\n      if (this.wasConnected) {\r\n        this.log.warn(`connection to web-socket was lost (${logDetails})`);\r\n      } else {\r\n        this.log.warn(`connecting to web-socket failed (${logDetails})`);\r\n      }\r\n\r\n      // update state\r\n      this.setState(TransportState.DISCONNECTED);\r\n\r\n      // attempt to reconnect\r\n      setTimeout(() => {\r\n        this.connect();\r\n      }, this.options.reconnectInterval);\r\n    };\r\n\r\n    // handle error event\r\n    this.ws.onerror = _event => {\r\n      this.log.warn(\"got web-socket error\");\r\n\r\n      // notify the listeners\r\n      this.listeners.forEach(listener => listener.onError(this));\r\n    };\r\n\r\n    // handle message event\r\n    this.ws.onmessage = event => {\r\n      const message = event.data;\r\n\r\n      // notify the listeners of message received\r\n      this.listeners.forEach(listener =>\r\n        listener.onMessageReceived(this, message)\r\n      );\r\n    };\r\n  }\r\n\r\n  send(message: string) {\r\n    // we can only send messages if we're connected\r\n    if (!this.ws || this.state !== TransportState.CONNECTED) {\r\n      this.log.warn(\r\n        `sending message \"${message}\" requested but websocket state is ${\r\n          this.state\r\n        }`\r\n      );\r\n\r\n      // notify of failed message sending attempt\r\n      this.listeners.forEach(listener =>\r\n        listener.onMessageSent(this, message, false)\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    // send the message\r\n    this.ws.send(message);\r\n\r\n    // notify the listeners\r\n    this.listeners.forEach(listener =>\r\n      listener.onMessageSent(this, message, true)\r\n    );\r\n\r\n    return true;\r\n  }\r\n\r\n  private setState(newState: TransportState) {\r\n    // ignore if state did not change\r\n    if (newState === this.state) {\r\n      return;\r\n    }\r\n\r\n    // remember previous state\r\n    const previousState = this.state;\r\n\r\n    // update current state\r\n    this.state = newState;\r\n\r\n    // notify the listeners of state change\r\n    this.listeners.forEach(listener =>\r\n      listener.onStateChanged(this, newState, previousState)\r\n    );\r\n  }\r\n}\r\n","import { MultiTransport } from \"../lib/transport/MultiTransport\";\r\n\r\nimport { nativeTransport } from \"./nativeTransport\";\r\nimport { websocketTransport } from \"./websocketTransport\";\r\n\r\nexport const multiTransport = new MultiTransport({\r\n  // log: console\r\n});\r\n\r\n// register sub-transports in preferred order\r\nmultiTransport.addTransport(nativeTransport);\r\nmultiTransport.addTransport(websocketTransport);\r\n","import { Robot } from \"../lib/robot\";\r\n\r\nimport { multiTransport } from \"./multiTransport\";\r\n\r\nexport const robot = new Robot(multiTransport);\r\n","import { SerialState, SerialType } from \"../containers/StatusContainer\";\r\nimport { robot } from \"../services/robot\";\r\n\r\nimport { ContainerMap } from \"./\";\r\n\r\nexport async function handleSerialCommand(\r\n  args: string[],\r\n  { status }: ContainerMap\r\n) {\r\n  // extract serial info\r\n  const serialType = args[0] as SerialType;\r\n  const serialState = args[1] as SerialState;\r\n  const serialDeviceName = typeof args[2] === \"string\" ? args[2] : undefined;\r\n\r\n  // update serial state\r\n  await status.setSerialState(serialType, serialState, serialDeviceName);\r\n\r\n  const connectedSerial = status.getConnectedSerial();\r\n\r\n  // ask for some initial state info once a serial connection is established\r\n  if (connectedSerial !== undefined && serialType === connectedSerial.type) {\r\n    // request current state\r\n    robot.requestState();\r\n\r\n    // also setup an interval to ask the voltage level periodically\r\n    // requestBatteryVoltageInterval = window.setInterval(() => {\r\n    //   requestVoltage();\r\n    // }, REQUEST_BATTERY_VOLTAGE_INTERVAL);\r\n  } else {\r\n    // clear the battery voltage interval if exists\r\n    // if (requestBatteryVoltageInterval !== null) {\r\n    //   window.clearInterval(requestBatteryVoltageInterval);\r\n\r\n    //   requestBatteryVoltageInterval = null;\r\n    // }\r\n\r\n    // no serial connection so we can't be sure of battery voltage\r\n    void status.setBatteryVoltage(undefined);\r\n  }\r\n}\r\n","import { ButtonContainer } from \"../containers/ButtonContainer\";\r\nimport { LidarContainer } from \"../containers/LidarContainer\";\r\nimport { LogContainer } from \"../containers/LogContainer\";\r\nimport { MeasurementsContainer } from \"../containers/MeasurementsContainer\";\r\nimport { OdometryContainer } from \"../containers/OdometryContainer\";\r\nimport { RobotContainer } from \"../containers/RobotContainer\";\r\nimport { StatusContainer } from \"../containers/StatusContainer\";\r\n\r\nimport { handleBeaconCommand } from \"./handleBeaconCommand\";\r\nimport { handleButtonCommand } from \"./handleButtonCommand\";\r\nimport { handleCurrentCommand } from \"./handleCurrentCommand\";\r\nimport { handleEncoderCommand } from \"./handleEncoderCommand\";\r\nimport { handleVoltageCommand } from \"./handleGetVoltageCommand\";\r\nimport { handleIpCommand } from \"./handleIpCommand\";\r\nimport { handleLidarCommand } from \"./handleLidarCommand\";\r\nimport { handleMeasurementCommand } from \"./handleMeasurementCommand\";\r\nimport { handlePongCommand } from \"./handlePongCommand\";\r\nimport { handleResetCommand } from \"./handleResetCommand\";\r\nimport { handleSerialCommand } from \"./handleSerialCommand\";\r\nimport { handleSpeedCommand } from \"./handleSpeedCommand\";\r\nimport { handleUsbCommand } from \"./handleUsbCommand\";\r\n\r\nexport interface ContainerMap {\r\n  log: LogContainer;\r\n  status: StatusContainer;\r\n  odometry: OdometryContainer;\r\n  lidar: LidarContainer;\r\n  button: ButtonContainer;\r\n  robot: RobotContainer;\r\n  measurements: MeasurementsContainer;\r\n}\r\n\r\nexport type CommandHandlerFn = (\r\n  args: string[],\r\n  containers: ContainerMap\r\n) => void;\r\n\r\nexport interface CommandHandlersMap {\r\n  [x: string]: CommandHandlerFn | undefined;\r\n}\r\n\r\nexport const commandHandlers: CommandHandlersMap = {\r\n  serial: handleSerialCommand,\r\n  ip: handleIpCommand,\r\n  usb: handleUsbCommand,\r\n  voltage: handleVoltageCommand,\r\n  button: handleButtonCommand,\r\n  reset: handleResetCommand,\r\n  current: handleCurrentCommand,\r\n  lidar: handleLidarCommand,\r\n  pong: handlePongCommand,\r\n  e: handleEncoderCommand,\r\n  b: handleBeaconCommand,\r\n  m: handleMeasurementCommand,\r\n  s: handleSpeedCommand\r\n};\r\n\r\n// handles parsed web-socket commands\r\nexport function handleCommand(\r\n  name: string,\r\n  args: string[],\r\n  containers: ContainerMap\r\n) {\r\n  const handler = commandHandlers[name];\r\n\r\n  // check whether the handler exists\r\n  if (handler === undefined) {\r\n    console.warn(\r\n      `missing web-socket command handler for \"${name}\" (${args.join(\", \")})`\r\n    );\r\n\r\n    return;\r\n  }\r\n\r\n  // call the handler\r\n  handler(args, containers);\r\n}\r\n","import { ContainerMap } from \"./\";\r\n\r\nexport function handleIpCommand(args: string[], { status }: ContainerMap) {\r\n  const remoteIp = args[0];\r\n  const isOffline = remoteIp === \"null\";\r\n\r\n  if (!isOffline) {\r\n    void status.setRemoteIp(remoteIp);\r\n  } else {\r\n    void status.setOffline();\r\n  }\r\n}\r\n","import { ContainerMap } from \"./\";\r\n\r\nexport function handleUsbCommand(args: string[], _containerMap: ContainerMap) {\r\n  const vendorId = parseInt(args[0], 10);\r\n  const productId = parseInt(args[1], 10);\r\n  const productName = args[2];\r\n\r\n  // TODO: store in status?\r\n  console.log(\"usb\", {\r\n    vendorId,\r\n    productId,\r\n    productName\r\n  });\r\n}\r\n","import { ContainerMap } from \"./\";\r\n\r\nexport function handleVoltageCommand(args: string[], { status }: ContainerMap) {\r\n  const voltage = parseFloat(args[0]);\r\n\r\n  void status.setBatteryVoltage(voltage);\r\n}\r\n","import { Button, ButtonState } from \"../containers/ButtonContainer\";\r\n\r\nimport { ContainerMap } from \"./\";\r\n\r\nexport function handleButtonCommand(args: string[], { button }: ContainerMap) {\r\n  const name = args[0];\r\n  const state =\r\n    parseInt(args[1], 10) === 0 ? ButtonState.PRESSED : ButtonState.RELEASED;\r\n\r\n  void button.setButtonState(name.toUpperCase() as Button, state);\r\n}\r\n","import { ContainerMap } from \"./\";\r\n\r\nexport function handleResetCommand(_args: string[], { status }: ContainerMap) {\r\n  void status.setResetReceived();\r\n}\r\n","import { ContainerMap } from \"./\";\r\n\r\nexport function handleCurrentCommand(args: string[], { robot }: ContainerMap) {\r\n  const left = parseInt(args[0], 10);\r\n  const right = parseInt(args[1], 10);\r\n\r\n  void robot.setCurrent(left, right);\r\n}\r\n","import { ContainerMap } from \"./\";\r\n\r\nexport function handleLidarCommand(args: string[], { lidar }: ContainerMap) {\r\n  const isStarted = parseInt(args[0], 10) === 1;\r\n  const isValid = parseInt(args[1], 10) === 1;\r\n  const targetRpm = parseFloat(args[2]);\r\n  const currentRpm = parseFloat(args[3]);\r\n  const motorPwm = parseFloat(args[4]);\r\n\r\n  void lidar.update({\r\n    isStarted,\r\n    isValid,\r\n    targetRpm,\r\n    currentRpm,\r\n    motorPwm\r\n  });\r\n}\r\n","import { robot } from \"../services/robot\";\r\n\r\nimport { ContainerMap } from \"./\";\r\n\r\nexport function handlePongCommand(args: string[], { log }: ContainerMap) {\r\n  if (!robot.pingSentTime) {\r\n    return;\r\n  }\r\n\r\n  const pingTimeTaken = Date.now() - robot.pingSentTime;\r\n\r\n  robot.pingSentTime = undefined;\r\n\r\n  log.addEntry(`# ping: ${pingTimeTaken} ms`);\r\n}\r\n","import { ContainerMap } from \"./\";\r\n\r\nexport function handleEncoderCommand(\r\n  args: string[],\r\n  { odometry }: ContainerMap\r\n) {\r\n  const left = parseInt(args[0], 10);\r\n  const right = parseInt(args[1], 10);\r\n\r\n  void odometry.update(left, right);\r\n}\r\n","import { ContainerMap } from \"./\";\r\n\r\nexport function handleBeaconCommand(args: string[], { status }: ContainerMap) {\r\n  const durationMs = parseInt(args[0], 10);\r\n  const cycleCount = parseInt(args[1], 10);\r\n  const loopFrequency = (cycleCount / durationMs) * 1000;\r\n  const loopTimeUs = (durationMs / cycleCount) * 1000;\r\n\r\n  void status.setLoopStatistics(loopFrequency, loopTimeUs);\r\n}\r\n","import { ContainerMap } from \"./\";\r\n\r\nexport function handleMeasurementCommand(\r\n  args: string[],\r\n  { measurements }: ContainerMap\r\n) {\r\n  // console.log(\"measurement\", { args });\r\n  void measurements.add({\r\n    angle: parseInt(args[0], 10),\r\n    distance: parseInt(args[1], 10),\r\n    quality: parseInt(args[2], 10),\r\n    date: new Date()\r\n  });\r\n}\r\n","import { ContainerMap } from \"./\";\r\n\r\nexport function handleSpeedCommand(args: string[], { robot }: ContainerMap) {\r\n  const left = parseInt(args[0], 10);\r\n  const right = parseInt(args[1], 10);\r\n\r\n  void robot.setTargetSpeed(left, right);\r\n}\r\n","// simple log listener function\r\nexport type LogListenerFn = (message: string) => void;\r\n\r\n// list of registered log listeners\r\nexport const logListeners: LogListenerFn[] = [];\r\n\r\n// registers a new log listener\r\nexport const addLogListener = (listener: LogListenerFn) => {\r\n  logListeners.push(listener);\r\n};\r\n\r\n// global log function callable from anywhere, can be intercepted by any number of listeners\r\nexport const log = (message: string) =>\r\n  logListeners.forEach(listener => listener(message));\r\n","import * as React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { ButtonContainer } from \"../containers/ButtonContainer\";\r\nimport { LidarContainer } from \"../containers/LidarContainer\";\r\nimport { LogContainer } from \"../containers/LogContainer\";\r\nimport { MeasurementsContainer } from \"../containers/MeasurementsContainer\";\r\nimport { OdometryContainer } from \"../containers/OdometryContainer\";\r\nimport { RobotContainer } from \"../containers/RobotContainer\";\r\nimport { StatusContainer } from \"../containers/StatusContainer\";\r\n\r\nimport { ContainerMap, handleCommand } from \"../handlers\";\r\nimport { addLogListener } from \"../services/log\";\r\nimport { multiTransport } from \"../services/multiTransport\";\r\n\r\n// connects transport to containers, does not render anything visual\r\nexport class Hub extends React.Component {\r\n  private isInitialized = false;\r\n\r\n  render() {\r\n    return (\r\n      <Subscribe\r\n        to={[\r\n          LogContainer,\r\n          StatusContainer,\r\n          OdometryContainer,\r\n          LidarContainer,\r\n          ButtonContainer,\r\n          RobotContainer,\r\n          MeasurementsContainer\r\n        ]}\r\n      >\r\n        {(\r\n          log: LogContainer,\r\n          status: StatusContainer,\r\n          odometry: OdometryContainer,\r\n          lidar: LidarContainer,\r\n          button: ButtonContainer,\r\n          robot: RobotContainer,\r\n          measurements: MeasurementsContainer\r\n        ) => {\r\n          // only initialize the connection logic once\r\n          if (this.isInitialized) {\r\n            return null;\r\n          }\r\n\r\n          // register as log listener and proxy to log container\r\n          addLogListener(message => log.addEntry(message));\r\n\r\n          // set initial transport state\r\n          void status.setTransportState(multiTransport.getState());\r\n\r\n          // subscribe to transport events\r\n          multiTransport.addListener({\r\n            onStateChanged: (transport, newState, _previousState) => {\r\n              log.addEntry(\r\n                `# ${transport.getName()} state changed to ${newState}`\r\n              );\r\n\r\n              void status.setTransportState(newState);\r\n            },\r\n            onError: (transport, error) => {\r\n              log.addEntry(\r\n                `# transport error occurred${\r\n                  error ? ` (${error.message})` : \"\"\r\n                }`\r\n              );\r\n            },\r\n            onMessageSent: (\r\n              _transport,\r\n              message,\r\n              wasSentSuccessfully: boolean\r\n            ) => {\r\n              const [command] = message.split(\":\");\r\n              const noLogCommands = [\"ping\", \"!ping\"];\r\n\r\n              // don't log single-character recurring commands (\"s\" for speed etc)\r\n              if (command.length === 1 || noLogCommands.includes(command)) {\r\n                return;\r\n              }\r\n\r\n              log.addEntry(\r\n                `> ${message}${!wasSentSuccessfully ? \" (sending failed)\" : \"\"}`\r\n              );\r\n            },\r\n            onMessageReceived: (_transport, message) => {\r\n              // TODO: make globally available?\r\n              const containers = {\r\n                log,\r\n                status,\r\n                odometry,\r\n                lidar,\r\n                button,\r\n                robot,\r\n                measurements\r\n              };\r\n\r\n              this.handleTransportMessage(message, containers);\r\n            }\r\n          });\r\n\r\n          // attempt to establish connection\r\n          multiTransport.connect();\r\n\r\n          // don't run this logic again\r\n          this.isInitialized = true;\r\n\r\n          // don't render anything\r\n          return null;\r\n        }}\r\n      </Subscribe>\r\n    );\r\n  }\r\n\r\n  // handles web-socket messages\r\n  private handleTransportMessage(message: string, containers: ContainerMap) {\r\n    // ignore empty messages\r\n    if (message.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // parse message\r\n    const [command, ...args] = message.split(\":\");\r\n    const noLogCommands = [\"pong\"];\r\n\r\n    // dont log single-character commands (fast lidar measurements, encoders etc)\r\n    if (command.length > 1 && noLogCommands.indexOf(command) === -1) {\r\n      containers.log.addEntry(`< ${message}`);\r\n    }\r\n\r\n    // attempt to handle command\r\n    handleCommand(command, args, containers);\r\n  }\r\n}\r\n","import { lighten } from \"polished\";\r\nimport baseStyled, {\r\n  createGlobalStyle,\r\n  keyframes,\r\n  ThemedStyledInterface\r\n} from \"styled-components\";\r\n\r\n// common visual configuration used by various components\r\nexport const theme = {\r\n  text: {\r\n    primary: \"#f0f0f0\",\r\n    secondary: \"#969696\"\r\n  },\r\n  bg: {\r\n    primary: \"#cc3333\",\r\n    secondary: \"#282828\",\r\n    tertiary: lighten(0.05, \"#282828\"),\r\n    quaternary: \"#087099\",\r\n    good: \"#009900\",\r\n    warn: \"#999900\",\r\n    bad: \"#990000\"\r\n  },\r\n  size: {\r\n    darkerLighterPercentage: 0.25,\r\n    gridGap: \"2px\",\r\n    menuHeight: \"64px\"\r\n  },\r\n  animation: {\r\n    fadeIn: keyframes`\r\n      from {\r\n        opacity: 0;\r\n      }\r\n      to {\r\n        opacity: 1;\r\n      }\r\n    `,\r\n    pulse: (color: string) => keyframes`\r\n      0% {\r\n        background: ${color};\r\n      }\r\n      50% {\r\n        background: ${lighten(0.25, color)};\r\n      }\r\n      100% {\r\n        background: ${color};\r\n      }\r\n    `\r\n  }\r\n};\r\n\r\n// use \"styled\" from this file not the package directly\r\nexport type Theme = typeof theme;\r\nexport const styled = baseStyled as ThemedStyledInterface<Theme>;\r\n\r\n// common html element props such as onClick etc\r\nexport type ElProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\n\r\n// these global styles get injected in the document above all else\r\nexport const GlobalStyle = createGlobalStyle`\r\n  // main font\r\n  @font-face {\r\n    font-family: \"heebo-regular\";\r\n    src: url(\"fonts/Heebo-Regular.ttf\");\r\n    font-weight: normal;\r\n    font-style: normal;\r\n  }\r\n\r\n  // default to using border box sizing\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n  *,\r\n  *:before,\r\n  *:after {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  // set body styles\r\n  body,\r\n  html {\r\n    height: 100;\r\n    padding: 0;\r\n    margin: 0;\r\n    font-family: \"heebo-regular\";\r\n    color: ${theme.text.primary};\r\n    background-color: ${theme.bg.secondary};\r\n  }\r\n`;\r\n","import * as React from \"react\";\r\n\r\nimport { styled } from \"../styled\";\r\n\r\nexport interface IconProps {\r\n  url: string;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport const Icon = styled.i<IconProps>`\r\n  display: block;\r\n  width: ${props => props.width}px;\r\n  height: ${props => props.height}px;\r\n  mask-image: url(${props => props.url});\r\n  mask-size: ${props => props.height}px ${props => props.width}px;\r\n  mask-repeat: no-repeat;\r\n  mask-position: center center;\r\n  background-color: ${props => props.theme.text.primary};\r\n`;\r\n\r\nexport const StatusIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/status.svg\" width={37} height={32} />\r\n);\r\n\r\nexport const MapIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/map.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const BotIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/bot.svg\" width={27} height={32} />\r\n);\r\n\r\nexport const RemoteIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/remote.svg\" width={44} height={32} />\r\n);\r\n\r\nexport const SettingsIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/settings.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const BluetoothIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/bluetooth.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const SerialIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/serial.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const WebsocketIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/websocket.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const NativeIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/native.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const BatteryIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/battery.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const ClearIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/clear.svg\" width={32} height={32} />\r\n);\r\n","import { styled } from \"../styled\";\r\n\r\nexport interface TextProps {\r\n  primary?: boolean;\r\n}\r\n\r\nexport const Text = styled.div<TextProps>`\r\n  text-align: center;\r\n  font-variant: ${props => (props.primary ? \"all-small-caps\" : \"normal\")};\r\n  line-height: 1.2em;\r\n`;\r\n","import { darken } from \"polished\";\r\nimport * as React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { styled } from \"../styled\";\r\n\r\nimport { BotIcon, MapIcon, RemoteIcon, SettingsIcon, StatusIcon } from \"./Icon\";\r\nimport { Text } from \"./Text\";\r\n\r\nconst Wrap = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  background-color: #000;\r\n`;\r\n\r\nconst Items = styled.ul`\r\n  display: flex;\r\n  flex-direction: row;\r\n  height: ${props => props.theme.size.menuHeight};\r\n  flex: 1;\r\n  max-width: 600px;\r\n`;\r\n\r\nconst Item = styled.li`\r\n  height: 100%;\r\n  text-align: center;\r\n  font-variant: small-caps;\r\n  text-transform: uppercase;\r\n  font-size: 0.8em;\r\n  flex: 1;\r\n`;\r\n\r\nconst Link = styled(NavLink)`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  text-decoration: none;\r\n  color: ${props =>\r\n    darken(props.theme.size.darkerLighterPercentage, props.theme.text.primary)}\r\n  background-color: rgba(0, 0, 0, 0);\r\n  transition: background-color 300ms;\r\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n\r\n  &.active-main-menu-item {\r\n    background-color: ${props => props.theme.bg.secondary};\r\n    color: ${props => props.theme.text.primary}\r\n  }\r\n`;\r\n\r\nconst Label = styled(Text)`\r\n  padding-top: 4px;\r\n`;\r\n\r\nexport const MainMenu: React.SFC<{}> = () => (\r\n  <Wrap>\r\n    <Items>\r\n      <Item>\r\n        <Link to=\"/status\" activeClassName=\"active-main-menu-item\">\r\n          <StatusIcon />\r\n          <Label>Status</Label>\r\n        </Link>\r\n      </Item>\r\n      <Item>\r\n        <Link to=\"/map\" activeClassName=\"active-main-menu-item\">\r\n          <MapIcon />\r\n          <Label>Map</Label>\r\n        </Link>\r\n      </Item>\r\n      <Item>\r\n        <Link to=\"/bot\" activeClassName=\"active-main-menu-item\">\r\n          <BotIcon />\r\n          <Label>Bot</Label>\r\n        </Link>\r\n      </Item>\r\n      <Item>\r\n        <Link to=\"/remote\" activeClassName=\"active-main-menu-item\">\r\n          <RemoteIcon />\r\n          <Label>Remote</Label>\r\n        </Link>\r\n      </Item>\r\n      <Item>\r\n        <Link to=\"/settings\" activeClassName=\"active-main-menu-item\">\r\n          <SettingsIcon />\r\n          <Label>Settings</Label>\r\n        </Link>\r\n      </Item>\r\n    </Items>\r\n  </Wrap>\r\n);\r\n","import { styled } from \"../styled\";\r\n\r\nexport interface ViewProps {\r\n  text?: boolean;\r\n  grid?: boolean;\r\n}\r\n\r\nexport const View = styled.div<ViewProps>`\r\n  position: relative;\r\n  flex: 1;\r\n  border-radius: 8px 8px 0 0;\r\n  padding: ${props =>\r\n    props.text ? \"16px\" : props.grid ? props.theme.size.gridGap : \"0\"};\r\n`;\r\n","import { css } from \"styled-components\";\r\n\r\nimport { ElProps, styled, theme } from \"../styled\";\r\n\r\nexport enum GridItemStatus {\r\n  GOOD = \"GOOD\",\r\n  WARN = \"WARN\",\r\n  BAD = \"BAD\"\r\n}\r\n\r\nexport interface GridItemProps {\r\n  primary?: boolean;\r\n  text?: boolean;\r\n  status?: GridItemStatus;\r\n}\r\n\r\nexport const Grid = styled.div`\r\n  display: grid;\r\n  grid-gap: ${props => props.theme.size.gridGap};\r\n  height: calc(\r\n    100vh -\r\n      (\r\n        ${props => props.theme.size.menuHeight} +\r\n          ${props => props.theme.size.gridGap} * 2\r\n      )\r\n  );\r\n`;\r\n\r\nconst gridItemStatusColorMap = {\r\n  [GridItemStatus.GOOD]: theme.bg.good,\r\n  [GridItemStatus.WARN]: theme.bg.warn,\r\n  [GridItemStatus.BAD]: theme.bg.bad\r\n};\r\n\r\nexport const GridItem = styled.div<GridItemProps & ElProps>`\r\n  position: relative;\r\n  background-color: ${props => props.theme.bg.tertiary};\r\n  font-variant: ${props => (props.primary ? \"all-small-caps\" : \"normal\")};\r\n\r\n  ${props =>\r\n    props.text\r\n      ? css`\r\n          line-height: 1.25em;\r\n          text-align: center;\r\n          margin-top: 8px;\r\n        `\r\n      : \"\"}\r\n\r\n  ${props =>\r\n    props.status\r\n      ? css`\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          justify-content: center;\r\n          padding: 16px;\r\n          overflow: hidden;\r\n          background-color: ${gridItemStatusColorMap[props.status]};\r\n        `\r\n      : \"\"}\r\n\r\n  ${props =>\r\n    props.status === GridItemStatus.BAD\r\n      ? css`\r\n          animation: ${props.theme.animation.pulse(\r\n              gridItemStatusColorMap[props.status]\r\n            )}\r\n            3s ease;\r\n          animation-iteration-count: infinite;\r\n          animation-delay: 1s;\r\n        `\r\n      : \"\"}\r\n`;\r\n","import * as React from \"react\";\r\n\r\nimport { View } from \"../components/View\";\r\n\r\nexport const BotView: React.SFC<{}> = () => <View text={true}>Bot</View>;\r\n","import * as React from \"react\";\r\n\r\nimport { View } from \"../components/View\";\r\n\r\nexport const MapView: React.SFC = () => <View text={true}>Map</View>;\r\n","import * as nipplejs from \"nipplejs\";\r\nimport * as React from \"react\";\r\n\r\nexport interface JoystickProps {\r\n  name: string;\r\n  config?: nipplejs.JoystickOptions;\r\n  bind?: string;\r\n  x?: boolean;\r\n  y?: boolean;\r\n  onEvent?(\r\n    name: string,\r\n    event: nipplejs.JoystickEvent,\r\n    info: nipplejs.JoystickInstance\r\n  ): void;\r\n}\r\n\r\nexport class Joystick extends React.Component<JoystickProps> {\r\n  private readonly ref = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidMount() {\r\n    const el = this.ref.current;\r\n\r\n    // return if element could not be found\r\n    if (!el) {\r\n      console.warn(\"grid item dom node not found\");\r\n\r\n      return;\r\n    }\r\n\r\n    // create the nipple manager\r\n    const manager = nipplejs.create({\r\n      zone: el,\r\n      color: \"#FFF\",\r\n      size: 200,\r\n      position: {\r\n        left: \"50%\",\r\n        top: \"50%\"\r\n      },\r\n      mode: \"static\",\r\n      lockX: this.props.x === true,\r\n      lockY: this.props.y === true\r\n    });\r\n\r\n    const { onEvent } = this.props;\r\n\r\n    // only listen for events if even listener has been added\r\n    if (typeof onEvent === \"function\") {\r\n      const bind = this.props.bind\r\n        ? this.props.bind\r\n        : \"start move end dir plain\";\r\n\r\n      manager\r\n        .on(bind, (event, nipple) => {\r\n          onEvent(this.props.name, event, nipple);\r\n        })\r\n        .on(\"removed\", (_event, nipple) => {\r\n          nipple.off(bind);\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"joystick\" ref={this.ref} />;\r\n  }\r\n}\r\n","export interface TrackedVehicleOptions {\r\n  trackWidth: number;\r\n  maxSpeed: number;\r\n  wheelDiameter: number;\r\n  encoderCountsPerRotation: number;\r\n  gearboxRatio: number;\r\n  speedUpdateInterval: number;\r\n}\r\n\r\nexport interface MotorSpeeds {\r\n  left: number;\r\n  right: number;\r\n}\r\n\r\n// https://pdfs.semanticscholar.org/29ae/0bc974737b58afd63b6edb8d0837a3383321.pdf\r\nexport class TrackedVehicleKinematics {\r\n  constructor(private readonly options: TrackedVehicleOptions) {}\r\n\r\n  /**\r\n   * Returns motor speeds in m/s for requested forward speed at given rotational speed.\r\n   *\r\n   * @param speed Speed in m/s\r\n   * @param omega Rotational speed in rad/s\r\n   */\r\n  calculateMotorSpeeds(speed: number, omega: number): MotorSpeeds {\r\n    // TODO: calculate actual kinematics\r\n    return this.limit(\r\n      {\r\n        left: speed + omega,\r\n        right: speed - omega\r\n      },\r\n      this.options.maxSpeed\r\n    );\r\n  }\r\n\r\n  getSpeedEncoderCount(speed: number) {\r\n    const circumference = this.options.wheelDiameter * Math.PI;\r\n    const rps = speed / circumference;\r\n    const actualEncoderCountPerRevolution =\r\n      this.options.encoderCountsPerRotation * this.options.gearboxRatio;\r\n    const targetEncoderCountPerSecond = rps * actualEncoderCountPerRevolution;\r\n\r\n    return Math.floor(targetEncoderCountPerSecond);\r\n  }\r\n\r\n  limit(speeds: MotorSpeeds, maxSpeed: number): MotorSpeeds {\r\n    const maxRequestedSpeedMagnitude = Math.max(\r\n      Math.abs(speeds.left),\r\n      Math.abs(speeds.right)\r\n    );\r\n    const normalizationFactor = Math.min(\r\n      maxSpeed / maxRequestedSpeedMagnitude,\r\n      1.0\r\n    );\r\n\r\n    // console.log(\"normalize\", {\r\n    //   maxRequestedSpeedMagnitude,\r\n    //   normalizationFactor,\r\n    //   speeds,\r\n    //   maxSpeed,\r\n    // });\r\n\r\n    return {\r\n      left: speeds.left * normalizationFactor,\r\n      right: speeds.right * normalizationFactor\r\n    };\r\n  }\r\n\r\n  getEncoderSpeeds(speeds: MotorSpeeds): MotorSpeeds {\r\n    return {\r\n      left: this.getSpeedEncoderCount(speeds.left),\r\n      right: this.getSpeedEncoderCount(speeds.right)\r\n    };\r\n  }\r\n}\r\n","import throttle from \"lodash.throttle\";\r\nimport { dummyLogger, Logger } from \"ts-log\";\r\n\r\nimport { Robot } from \"../robot\";\r\nimport {\r\n  TrackedVehicleKinematics,\r\n  TrackedVehicleOptions\r\n} from \"../tracked-vehicle-kinematics\";\r\n\r\nexport interface RemoteControllerOptions {\r\n  robot: Robot;\r\n  vehicle: TrackedVehicleOptions;\r\n  log?: Logger;\r\n}\r\n\r\nexport class RemoteController {\r\n  private readonly options: Required<RemoteControllerOptions>;\r\n  private readonly kinematics: TrackedVehicleKinematics;\r\n  private readonly robot: Robot;\r\n  private speed = 0;\r\n  private omega = 0;\r\n  private readonly scheduleUpdateMotorSpeeds: () => void;\r\n\r\n  constructor(options: RemoteControllerOptions) {\r\n    this.options = {\r\n      log: dummyLogger,\r\n      ...options\r\n    };\r\n    this.robot = this.options.robot;\r\n    this.kinematics = new TrackedVehicleKinematics(this.options.vehicle);\r\n\r\n    this.scheduleUpdateMotorSpeeds = throttle(\r\n      () => this.updateMotorSpeeds(),\r\n      this.options.vehicle.speedUpdateInterval\r\n    );\r\n  }\r\n\r\n  setSpeed(speed: number) {\r\n    this.speed = speed;\r\n\r\n    this.scheduleUpdateMotorSpeeds();\r\n  }\r\n\r\n  setOmega(omega: number) {\r\n    this.omega = omega;\r\n\r\n    this.scheduleUpdateMotorSpeeds();\r\n  }\r\n\r\n  private updateMotorSpeeds() {\r\n    const motorSpeeds = this.kinematics.calculateMotorSpeeds(\r\n      this.speed,\r\n      this.omega\r\n    );\r\n    const encoderSpeeds = this.kinematics.getEncoderSpeeds(motorSpeeds);\r\n\r\n    // TODO: only send if sufficiently different from last sent values\r\n    this.robot.setSpeed(encoderSpeeds.left, encoderSpeeds.right);\r\n  }\r\n}\r\n","import { JoystickEvent, JoystickEventName, JoystickInstance } from \"nipplejs\";\r\nimport * as React from \"react\";\r\n\r\nimport { Grid, GridItem } from \"../components/Grid\";\r\nimport { Joystick } from \"../components/Joystick\";\r\nimport { View } from \"../components/View\";\r\nimport { config } from \"../config\";\r\nimport { RemoteController } from \"../lib/remote-controller\";\r\nimport { robot } from \"../services/robot\";\r\nimport { styled } from \"../styled\";\r\n\r\nconst JoystickGrid = styled(Grid)`\r\n  grid-template-columns: 1fr;\r\n`;\r\n\r\n// TODO: show track speeds on edges (target and real)\r\nexport class RemoteView extends React.Component {\r\n  private readonly remoteController = new RemoteController({\r\n    log: console,\r\n    vehicle: config.vehicle,\r\n    robot\r\n  });\r\n\r\n  render() {\r\n    return (\r\n      <View grid={true}>\r\n        <JoystickGrid>\r\n          <GridItem>\r\n            <Joystick\r\n              x={true}\r\n              name=\"speed\"\r\n              onEvent={(name, event, info) =>\r\n                this.onJoystickEvent(name, event, info)\r\n              }\r\n            />\r\n          </GridItem>\r\n          <GridItem>\r\n            <Joystick\r\n              y={true}\r\n              name=\"omega\"\r\n              onEvent={(name, event, info) =>\r\n                this.onJoystickEvent(name, event, info)\r\n              }\r\n            />\r\n          </GridItem>\r\n        </JoystickGrid>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  private onJoystickEvent(\r\n    name: string,\r\n    event: JoystickEvent,\r\n    info: JoystickInstance\r\n  ) {\r\n    const interestingEvents: JoystickEventName[] = [\"move\", \"end\"];\r\n\r\n    if (interestingEvents.indexOf(event.type) === -1) {\r\n      return;\r\n    }\r\n\r\n    const isMoveEvent = event.type === \"move\";\r\n\r\n    const xPos = isMoveEvent ? Math.sin(info.angle.radian) * info.distance : 0;\r\n    const yPos = isMoveEvent ? Math.cos(info.angle.radian) * info.distance : 0;\r\n\r\n    // console.log(`${name} x: ${xPos}, y: ${yPos}, distance: ${info.distance}`, this.remoteController);\r\n\r\n    switch (name) {\r\n      case \"speed\":\r\n        this.remoteController.setSpeed((yPos * -1) / 100.0);\r\n        break;\r\n\r\n      case \"omega\":\r\n        this.remoteController.setOmega(xPos / 100.0);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(`Got unexpected joystick \"${name}\" info`);\r\n    }\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport { View } from \"../components/View\";\r\n\r\nexport const SettingsView: React.SFC<{}> = () => <View text={true}>\r\n  <button onClick={() => window.location.href = \"http://kallaspriit\"}>Open http://kallaspriit</button>\r\n</View>;\r\n","import * as React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { BatteryState, StatusContainer } from \"../containers/StatusContainer\";\r\nimport { assertUnreachable } from \"../services/assertUnreachable\";\r\nimport { robot } from \"../services/robot\";\r\n\r\nimport { GridItem, GridItemStatus } from \"./Grid\";\r\nimport { BatteryIcon } from \"./Icon\";\r\nimport { Text } from \"./Text\";\r\n\r\nexport const BatteryStatus: React.SFC = () => (\r\n  <Subscribe to={[StatusContainer]}>\r\n    {(statusContainer: StatusContainer) => {\r\n      const status = getBatteryStatus(statusContainer.batteryState);\r\n      const description = statusContainer.state.batteryVoltage\r\n        ? `${statusContainer.state.batteryVoltage.toFixed(1)}V`\r\n        : \"Unknown\";\r\n\r\n      return (\r\n        <GridItem status={status} onClick={() => robot.requestVoltage()}>\r\n          <BatteryIcon />\r\n          <Text primary={true}>Battery</Text>\r\n          <Text>{description}</Text>\r\n        </GridItem>\r\n      );\r\n    }}\r\n  </Subscribe>\r\n);\r\n\r\nfunction getBatteryStatus(batteryState: BatteryState): GridItemStatus {\r\n  switch (batteryState) {\r\n    case BatteryState.UNKNOWN:\r\n      return GridItemStatus.BAD;\r\n\r\n    case BatteryState.FULL:\r\n      return GridItemStatus.GOOD;\r\n\r\n    case BatteryState.LOW:\r\n      return GridItemStatus.WARN;\r\n\r\n    case BatteryState.CRITICAL:\r\n      return GridItemStatus.BAD;\r\n\r\n    default:\r\n      return assertUnreachable(batteryState, \"got unexpected battery state\");\r\n  }\r\n}\r\n","export function assertUnreachable(value: never, message: string): never {\r\n  throw new Error(`${message} (${value})`);\r\n}\r\n","export function pad(\r\n  data: string | number,\r\n  length: number,\r\n  padCharacter = \" \"\r\n): string {\r\n  const str = typeof data === \"string\" ? data : data.toString();\r\n\r\n  // return as is if already long enough\r\n  if (str.length >= length) {\r\n    return str;\r\n  }\r\n\r\n  const missingLength = length - str.length;\r\n\r\n  return `${new Array(missingLength + 1).join(padCharacter)}${str}`;\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport type Props = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLElement>,\r\n  HTMLElement\r\n> & {\r\n  scrollToBottom?: boolean;\r\n};\r\n\r\nexport class AutoScroll extends React.Component<Props> {\r\n  private readonly ref = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidUpdate() {\r\n    // return if scrolling to bottom is not requested, default to true\r\n    if (this.props.scrollToBottom === false) {\r\n      return;\r\n    }\r\n\r\n    // get the dom node from the reference\r\n    const el = this.ref.current;\r\n\r\n    // return if element could not be found\r\n    if (!el) {\r\n      console.warn(\"auto-scroll dom node not found\");\r\n\r\n      return;\r\n    }\r\n\r\n    // check whether we're aready near the bottom\r\n    const isNearBottom = el.scrollHeight - el.clientHeight <= el.scrollTop + 50;\r\n\r\n    // only force the scroll if near bottom\r\n    if (isNearBottom) {\r\n      el.scrollTop = el.scrollHeight - el.clientHeight;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // filter out unsupported props\r\n    const { scrollToBottom, ...props } = this.props;\r\n\r\n    return (\r\n      <div {...props} ref={this.ref}>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { LogContainer, MessageType } from \"../containers/LogContainer\";\r\nimport { formatTime } from \"../services/formatTime\";\r\nimport { ElProps, styled } from \"../styled\";\r\n\r\nimport { AutoScroll } from \"./AutoScroll\";\r\nimport { GridItem } from \"./Grid\";\r\nimport { ClearIcon } from \"./Icon\";\r\n\r\nconst StatusGridItem = styled(GridItem)`\r\n  grid-column: 1 / 4;\r\n  font-family: Consolas, \"Courier New\", Courier, monospace;\r\n  display: flex;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst LogWrap = styled(AutoScroll)`\r\n  flex: 1;\r\n  overflow: scroll;\r\n  padding: 8px;\r\n`;\r\n\r\nconst LogEntry = styled.div``;\r\n\r\nconst LogEntryTime = styled.span`\r\n  color: ${props => props.theme.text.secondary};\r\n`;\r\n\r\ninterface LogEntryMessageProps {\r\n  type: MessageType;\r\n}\r\n\r\nconst logEntryTypeColorMap = {\r\n  [MessageType.INFO]: \"#666\",\r\n  [MessageType.RX]: \"#090\",\r\n  [MessageType.TX]: \"#FF8000\",\r\n  [MessageType.ERROR]: \"#900\"\r\n};\r\n\r\nconst LogEntryMessage = styled.span<LogEntryMessageProps>`\r\n  padding-left: 6px;\r\n  border-left: 2px solid ${props => logEntryTypeColorMap[props.type]};\r\n  margin-left: 6px;\r\n`;\r\n\r\nconst LogEntryCount = styled.span`\r\n  display: inline-block;\r\n  padding: 0 4px;\r\n  margin-left: 8px;\r\n  border-radius: 8px;\r\n  background-color: ${props => props.theme.text.primary};\r\n  color: ${props => props.theme.bg.tertiary};\r\n`;\r\n\r\nconst ClearLogButton = styled.div<ElProps>`\r\n  box-sizing: content-box;\r\n  position: absolute;\r\n  bottom: ${props => props.theme.size.gridGap};\r\n  right: ${props => props.theme.size.gridGap};\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 10px;\r\n  background-color: ${props => props.theme.bg.tertiary};\r\n`;\r\n\r\nconst ClearLogIcon = styled(ClearIcon)`\r\n  background-color: ${props => props.theme.text.secondary};\r\n`;\r\n\r\nexport const Log: React.SFC = () => (\r\n  <Subscribe to={[LogContainer]}>\r\n    {(logContainer: LogContainer) => (\r\n      <StatusGridItem>\r\n        <LogWrap>\r\n          {logContainer.state.entries.map(entry => (\r\n            <LogEntry key={entry.id}>\r\n              <LogEntryTime>{formatTime(entry.time)}</LogEntryTime>\r\n              <LogEntryMessage type={entry.type}>\r\n                {entry.message}\r\n              </LogEntryMessage>\r\n              {entry.count > 1 ? (\r\n                <LogEntryCount>{entry.count}</LogEntryCount>\r\n              ) : null}\r\n            </LogEntry>\r\n          ))}\r\n        </LogWrap>\r\n        <ClearLogButton onClick={() => logContainer.clear()}>\r\n          <ClearLogIcon />\r\n        </ClearLogButton>\r\n      </StatusGridItem>\r\n    )}\r\n  </Subscribe>\r\n);\r\n","import { pad } from \"./pad\";\r\n\r\nexport function formatTime(date: Date): string {\r\n  return (\r\n    `${pad(date.getHours(), 2, \"0\")}:` +\r\n    `${pad(date.getMinutes(), 2, \"0\")}:` +\r\n    `${pad(date.getSeconds(), 2, \"0\")}.` +\r\n    `${pad(date.getMilliseconds(), 3, \"0\")}`\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport titleCase from \"title-case\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { StatusContainer } from \"../containers/StatusContainer\";\r\nimport { TransportState } from \"../lib/transport/Transport\";\r\nimport { multiTransport } from \"../services/multiTransport\";\r\nimport { robot } from \"../services/robot\";\r\n\r\nimport { GridItem, GridItemStatus } from \"./Grid\";\r\nimport { NativeIcon, WebsocketIcon } from \"./Icon\";\r\nimport { Text } from \"./Text\";\r\n\r\nexport const TransportStatus: React.SFC = () => (\r\n  <Subscribe to={[StatusContainer]}>\r\n    {(statusContainer: StatusContainer) => {\r\n      const status =\r\n        statusContainer.state.transportState === TransportState.CONNECTED\r\n          ? GridItemStatus.GOOD\r\n          : GridItemStatus.BAD;\r\n      const description =\r\n        statusContainer.state.transportState !== TransportState.CONNECTED ||\r\n        statusContainer.state.remoteIp === undefined\r\n          ? titleCase(statusContainer.state.transportState)\r\n          : statusContainer.state.remoteIp;\r\n\r\n      return (\r\n        <GridItem\r\n          status={status}\r\n          onClick={() =>\r\n            robot.ping(statusContainer.getConnectedSerial() === undefined)\r\n          }\r\n        >\r\n          {multiTransport.getName() === \"Native\" ? (\r\n            <NativeIcon />\r\n          ) : (\r\n            <WebsocketIcon />\r\n          )}\r\n          <Text primary={true}>{multiTransport.getName()}</Text>\r\n          <Text>{description}</Text>\r\n        </GridItem>\r\n      );\r\n    }}\r\n  </Subscribe>\r\n);\r\n","import * as React from \"react\";\r\nimport titleCase from \"title-case\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { SerialType, StatusContainer } from \"../containers/StatusContainer\";\r\n\r\nimport { GridItem, GridItemStatus } from \"./Grid\";\r\nimport { BluetoothIcon, SerialIcon } from \"./Icon\";\r\nimport { Text } from \"./Text\";\r\n\r\nexport const UsbStatus: React.SFC = () => (\r\n  <Subscribe to={[StatusContainer]}>\r\n    {(statusContainer: StatusContainer) => {\r\n      const connectedSerial = statusContainer.getConnectedSerial();\r\n      const status =\r\n        connectedSerial !== undefined\r\n          ? GridItemStatus.GOOD\r\n          : GridItemStatus.BAD;\r\n      const Icon =\r\n        connectedSerial && connectedSerial.type === SerialType.BLUETOOTH\r\n          ? BluetoothIcon\r\n          : SerialIcon;\r\n      const title = connectedSerial ? connectedSerial.type : \"Serial\";\r\n      const description = titleCase(\r\n        connectedSerial ? connectedSerial.state : \"Disconnected\"\r\n      );\r\n\r\n      return (\r\n        <GridItem status={status}>\r\n          <Icon />\r\n          <Text primary={true}>{title}</Text>\r\n          <Text>{description}</Text>\r\n        </GridItem>\r\n      );\r\n    }}\r\n  </Subscribe>\r\n);\r\n","import * as React from \"react\";\r\n\r\nimport { BatteryStatus } from \"../components/BatteryStatus\";\r\nimport { Grid } from \"../components/Grid\";\r\nimport { Log } from \"../components/Log\";\r\nimport { TransportStatus } from \"../components/TransportStatus\";\r\nimport { UsbStatus } from \"../components/UsbStatus\";\r\nimport { View } from \"../components/View\";\r\nimport { styled } from \"../styled\";\r\n\r\nconst StatusGrid = styled(Grid)`\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n  grid-template-rows: 100px;\r\n`;\r\n\r\n// TODO: add target and real speed (compare %?)\r\n// TODO: add odometry (visualize path?)\r\n// TODO: add lidar (tiny map?)\r\n// TODO: add buttons (state for each?)\r\nexport const StatusView: React.SFC = () => (\r\n  <View grid={true}>\r\n    <StatusGrid>\r\n      <UsbStatus />\r\n      <TransportStatus />\r\n      <BatteryStatus />\r\n      <Log />\r\n    </StatusGrid>\r\n  </View>\r\n);\r\n","import * as React from \"react\";\r\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { Provider } from \"unstated\";\r\n\r\nimport { Hub } from \"./components/Hub\";\r\nimport { MainMenu } from \"./components/MainMenu\";\r\nimport { GlobalStyle, styled, theme } from \"./styled\";\r\nimport { BotView } from \"./views/BotView\";\r\nimport { MapView } from \"./views/MapView\";\r\nimport { RemoteView } from \"./views/RemoteView\";\r\nimport { SettingsView } from \"./views/SettingsView\";\r\nimport { StatusView } from \"./views/StatusView\";\r\n\r\nconst AppWrap = styled.div`\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  animation: ${props => props.theme.animation.fadeIn} 1000ms;\r\n`;\r\n\r\nexport class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <Provider>\r\n          <GlobalStyle />\r\n          <Hub />\r\n          <BrowserRouter>\r\n            <AppWrap>\r\n              <Switch>\r\n                <Route path=\"/status\" component={StatusView} />\r\n                <Route path=\"/map\" component={MapView} />\r\n                <Route path=\"/remote\" component={RemoteView} />\r\n                <Route path=\"/bot\" component={BotView} />\r\n                <Route path=\"/settings\" component={SettingsView} />\r\n                <Route exact={true} path=\"/\">\r\n                  <Redirect to=\"/status\" />\r\n                </Route>\r\n              </Switch>\r\n              <MainMenu />\r\n            </AppWrap>\r\n          </BrowserRouter>\r\n        </Provider>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"reset-css\";\n\nimport { App } from \"./App\";\n\n// render the application\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}