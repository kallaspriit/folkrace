{"version":3,"sources":["styled.ts","components/Icon.tsx","components/Text.tsx","components/MainMenu.tsx","containers/ButtonContainer.ts","containers/LogContainer.ts","containers/LidarContainer.ts","lib/web-socket-client/index.ts","containers/MeasurementsContainer.ts","containers/OdometryContainer.ts","containers/RobotContainer.ts","config.ts","containers/StatusContainer.ts","handlers/handleBeaconCommand.ts","handlers/handleButtonCommand.ts","handlers/handleCurrentCommand.ts","handlers/handleEncoderCommand.ts","handlers/handleGetVoltageCommand.ts","handlers/handleIpCommand.ts","handlers/handleLidarCommand.ts","handlers/handleMeasurementCommand.ts","lib/robot/index.ts","services/webSocketClient.ts","services/robot.ts","handlers/handlePongCommand.ts","handlers/handleResetCommand.ts","handlers/handleSerialCommand.ts","handlers/handleSpeedCommand.ts","handlers/handleUsbCommand.ts","services/log.ts","lib/javascript-interface/index.ts","services/javascriptInterface.ts","components/Router.tsx","components/View.tsx","components/Grid.tsx","views/BotView.tsx","views/MapView.tsx","components/Joystick.tsx","lib/tracked-vehicle-kinematics/index.ts","lib/remote-controller/index.ts","views/RemoteView.tsx","views/SettingsView.tsx","components/BatteryStatus.tsx","services/assertUnreachable.ts","services/pad.ts","components/AutoScroll.tsx","components/Log.tsx","services/formatTime.ts","components/UsbStatus.tsx","components/WebSocketStatus.tsx","views/StatusView.tsx","App.tsx","index.tsx"],"names":["theme","text","primary","secondary","bg","tertiary","lighten","quaternary","good","warn","bad","size","darkerLighterPercentage","gridGap","menuHeight","animation","fadeIn","keyframes","_templateObject","pulse","color","_templateObject2","styled","baseStyled","GlobalStyle","createGlobalStyle","_templateObject3","Icon","i","Icon_templateObject","props","width","height","url","StatusIcon","react","Icon_Icon","Object","assign","MapIcon","BotIcon","RemoteIcon","SettingsIcon","BluetoothIcon","SerialIcon","WebSocketIcon","BatteryIcon","Text","div","Text_templateObject","Button","ButtonState","Wrap","MainMenu_templateObject","Items","ul","MainMenu_templateObject2","Item","li","MainMenu_templateObject3","Link","NavLink","_templateObject4","darken","Label","_templateObject5","MainMenu","to","activeClassName","Icon_StatusIcon","Icon_MapIcon","Icon_BotIcon","Icon_RemoteIcon","Icon_SettingsIcon","MessageType","ButtonContainer","_Container","_getPrototypeOf2","_this$state","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","defineProperty","START","UNKNOWN","LEFT","RIGHT","inherits","createClass","key","value","button","setState","Container","LidarContainer","isStarted","isValid","targetRpm","currentRpm","motorPwm","objectSpread","WebSocketState","LogContainer","entries","lastId","message","_this2","avoidDuplicate","undefined","previousState","lastEntry","type","resolveMessageType","toConsumableArray","slice","id","toString","time","Date","count","shift","catch","error","console","substr","RX","TX","ERROR","INFO","MeasurementsContainer","measurements","measurement","OdometryContainer","left","right","RobotContainer","targetSpeed","current","config","webSocket","host","localStorage","webSocketHost","port","webSocketPort","parseInt","useSSL","reconnectInterval","rules","battery","low","critical","vehicle","trackWidth","maxSpeed","wheelDiameter","encoderCountsPerRotation","gearboxRatio","speedUpdateInterval","SerialType","SerialState","BatteryState","WebSocketClient","options","connectionState","DISCONNECTED","listeners","wasConnected","log","dummyLogger","get","listener","push","filter","item","addNewLine","ws","CONNECTED","forEach","onSendMessage","send","info","RECONNECTING","CONNECTING","onConnecting","WebSocket","onopen","event","onOpen","onclose","logDetails","code","reason","wasClean","setTimeout","connect","onClose","onerror","onError","onmessage","onMessage","data","newState","_this3","oldState","onStateChanged","StatusContainer","serials","BLUETOOTH","deviceName","USB","webSocketState","typeKey","keys","find","typeName","update","$merge","batteryVoltage","remoteIp","loopFrequency","loopTimeUs","lastBeaconTime","lastResetTime","map","serialName","serial","voltage","CRITICAL","LOW","FULL","handleBeaconCommand","_ref","status","durationMs","cycleCount","setLoopStatistics","handleButtonCommand","name","PRESSED","RELEASED","setButtonState","toUpperCase","handleCurrentCommand","robot","setCurrent","handleEncoderCommand","odometry","handleVoltageCommand","parseFloat","setBatteryVoltage","handleIpCommand","setOffline","setRemoteIp","handleLidarCommand","lidar","handleMeasurementCommand","add","angle","distance","quality","date","Robot","webSocketClient","transportOnly","pingSentTime","now","command","join","handlePongCommand","pingTimeTaken","addEntry","handleResetCommand","_args","setResetReceived","handleSerialCommand","_x","_x2","_handleSerialCommand","_callee","serialType","serialState","serialDeviceName","connectedSerial","regenerator_default","a","wrap","_context","prev","next","setSerialState","getConnectedSerial","requestState","stop","handleSpeedCommand","setTargetSpeed","handleUsbCommand","_containerMap","vendorId","productId","productName","logListeners","MockJavascriptInterface","javascriptInterface","JavascriptInterface","window","isAvailable","app","receive","onMessageReceived","Router","_React$Component","isInitialized","webSocketCommandHandlers","ip","usb","reset","pong","e","b","m","s","unstated_es","setWebSocketState","subscribe","_wasConnected","_ws","_event","handleWebSocketMessage","_oldState","_message$split","split","slicedToArray","containers","_message$split3","_message$split4","toArray","handleWebSocketCommand","handler","React","GridItemStatus","View","View_templateObject","grid","BotView","MapView","Grid","Grid_templateObject","gridItemStatusColorMap","_gridItemStatusColorM","GOOD","WARN","BAD","GridItem","Grid_templateObject2","css","Grid_templateObject3","Grid_templateObject4","Grid_templateObject5","Joystick","ref","el","manager","nipplejs","zone","position","top","mode","lockX","x","lockY","y","onEvent","bind","on","nipple","off","className","TrackedVehicleKinematics","speed","omega","limit","targetEncoderCountPerSecond","Math","PI","floor","speeds","maxRequestedSpeedMagnitude","max","abs","normalizationFactor","min","getSpeedEncoderCount","RemoteController","kinematics","scheduleUpdateMotorSpeeds","throttle","updateMotorSpeeds","motorSpeeds","calculateMotorSpeeds","encoderSpeeds","getEncoderSpeeds","setSpeed","JoystickGrid","RemoteView_templateObject","RemoteView","remoteController","Joystick_Joystick","onJoystickEvent","indexOf","isMoveEvent","xPos","sin","radian","yPos","cos","setOmega","Error","SettingsView","onClick","location","href","BatteryStatus","statusContainer","batteryState","assertUnreachable","getBatteryStatus","description","toFixed","requestVoltage","Icon_BatteryIcon","pad","padCharacter","str","missingLength","AutoScroll","scrollToBottom","scrollHeight","clientHeight","scrollTop","_this$props","objectWithoutProperties","children","StatusGridItem","Log_templateObject","LogWrap","Log_templateObject2","LogEntry","Log_templateObject3","LogEntryTime","span","Log_templateObject4","logEntryTypeColorMap","_logEntryTypeColorMap","LogEntryMessage","Log_templateObject5","LogEntryCount","_templateObject6","ClearLogButton","_templateObject7","ClearLogIcon","_templateObject8","Log","logContainer","entry","getHours","getMinutes","getSeconds","getMilliseconds","clear","UsbStatus","title","titleCase","WebSocketStatus","ping","Icon_WebSocketIcon","StatusGrid","StatusView_templateObject","StatusView","UsbStatus_UsbStatus","WebSocketStatus_WebSocketStatus","BatteryStatus_BatteryStatus","Log_Log","AppWrap","App_templateObject","App","styled_components_browser_esm","Router_Router","BrowserRouter","Switch","Route","path","component","exact","Redirect","MainMenu_MainMenu","ReactDOM","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.1a3f2828.chunk.js","sourcesContent":["import { lighten } from \"polished\";\r\nimport baseStyled, {\r\n  createGlobalStyle,\r\n  keyframes,\r\n  ThemedStyledInterface\r\n} from \"styled-components\";\r\n\r\n// common visual configuration used by various components\r\nexport const theme = {\r\n  text: {\r\n    primary: \"#f0f0f0\",\r\n    secondary: \"#969696\"\r\n  },\r\n  bg: {\r\n    primary: \"#cc3333\",\r\n    secondary: \"#282828\",\r\n    tertiary: lighten(0.05, \"#282828\"),\r\n    quaternary: \"#087099\",\r\n    good: \"#009900\",\r\n    warn: \"#999900\",\r\n    bad: \"#990000\"\r\n  },\r\n  size: {\r\n    darkerLighterPercentage: 0.25,\r\n    gridGap: \"2px\",\r\n    menuHeight: \"64px\"\r\n  },\r\n  animation: {\r\n    fadeIn: keyframes`\r\n      from {\r\n        opacity: 0;\r\n      }\r\n      to {\r\n        opacity: 1;\r\n      }\r\n    `,\r\n    pulse: (color: string) => keyframes`\r\n      0% {\r\n        background: ${color};\r\n      }\r\n      50% {\r\n        background: ${lighten(0.25, color)};\r\n      }\r\n      100% {\r\n        background: ${color};\r\n      }\r\n    `\r\n  }\r\n};\r\n\r\n// use \"styled\" from this file not the package directly\r\nexport type Theme = typeof theme;\r\nexport const styled = baseStyled as ThemedStyledInterface<Theme>;\r\n\r\n// common html element props such as onClick etc\r\nexport type ElProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\n\r\n// these global styles get injected in the document above all else\r\nexport const GlobalStyle = createGlobalStyle`\r\n  // main font\r\n  @font-face {\r\n    font-family: \"heebo-regular\";\r\n    src: url(\"fonts/Heebo-Regular.ttf\");\r\n    font-weight: normal;\r\n    font-style: normal;\r\n  }\r\n\r\n  // default to using border box sizing\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n  *,\r\n  *:before,\r\n  *:after {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  // set body styles\r\n  body,\r\n  html {\r\n    height: 100;\r\n    padding: 0;\r\n    margin: 0;\r\n    font-family: \"heebo-regular\";\r\n    color: ${theme.text.primary};\r\n    background-color: ${theme.bg.secondary};\r\n  }\r\n`;\r\n","import * as React from \"react\";\r\n\r\nimport { styled } from \"../styled\";\r\n\r\nexport interface IconProps {\r\n  url: string;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport const Icon = styled.i<IconProps>`\r\n  display: block;\r\n  width: ${props => props.width}px;\r\n  height: ${props => props.height}px;\r\n  mask-image: url(${props => props.url});\r\n  mask-size: ${props => props.height}px ${props => props.width}px;\r\n  mask-repeat: no-repeat;\r\n  mask-position: center center;\r\n  background-color: ${props => props.theme.text.primary};\r\n`;\r\n\r\nexport const StatusIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/status.svg\" width={37} height={32} />\r\n);\r\n\r\nexport const MapIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/map.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const BotIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/bot.svg\" width={27} height={32} />\r\n);\r\n\r\nexport const RemoteIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/remote.svg\" width={44} height={32} />\r\n);\r\n\r\nexport const SettingsIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/settings.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const BluetoothIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/bluetooth.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const SerialIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/serial.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const WebSocketIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/web-socket.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const BatteryIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/battery.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const ClearIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/clear.svg\" width={32} height={32} />\r\n);\r\n","import { styled } from \"../styled\";\r\n\r\nexport interface TextProps {\r\n  primary?: boolean;\r\n}\r\n\r\nexport const Text = styled.div<TextProps>`\r\n  text-align: center;\r\n  font-variant: ${props => (props.primary ? \"all-small-caps\" : \"normal\")};\r\n  line-height: 1.2em;\r\n`;\r\n","import { darken } from \"polished\";\r\nimport * as React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { styled } from \"../styled\";\r\n\r\nimport { BotIcon, MapIcon, RemoteIcon, SettingsIcon, StatusIcon } from \"./Icon\";\r\nimport { Text } from \"./Text\";\r\n\r\nconst Wrap = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  background-color: #000;\r\n`;\r\n\r\nconst Items = styled.ul`\r\n  display: flex;\r\n  flex-direction: row;\r\n  height: ${props => props.theme.size.menuHeight};\r\n  flex: 1;\r\n  max-width: 600px;\r\n`;\r\n\r\nconst Item = styled.li`\r\n  height: 100%;\r\n  text-align: center;\r\n  font-variant: small-caps;\r\n  text-transform: uppercase;\r\n  font-size: 0.8em;\r\n  flex: 1;\r\n`;\r\n\r\nconst Link = styled(NavLink)`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  text-decoration: none;\r\n  color: ${props =>\r\n    darken(props.theme.size.darkerLighterPercentage, props.theme.text.primary)}\r\n  background-color: rgba(0, 0, 0, 0);\r\n  transition: background-color 300ms;\r\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n\r\n  &.active-main-menu-item {\r\n    background-color: ${props => props.theme.bg.secondary};\r\n    color: ${props => props.theme.text.primary}\r\n  }\r\n`;\r\n\r\nconst Label = styled(Text)`\r\n  padding-top: 4px;\r\n`;\r\n\r\nexport const MainMenu: React.SFC<{}> = () => (\r\n  <Wrap>\r\n    <Items>\r\n      <Item>\r\n        <Link to=\"/status\" activeClassName=\"active-main-menu-item\">\r\n          <StatusIcon />\r\n          <Label>Status</Label>\r\n        </Link>\r\n      </Item>\r\n      <Item>\r\n        <Link to=\"/map\" activeClassName=\"active-main-menu-item\">\r\n          <MapIcon />\r\n          <Label>Map</Label>\r\n        </Link>\r\n      </Item>\r\n      <Item>\r\n        <Link to=\"/bot\" activeClassName=\"active-main-menu-item\">\r\n          <BotIcon />\r\n          <Label>Bot</Label>\r\n        </Link>\r\n      </Item>\r\n      <Item>\r\n        <Link to=\"/remote\" activeClassName=\"active-main-menu-item\">\r\n          <RemoteIcon />\r\n          <Label>Remote</Label>\r\n        </Link>\r\n      </Item>\r\n      <Item>\r\n        <Link to=\"/settings\" activeClassName=\"active-main-menu-item\">\r\n          <SettingsIcon />\r\n          <Label>Settings</Label>\r\n        </Link>\r\n      </Item>\r\n    </Items>\r\n  </Wrap>\r\n);\r\n","import { Container } from \"unstated\";\r\n\r\nexport enum Button {\r\n  START = \"START\",\r\n  LEFT = \"LEFT\",\r\n  RIGHT = \"RIGHT\"\r\n}\r\n\r\nexport enum ButtonState {\r\n  UNKNOWN = \"UNKNOWN\",\r\n  PRESSED = \"PRESSED\",\r\n  RELEASED = \"RELEASED\"\r\n}\r\n\r\nexport type State = { readonly [key in keyof typeof Button]: ButtonState };\r\n\r\nexport class ButtonContainer extends Container<State> {\r\n  readonly state: State = {\r\n    [Button.START]: ButtonState.UNKNOWN,\r\n    [Button.LEFT]: ButtonState.UNKNOWN,\r\n    [Button.RIGHT]: ButtonState.UNKNOWN\r\n  };\r\n\r\n  setButtonState(button: Button, state: ButtonState) {\r\n    return this.setState({\r\n      [button]: state\r\n    });\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport enum MessageType {\r\n  INFO = \"INFO\",\r\n  ERROR = \"ERROR\",\r\n  RX = \"RX\",\r\n  TX = \"TX\"\r\n}\r\n\r\nexport interface LogEntry {\r\n  readonly id: string;\r\n  readonly time: Date;\r\n  readonly message: string;\r\n  readonly type: MessageType;\r\n  readonly count: number;\r\n}\r\n\r\nexport interface LogState {\r\n  readonly entries: LogEntry[];\r\n}\r\n\r\nexport const MAX_LOG_ENTRY_COUNT = 200;\r\n\r\nexport class LogContainer extends Container<LogState> {\r\n  readonly state: LogState = {\r\n    entries: []\r\n  };\r\n\r\n  private lastId = 0;\r\n\r\n  addEntry(message: string, avoidDuplicate = true) {\r\n    // update state (use the callback syntax not to miss any updates if called in series)\r\n    this.setState(previousState => {\r\n      const lastEntry =\r\n        this.state.entries.length > 0\r\n          ? this.state.entries[this.state.entries.length - 1]\r\n          : null;\r\n      const type = this.resolveMessageType(message);\r\n\r\n      // skip the message if requested not to add the same message twice in a row\r\n      if (lastEntry !== null && avoidDuplicate) {\r\n        // check whether the latest message is the same as last\r\n        if (message === lastEntry.message) {\r\n          const updatedEntries: LogEntry[] = [\r\n            // remove last entry\r\n            ...previousState.entries.slice(0, this.state.entries.length - 1),\r\n            // add it again with updated time\r\n            {\r\n              id: (this.lastId++).toString(),\r\n              time: new Date(),\r\n              message,\r\n              type,\r\n              count: lastEntry.count + 1\r\n            }\r\n          ];\r\n\r\n          return {\r\n            entries: updatedEntries\r\n          };\r\n        }\r\n      }\r\n\r\n      // appends the log entry\r\n      const entries: LogEntry[] = [\r\n        ...previousState.entries,\r\n        {\r\n          id: (this.lastId++).toString(),\r\n          time: new Date(),\r\n          message,\r\n          type,\r\n          count: 1\r\n        }\r\n      ];\r\n\r\n      // limit the number of entries\r\n      while (entries.length > MAX_LOG_ENTRY_COUNT) {\r\n        entries.shift();\r\n      }\r\n\r\n      return {\r\n        entries\r\n      };\r\n    }).catch(error => console.error(error));\r\n  }\r\n\r\n  clear() {\r\n    this.setState({\r\n      entries: []\r\n    }).catch(error => console.error(error));\r\n  }\r\n\r\n  private resolveMessageType(message: string): MessageType {\r\n    const firstCharacter = message.substr(0, 1);\r\n\r\n    switch (firstCharacter) {\r\n      case \"<\":\r\n        return MessageType.RX;\r\n\r\n      case \">\":\r\n        return MessageType.TX;\r\n\r\n      case \"@\":\r\n        return MessageType.ERROR;\r\n\r\n      case \"#\":\r\n        return MessageType.INFO;\r\n\r\n      default:\r\n        return MessageType.INFO;\r\n    }\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface State {\r\n  readonly isStarted: boolean;\r\n  readonly isValid: boolean;\r\n  readonly targetRpm: number;\r\n  readonly currentRpm: number;\r\n  readonly motorPwm: number;\r\n}\r\n\r\nexport class LidarContainer extends Container<State> {\r\n  readonly state: State = {\r\n    isStarted: false,\r\n    isValid: false,\r\n    targetRpm: 0,\r\n    currentRpm: 0,\r\n    motorPwm: 0\r\n  };\r\n\r\n  update(state: State) {\r\n    return this.setState({\r\n      ...state\r\n    });\r\n  }\r\n}\r\n","import { dummyLogger, Logger } from \"ts-log\";\r\n\r\nexport interface WebSocketClientListener {\r\n  onConnecting(ws: WebSocketClient, wasConnected: boolean): void;\r\n  onOpen(ws: WebSocketClient, event: Event): void;\r\n  onClose(ws: WebSocketClient, event: CloseEvent, wasConnected: boolean): void;\r\n  onError(ws: WebSocketClient, event: Event, wasConnected: boolean): void;\r\n  onMessage(ws: WebSocketClient, message: string): void;\r\n  onStateChanged(\r\n    ws: WebSocketClient,\r\n    newState: WebSocketState,\r\n    oldState: WebSocketState\r\n  ): void;\r\n  onSendMessage(ws: WebSocketClient, e: string): void;\r\n}\r\n\r\nexport interface WebSocketClientOptions {\r\n  host: string;\r\n  port: number;\r\n  useSSL?: boolean;\r\n  reconnectInterval?: number;\r\n  log?: Logger;\r\n}\r\n\r\nexport enum WebSocketState {\r\n  DISCONNECTED = \"DISCONNECTED\",\r\n  CONNECTING = \"CONNECTING\",\r\n  RECONNECTING = \"RECONNECTING\",\r\n  CONNECTED = \"CONNECTED\"\r\n}\r\n\r\nexport class WebSocketClient {\r\n  url: string;\r\n  get state() {\r\n    return this.connectionState;\r\n  }\r\n  private connectionState: WebSocketState = WebSocketState.DISCONNECTED;\r\n  private listeners: WebSocketClientListener[] = [];\r\n  private readonly options: Required<WebSocketClientOptions>;\r\n  private readonly log: Logger;\r\n  private wasConnected = false;\r\n  private ws?: WebSocket;\r\n\r\n  constructor(options: WebSocketClientOptions) {\r\n    this.options = {\r\n      useSSL: false,\r\n      log: dummyLogger,\r\n      reconnectInterval: 1000,\r\n      ...options\r\n    };\r\n    this.log = this.options.log;\r\n    this.url = `${this.options.useSSL ? \"wss\" : \"ws\"}://${this.options.host}:${\r\n      this.options.port\r\n    }`;\r\n  }\r\n\r\n  subscribe(listener: WebSocketClientListener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  unsubscribe(listener: WebSocketClientListener) {\r\n    this.listeners = this.listeners.filter(item => item !== listener);\r\n  }\r\n\r\n  send(message: string, addNewLine = true) {\r\n    // we can only send messages if we're connected\r\n    if (!this.ws || this.state !== WebSocketState.CONNECTED) {\r\n      this.log.warn(\r\n        `sending message \"${message}\" requested but web-socket is ${\r\n          this.connectionState\r\n        }`\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    // notify the listeners\r\n    this.listeners.forEach(listener => listener.onSendMessage(this, message));\r\n\r\n    // send the message\r\n    this.ws.send(`${message}${addNewLine ? \"\\n\" : \"\"}`);\r\n  }\r\n\r\n  toast(message: string) {\r\n    this.send(`!toast:${message}`);\r\n  }\r\n\r\n  connect() {\r\n    this.log.info(`connecting to web-socket server at ${this.url}`);\r\n\r\n    // update state\r\n    this.setState(\r\n      this.wasConnected\r\n        ? WebSocketState.RECONNECTING\r\n        : WebSocketState.CONNECTING\r\n    );\r\n\r\n    // notify the listeners\r\n    this.listeners.forEach(listener =>\r\n      listener.onConnecting(this, this.wasConnected)\r\n    );\r\n\r\n    // attempt to open web-socket connection\r\n    this.ws = new WebSocket(this.url);\r\n\r\n    // handle open event\r\n    this.ws.onopen = event => {\r\n      this.log.info(\"established web-socket connection\");\r\n\r\n      this.wasConnected = true;\r\n\r\n      // update state\r\n      this.setState(WebSocketState.CONNECTED);\r\n\r\n      // notify the listeners\r\n      this.listeners.forEach(listener => listener.onOpen(this, event));\r\n    };\r\n\r\n    // handle close event\r\n    this.ws.onclose = event => {\r\n      const logDetails = `code: ${event.code}, reason: ${\r\n        event.reason\r\n      }, was clean: ${event.wasClean ? \"yes\" : \"no\"}`;\r\n\r\n      if (this.wasConnected) {\r\n        this.log.warn(`connection to web-socket was lost (${logDetails})`);\r\n      } else {\r\n        this.log.warn(`connecting to web-socket failed (${logDetails})`);\r\n      }\r\n\r\n      // update state\r\n      this.setState(WebSocketState.DISCONNECTED);\r\n\r\n      // attempt to reconnect\r\n      setTimeout(() => {\r\n        this.connect();\r\n      }, this.options.reconnectInterval);\r\n\r\n      // notify the listeners\r\n      this.listeners.forEach(listener =>\r\n        listener.onClose(this, event, this.wasConnected)\r\n      );\r\n    };\r\n\r\n    // handle error event\r\n    this.ws.onerror = event => {\r\n      this.log.warn(\"got web-socket error\");\r\n\r\n      // notify the listeners\r\n      this.listeners.forEach(listener =>\r\n        listener.onError(this, event, this.wasConnected)\r\n      );\r\n    };\r\n\r\n    // handle message event\r\n    this.ws.onmessage = event => {\r\n      // notify the listeners\r\n      this.listeners.forEach(listener => listener.onMessage(this, event.data));\r\n    };\r\n  }\r\n\r\n  private setState(newState: WebSocketState) {\r\n    // return if state has not changed\r\n    if (newState === this.connectionState) {\r\n      return;\r\n    }\r\n\r\n    const oldState = this.connectionState;\r\n\r\n    this.connectionState = newState;\r\n\r\n    // notify the listeners\r\n    this.listeners.forEach(listener =>\r\n      listener.onStateChanged(this, newState, oldState)\r\n    );\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface LidarMeasurement {\r\n  readonly angle: number;\r\n  readonly distance: number;\r\n  readonly quality: number;\r\n  readonly date: Date;\r\n}\r\n\r\nexport interface State {\r\n  readonly measurements: LidarMeasurement[];\r\n}\r\n\r\nexport class MeasurementsContainer extends Container<State> {\r\n  readonly state: State = {\r\n    measurements: []\r\n  };\r\n\r\n  add(measurement: LidarMeasurement) {\r\n    return this.setState({\r\n      measurements: [...this.state.measurements, measurement]\r\n    });\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface State {\r\n  readonly left: number;\r\n  readonly right: number;\r\n}\r\n\r\nexport class OdometryContainer extends Container<State> {\r\n  readonly state: State = {\r\n    left: 0,\r\n    right: 0\r\n  };\r\n\r\n  update(left: number, right: number) {\r\n    return this.setState({\r\n      left,\r\n      right\r\n    });\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface State {\r\n  readonly targetSpeed: {\r\n    readonly left: number;\r\n    readonly right: number;\r\n  };\r\n  readonly current: {\r\n    readonly left: number;\r\n    readonly right: number;\r\n  };\r\n}\r\n\r\nexport class RobotContainer extends Container<State> {\r\n  readonly state: State = {\r\n    targetSpeed: {\r\n      left: 0,\r\n      right: 0\r\n    },\r\n    current: {\r\n      left: 0,\r\n      right: 0\r\n    }\r\n  };\r\n\r\n  setTargetSpeed(left: number, right: number) {\r\n    return this.setState({\r\n      targetSpeed: {\r\n        left,\r\n        right\r\n      }\r\n    });\r\n  }\r\n\r\n  setCurrent(left: number, right: number) {\r\n    return this.setState({\r\n      current: {\r\n        left,\r\n        right\r\n      }\r\n    });\r\n  }\r\n}\r\n","// import { TrackedVehicleOptions } from \"./lib/tracked-vehicle-kinematics\";\r\n// import { WebSocketClientOptions } from \"./lib/web-socket-client/index\";\r\n\r\n// export interface RulesConfig {\r\n//   battery: {\r\n//     low: number;\r\n//     critical: number;\r\n//   };\r\n// }\r\n\r\n// export interface Config {\r\n//   webSocket: WebSocketClientOptions;\r\n//   rules: RulesConfig;\r\n//   vehicle: TrackedVehicleOptions;\r\n// }\r\n\r\nexport const config = {\r\n  webSocket: {\r\n    // allow overriding web-socket options via local storage\r\n    host:\r\n      // process.env.NODE_ENV === \"development\" &&\r\n      localStorage.webSocketHost !== undefined\r\n        ? localStorage.webSocketHost\r\n        : \"127.0.0.1\",\r\n    port:\r\n      localStorage.webSocketPort !== undefined\r\n        ? parseInt(localStorage.webSocketPort, 10)\r\n        : 8000,\r\n    useSSL: false,\r\n    reconnectInterval: 3000\r\n  },\r\n  rules: {\r\n    battery: {\r\n      low: 15.0,\r\n      critical: 13.5\r\n    }\r\n  },\r\n  vehicle: {\r\n    trackWidth: 0.15, // meters\r\n    maxSpeed: 1, // meters per second\r\n    wheelDiameter: 0.039, // meters\r\n    encoderCountsPerRotation: 20, // encoder pulse count per revolution\r\n    gearboxRatio: 25, // 25/1 gearbox ratio\r\n    speedUpdateInterval: 50 // 20Hz\r\n  }\r\n};\r\n","import update from \"immutability-helper\";\r\nimport { Container } from \"unstated\";\r\n\r\nimport { config } from \"../config\";\r\nimport { WebSocketState } from \"../lib/web-socket-client/index\";\r\n\r\nexport enum SerialType {\r\n  USB = \"usb\",\r\n  BLUETOOTH = \"bluetooth\"\r\n}\r\n\r\nexport enum SerialState {\r\n  CONNECTING = \"CONNECTING\",\r\n  CONNECTED = \"CONNECTED\",\r\n  DISCONNECTED = \"DISCONNECTED\",\r\n  NOT_SUPPORTED = \"NOT_SUPPORTED\",\r\n  DEVICE_NOT_FOUND = \"DEVICE_NOT_FOUND\",\r\n  DISABLED = \"DISABLED\"\r\n}\r\n\r\nexport interface Serial {\r\n  readonly type: SerialType;\r\n  readonly state: SerialState;\r\n  readonly deviceName?: string;\r\n}\r\n\r\nexport type SerialsMap = { readonly [type in keyof typeof SerialType]: Serial };\r\n\r\nexport enum BatteryState {\r\n  UNKNOWN = \"UNKNOWN\",\r\n  FULL = \"FULL\",\r\n  LOW = \"LOW\",\r\n  CRITICAL = \"CRITICAL\"\r\n}\r\n\r\nexport interface State {\r\n  readonly webSocketState: WebSocketState;\r\n  readonly serials: SerialsMap;\r\n  readonly batteryVoltage?: number;\r\n  readonly remoteIp?: string;\r\n  readonly lastBeaconTime?: Date;\r\n  readonly lastResetTime?: Date;\r\n  readonly loopFrequency?: number;\r\n  readonly loopTimeUs?: number;\r\n}\r\n\r\nexport class StatusContainer extends Container<State> {\r\n  readonly state: State = {\r\n    serials: {\r\n      BLUETOOTH: {\r\n        type: SerialType.BLUETOOTH,\r\n        state: SerialState.DISCONNECTED,\r\n        deviceName: undefined\r\n      },\r\n      USB: {\r\n        type: SerialType.USB,\r\n        state: SerialState.DISCONNECTED,\r\n        deviceName: undefined\r\n      }\r\n    },\r\n    webSocketState: WebSocketState.DISCONNECTED\r\n  };\r\n\r\n  setSerialState(type: SerialType, state: SerialState, deviceName?: string) {\r\n    const typeKey = Object.keys(SerialType).find(\r\n      typeName => SerialType[typeName as keyof typeof SerialType] === type\r\n    ) as keyof typeof SerialType;\r\n\r\n    // update serial state\r\n    return this.setState(\r\n      update(this.state, {\r\n        serials: {\r\n          [typeKey]: { $merge: { state, deviceName } }\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  setWebSocketState(newState: WebSocketState) {\r\n    return this.setState({\r\n      webSocketState: newState\r\n    });\r\n  }\r\n\r\n  setBatteryVoltage(batteryVoltage: number | undefined) {\r\n    return this.setState({\r\n      batteryVoltage\r\n    });\r\n  }\r\n\r\n  setRemoteIp(remoteIp: string) {\r\n    return this.setState({\r\n      remoteIp\r\n    });\r\n  }\r\n\r\n  setOffline() {\r\n    return this.setState({\r\n      remoteIp: undefined\r\n    });\r\n  }\r\n\r\n  setLoopStatistics(loopFrequency: number, loopTimeUs: number) {\r\n    return this.setState({\r\n      lastBeaconTime: new Date(),\r\n      loopFrequency,\r\n      loopTimeUs\r\n    });\r\n  }\r\n\r\n  setResetReceived() {\r\n    return this.setState({\r\n      lastResetTime: new Date()\r\n    });\r\n  }\r\n\r\n  getConnectedSerial(): Serial | undefined {\r\n    const serialNames = Object.keys(\r\n      this.state.serials\r\n    ) as (keyof typeof SerialType)[];\r\n    const connectedSerial = serialNames\r\n      .map(serialName => this.state.serials[serialName])\r\n      .find(serial => serial.state === SerialState.CONNECTED);\r\n\r\n    return connectedSerial;\r\n  }\r\n\r\n  get batteryState(): BatteryState {\r\n    const voltage = this.state.batteryVoltage;\r\n\r\n    if (voltage === undefined) {\r\n      return BatteryState.UNKNOWN;\r\n    }\r\n\r\n    if (voltage <= config.rules.battery.critical) {\r\n      return BatteryState.CRITICAL;\r\n    } else if (voltage <= config.rules.battery.low) {\r\n      return BatteryState.LOW;\r\n    }\r\n\r\n    return BatteryState.FULL;\r\n  }\r\n}\r\n","import { ContainerMap } from \"../components/Router\";\r\n\r\nexport function handleBeaconCommand(args: string[], { status }: ContainerMap) {\r\n  const durationMs = parseInt(args[0], 10);\r\n  const cycleCount = parseInt(args[1], 10);\r\n  const loopFrequency = (cycleCount / durationMs) * 1000;\r\n  const loopTimeUs = (durationMs / cycleCount) * 1000;\r\n\r\n  void status.setLoopStatistics(loopFrequency, loopTimeUs);\r\n}\r\n","import { ContainerMap } from \"../components/Router\";\r\nimport { Button, ButtonState } from \"../containers/ButtonContainer\";\r\n\r\nexport function handleButtonCommand(args: string[], { button }: ContainerMap) {\r\n  const name = args[0];\r\n  const state =\r\n    parseInt(args[1], 10) === 0 ? ButtonState.PRESSED : ButtonState.RELEASED;\r\n\r\n  void button.setButtonState(name.toUpperCase() as Button, state);\r\n}\r\n","import { ContainerMap } from \"../components/Router\";\r\n\r\nexport function handleCurrentCommand(args: string[], { robot }: ContainerMap) {\r\n  const left = parseInt(args[0], 10);\r\n  const right = parseInt(args[1], 10);\r\n\r\n  void robot.setCurrent(left, right);\r\n}\r\n","import { ContainerMap } from \"../components/Router\";\r\n\r\nexport function handleEncoderCommand(\r\n  args: string[],\r\n  { odometry }: ContainerMap\r\n) {\r\n  const left = parseInt(args[0], 10);\r\n  const right = parseInt(args[1], 10);\r\n\r\n  void odometry.update(left, right);\r\n}\r\n","import { ContainerMap } from \"../components/Router\";\r\n\r\nexport function handleVoltageCommand(args: string[], { status }: ContainerMap) {\r\n  const voltage = parseFloat(args[0]);\r\n\r\n  void status.setBatteryVoltage(voltage);\r\n}\r\n","import { ContainerMap } from \"../components/Router\";\r\n\r\nexport function handleIpCommand(args: string[], { status }: ContainerMap) {\r\n  const remoteIp = args[0];\r\n  const isOffline = remoteIp === \"null\";\r\n\r\n  if (!isOffline) {\r\n    void status.setRemoteIp(remoteIp);\r\n  } else {\r\n    void status.setOffline();\r\n  }\r\n}\r\n","import { ContainerMap } from \"../components/Router\";\r\n\r\nexport function handleLidarCommand(args: string[], { lidar }: ContainerMap) {\r\n  const isStarted = parseInt(args[0], 10) === 1;\r\n  const isValid = parseInt(args[1], 10) === 1;\r\n  const targetRpm = parseFloat(args[2]);\r\n  const currentRpm = parseFloat(args[3]);\r\n  const motorPwm = parseFloat(args[4]);\r\n\r\n  void lidar.update({\r\n    isStarted,\r\n    isValid,\r\n    targetRpm,\r\n    currentRpm,\r\n    motorPwm\r\n  });\r\n}\r\n","import { ContainerMap } from \"../components/Router\";\r\n\r\nexport function handleMeasurementCommand(\r\n  args: string[],\r\n  { measurements }: ContainerMap\r\n) {\r\n  // console.log(\"measurement\", { args });\r\n  void measurements.add({\r\n    angle: parseInt(args[0], 10),\r\n    distance: parseInt(args[1], 10),\r\n    quality: parseInt(args[2], 10),\r\n    date: new Date()\r\n  });\r\n}\r\n","import { WebSocketClient } from \"../web-socket-client\";\r\n\r\nexport type SendArgument = string | number;\r\n\r\nexport class Robot {\r\n  pingSentTime?: number;\r\n\r\n  constructor(private readonly webSocketClient: WebSocketClient) {}\r\n\r\n  requestVoltage() {\r\n    this.send(\"voltage\");\r\n  }\r\n\r\n  requestState() {\r\n    this.send(\"state\");\r\n  }\r\n\r\n  setSpeed(left: number, right: number) {\r\n    this.send(\"s\", left, right);\r\n  }\r\n\r\n  ping(transportOnly = false) {\r\n    this.pingSentTime = Date.now();\r\n\r\n    if (transportOnly) {\r\n      // send internal ping command if testing the transport only (Android responds to this)\r\n      this.webSocketClient.send(\"!ping\", false);\r\n    } else {\r\n      // send full ping, responded by the MCU\r\n      this.send(\"ping\");\r\n    }\r\n  }\r\n\r\n  // don't use directly, add new robot method\r\n  private send(command: string, ...args: SendArgument[]) {\r\n    const message = `${command}${args.length > 0 ? \":\" : \"\"}${args.join(\":\")}`;\r\n\r\n    this.webSocketClient.send(message);\r\n  }\r\n}\r\n","import { config } from \"../config\";\r\nimport { WebSocketClient } from \"../lib/web-socket-client\";\r\n\r\nexport const webSocketClient = new WebSocketClient({\r\n  ...config.webSocket\r\n  // log: console\r\n});\r\n","import { Robot } from \"../lib/robot\";\r\n\r\nimport { webSocketClient } from \"./webSocketClient\";\r\n\r\nexport const robot = new Robot(webSocketClient);\r\n","import { ContainerMap } from \"../components/Router\";\r\nimport { robot } from \"../services/robot\";\r\n\r\nexport function handlePongCommand(args: string[], { log }: ContainerMap) {\r\n  if (!robot.pingSentTime) {\r\n    return;\r\n  }\r\n\r\n  const pingTimeTaken = Date.now() - robot.pingSentTime;\r\n\r\n  robot.pingSentTime = undefined;\r\n\r\n  log.addEntry(`# ping: ${pingTimeTaken} ms`);\r\n}\r\n","import { ContainerMap } from \"../components/Router\";\r\n\r\nexport function handleResetCommand(_args: string[], { status }: ContainerMap) {\r\n  void status.setResetReceived();\r\n}\r\n","import { ContainerMap } from \"../components/Router\";\r\nimport { SerialState, SerialType } from \"../containers/StatusContainer\";\r\nimport { robot } from \"../services/robot\";\r\n\r\nexport async function handleSerialCommand(\r\n  args: string[],\r\n  { status }: ContainerMap\r\n) {\r\n  // extract serial info\r\n  const serialType = args[0] as SerialType;\r\n  const serialState = args[1] as SerialState;\r\n  const serialDeviceName = typeof args[2] === \"string\" ? args[2] : undefined;\r\n\r\n  // update serial state\r\n  await status.setSerialState(serialType, serialState, serialDeviceName);\r\n\r\n  const connectedSerial = status.getConnectedSerial();\r\n\r\n  // ask for some initial state info once a serial connection is established\r\n  if (connectedSerial !== undefined && serialType === connectedSerial.type) {\r\n    // request current state\r\n    robot.requestState();\r\n\r\n    // also setup an interval to ask the voltage level periodically\r\n    // requestBatteryVoltageInterval = window.setInterval(() => {\r\n    //   requestVoltage();\r\n    // }, REQUEST_BATTERY_VOLTAGE_INTERVAL);\r\n  } else {\r\n    // clear the battery voltage interval if exists\r\n    // if (requestBatteryVoltageInterval !== null) {\r\n    //   window.clearInterval(requestBatteryVoltageInterval);\r\n\r\n    //   requestBatteryVoltageInterval = null;\r\n    // }\r\n\r\n    // no serial connection so we can't be sure of battery voltage\r\n    void status.setBatteryVoltage(undefined);\r\n  }\r\n}\r\n","import { ContainerMap } from \"../components/Router\";\r\n\r\nexport function handleSpeedCommand(args: string[], { robot }: ContainerMap) {\r\n  const left = parseInt(args[0], 10);\r\n  const right = parseInt(args[1], 10);\r\n\r\n  void robot.setTargetSpeed(left, right);\r\n}\r\n","import { ContainerMap } from \"../components/Router\";\r\n\r\nexport function handleUsbCommand(args: string[], _containerMap: ContainerMap) {\r\n  const vendorId = parseInt(args[0], 10);\r\n  const productId = parseInt(args[1], 10);\r\n  const productName = args[2];\r\n\r\n  // TODO: store in status?\r\n  console.log(\"usb\", {\r\n    vendorId,\r\n    productId,\r\n    productName\r\n  });\r\n}\r\n","// simple log listener function\r\nexport type LogListenerFn = (message: string) => void;\r\n\r\n// list of registered log listeners\r\nexport const logListeners: LogListenerFn[] = [];\r\n\r\n// registers a new log listener\r\nexport const addLogListener = (listener: LogListenerFn) => {\r\n  logListeners.push(listener);\r\n};\r\n\r\n// global log function callable from anywhere, can be intercepted by any number of listeners\r\nexport const log = (message: string) =>\r\n  logListeners.forEach(listener => listener(message));\r\n","import { log } from \"../../services/log\";\r\n\r\ninterface RobotJavascriptInterface {\r\n  receive(message: string): void;\r\n}\r\n\r\ninterface AppJavascriptInterface {\r\n  receive(message: string): void;\r\n}\r\n\r\n// extend the global window interface\r\ndeclare global {\r\n  interface Window {\r\n    robot?: RobotJavascriptInterface;\r\n    app?: AppJavascriptInterface;\r\n  }\r\n}\r\n\r\nexport class MockJavascriptInterface implements RobotJavascriptInterface {\r\n  receive(message: string) {\r\n    console.log(\"MockJavascriptInterface\", \"receive\", message);\r\n  }\r\n}\r\n\r\nexport class JavascriptInterface {\r\n  isAvailable: boolean;\r\n  private robot: RobotJavascriptInterface;\r\n\r\n  constructor() {\r\n    // default to using mock interface if not available\r\n    if (window.robot === undefined) {\r\n      console.log(\"no javascript interface is available\");\r\n\r\n      this.robot = new MockJavascriptInterface();\r\n      this.isAvailable = false;\r\n\r\n      return;\r\n    }\r\n\r\n    // use the actual interface\r\n    this.robot = window.robot;\r\n    this.isAvailable = true;\r\n\r\n    // setup robot to app interface\r\n    window.app = {\r\n      receive: message => this.onMessageReceived(message)\r\n    };\r\n  }\r\n\r\n  send(message: string) {\r\n    this.robot.receive(message);\r\n  }\r\n\r\n  private onMessageReceived(message: string) {\r\n    log(`# received \"${message}\"`);\r\n  }\r\n}\r\n","import { JavascriptInterface } from \"../lib/javascript-interface\";\r\n\r\nexport const javascriptInterface = new JavascriptInterface();\r\n","import * as React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { ButtonContainer } from \"../containers/ButtonContainer\";\r\nimport { LidarContainer } from \"../containers/LidarContainer\";\r\nimport { LogContainer } from \"../containers/LogContainer\";\r\nimport { MeasurementsContainer } from \"../containers/MeasurementsContainer\";\r\nimport { OdometryContainer } from \"../containers/OdometryContainer\";\r\nimport { RobotContainer } from \"../containers/RobotContainer\";\r\nimport {\r\n  SerialState,\r\n  SerialType,\r\n  StatusContainer\r\n} from \"../containers/StatusContainer\";\r\nimport { handleBeaconCommand } from \"../handlers/handleBeaconCommand\";\r\nimport { handleButtonCommand } from \"../handlers/handleButtonCommand\";\r\nimport { handleCurrentCommand } from \"../handlers/handleCurrentCommand\";\r\nimport { handleEncoderCommand } from \"../handlers/handleEncoderCommand\";\r\nimport { handleVoltageCommand } from \"../handlers/handleGetVoltageCommand\";\r\nimport { handleIpCommand } from \"../handlers/handleIpCommand\";\r\nimport { handleLidarCommand } from \"../handlers/handleLidarCommand\";\r\nimport { handleMeasurementCommand } from \"../handlers/handleMeasurementCommand\";\r\nimport { handlePongCommand } from \"../handlers/handlePongCommand\";\r\nimport { handleResetCommand } from \"../handlers/handleResetCommand\";\r\nimport { handleSerialCommand } from \"../handlers/handleSerialCommand\";\r\nimport { handleSpeedCommand } from \"../handlers/handleSpeedCommand\";\r\nimport { handleUsbCommand } from \"../handlers/handleUsbCommand\";\r\nimport { WebSocketState } from \"../lib/web-socket-client/index\";\r\nimport { javascriptInterface } from \"../services/javascriptInterface\";\r\nimport { addLogListener } from \"../services/log\";\r\nimport { webSocketClient } from \"../services/webSocketClient\";\r\n\r\nexport interface ContainerMap {\r\n  log: LogContainer;\r\n  status: StatusContainer;\r\n  odometry: OdometryContainer;\r\n  lidar: LidarContainer;\r\n  button: ButtonContainer;\r\n  robot: RobotContainer;\r\n  measurements: MeasurementsContainer;\r\n}\r\n\r\nexport type WebSocketCommandHandlerFn = (\r\n  args: string[],\r\n  containers: ContainerMap\r\n) => void;\r\n\r\nexport interface WebSocketCommandHandlersMap {\r\n  [x: string]: WebSocketCommandHandlerFn | undefined;\r\n}\r\n\r\n// connection manager component, connects external data to containers, does not render anything visual\r\nexport class Router extends React.Component {\r\n  private isInitialized = false;\r\n  private readonly webSocketCommandHandlers: WebSocketCommandHandlersMap = {\r\n    serial: handleSerialCommand,\r\n    ip: handleIpCommand,\r\n    usb: handleUsbCommand,\r\n    voltage: handleVoltageCommand,\r\n    button: handleButtonCommand,\r\n    reset: handleResetCommand,\r\n    current: handleCurrentCommand,\r\n    lidar: handleLidarCommand,\r\n    pong: handlePongCommand,\r\n    e: handleEncoderCommand,\r\n    b: handleBeaconCommand,\r\n    m: handleMeasurementCommand,\r\n    s: handleSpeedCommand\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Subscribe\r\n        to={[\r\n          LogContainer,\r\n          StatusContainer,\r\n          OdometryContainer,\r\n          LidarContainer,\r\n          ButtonContainer,\r\n          RobotContainer,\r\n          MeasurementsContainer\r\n        ]}\r\n      >\r\n        {(\r\n          log: LogContainer,\r\n          status: StatusContainer,\r\n          odometry: OdometryContainer,\r\n          lidar: LidarContainer,\r\n          button: ButtonContainer,\r\n          robot: RobotContainer,\r\n          measurements: MeasurementsContainer\r\n        ) => {\r\n          // only initialize the connection logic once\r\n          if (this.isInitialized) {\r\n            return null;\r\n          }\r\n\r\n          // register as log listener and proxy to log container\r\n          addLogListener(message => log.addEntry(message));\r\n\r\n          // set initial state\r\n          void status.setWebSocketState(webSocketClient.state);\r\n\r\n          // subscribe to web-socket events\r\n          webSocketClient.subscribe({\r\n            onConnecting: (ws, _wasConnected) => {\r\n              log.addEntry(`# connecting to ${ws.url}`);\r\n            },\r\n            onOpen: (_ws, _event) => {\r\n              log.addEntry(\"# web-socket connection established\");\r\n            },\r\n            onClose: (_ws, _event, wasConnected) => {\r\n              if (wasConnected) {\r\n                log.addEntry(\"# web-socket connection was lost\");\r\n              } else {\r\n                log.addEntry(\"# establishing web-socket connection failed\");\r\n              }\r\n            },\r\n            onError: (_ws, _event, _wasConnected) => {\r\n              log.addEntry(\"# get web-socket error\");\r\n            },\r\n            onMessage: (_ws, message) => {\r\n              // handle the message\r\n              this.handleWebSocketMessage(message, {\r\n                log,\r\n                status,\r\n                odometry,\r\n                lidar,\r\n                button,\r\n                robot,\r\n                measurements\r\n              });\r\n            },\r\n            onStateChanged: (_ws, newState, _oldState) => {\r\n              void status.setWebSocketState(newState);\r\n\r\n              // also reset other statuses if web-socket connection is lost\r\n              if (newState === WebSocketState.DISCONNECTED) {\r\n                void status.setSerialState(\r\n                  SerialType.BLUETOOTH,\r\n                  SerialState.DISCONNECTED\r\n                );\r\n                void status.setSerialState(\r\n                  SerialType.USB,\r\n                  SerialState.DISCONNECTED\r\n                );\r\n                void status.setBatteryVoltage(undefined);\r\n              }\r\n            },\r\n            onSendMessage: (_ws, message) => {\r\n              const [name] = message.split(\":\");\r\n\r\n              // don't log single-character fast commands (\"s\" for speed etc)\r\n              if (name.length === 1) {\r\n                return;\r\n              }\r\n\r\n              log.addEntry(`> ${message}`);\r\n            }\r\n          });\r\n\r\n          // attempt to establish web-socket connection\r\n          webSocketClient.connect();\r\n\r\n          // test javascript bridge\r\n          javascriptInterface.send(\"Hello from app!\");\r\n\r\n          // don't run this logic again\r\n          this.isInitialized = true;\r\n\r\n          // don't render anything\r\n          return null;\r\n        }}\r\n      </Subscribe>\r\n    );\r\n  }\r\n\r\n  // handles web-socket messages\r\n  private handleWebSocketMessage(message: string, containers: ContainerMap) {\r\n    // ignore empty messages\r\n    if (message.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // parse message\r\n    const [name, ...args] = message.split(\":\");\r\n\r\n    // dont log single-character commands (fast lidar measurements, encoders etc)\r\n    if (name.length > 1) {\r\n      containers.log.addEntry(`< ${message}`);\r\n    }\r\n\r\n    // attempt to handle command\r\n    this.handleWebSocketCommand(name, args, containers);\r\n  }\r\n\r\n  // handles parsed web-socket commands\r\n  private handleWebSocketCommand(\r\n    name: string,\r\n    args: string[],\r\n    containers: ContainerMap\r\n  ) {\r\n    const handler = this.webSocketCommandHandlers[name];\r\n\r\n    // check whether the handler exists\r\n    if (handler === undefined) {\r\n      console.warn(\r\n        `missing web-socket command handler for \"${name}\" (${args.join(\", \")})`\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    // call the handler\r\n    handler(args, containers);\r\n  }\r\n}\r\n","import { styled } from \"../styled\";\r\n\r\nexport interface ViewProps {\r\n  text?: boolean;\r\n  grid?: boolean;\r\n}\r\n\r\nexport const View = styled.div<ViewProps>`\r\n  position: relative;\r\n  flex: 1;\r\n  border-radius: 8px 8px 0 0;\r\n  padding: ${props =>\r\n    props.text ? \"16px\" : props.grid ? props.theme.size.gridGap : \"0\"};\r\n`;\r\n","import { css } from \"styled-components\";\r\n\r\nimport { ElProps, styled, theme } from \"../styled\";\r\n\r\nexport enum GridItemStatus {\r\n  GOOD = \"GOOD\",\r\n  WARN = \"WARN\",\r\n  BAD = \"BAD\"\r\n}\r\n\r\nexport interface GridItemProps {\r\n  primary?: boolean;\r\n  text?: boolean;\r\n  status?: GridItemStatus;\r\n}\r\n\r\nexport const Grid = styled.div`\r\n  display: grid;\r\n  grid-gap: ${props => props.theme.size.gridGap};\r\n  height: calc(\r\n    100vh -\r\n      (\r\n        ${props => props.theme.size.menuHeight} +\r\n          ${props => props.theme.size.gridGap} * 2\r\n      )\r\n  );\r\n`;\r\n\r\nconst gridItemStatusColorMap = {\r\n  [GridItemStatus.GOOD]: theme.bg.good,\r\n  [GridItemStatus.WARN]: theme.bg.warn,\r\n  [GridItemStatus.BAD]: theme.bg.bad\r\n};\r\n\r\nexport const GridItem = styled.div<GridItemProps & ElProps>`\r\n  position: relative;\r\n  background-color: ${props => props.theme.bg.tertiary};\r\n  font-variant: ${props => (props.primary ? \"all-small-caps\" : \"normal\")};\r\n\r\n  ${props =>\r\n    props.text\r\n      ? css`\r\n          line-height: 1.25em;\r\n          text-align: center;\r\n          margin-top: 8px;\r\n        `\r\n      : \"\"}\r\n\r\n  ${props =>\r\n    props.status\r\n      ? css`\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          justify-content: center;\r\n          padding: 16px;\r\n          overflow: hidden;\r\n          background-color: ${gridItemStatusColorMap[props.status]};\r\n        `\r\n      : \"\"}\r\n\r\n  ${props =>\r\n    props.status === GridItemStatus.BAD\r\n      ? css`\r\n          animation: ${props.theme.animation.pulse(\r\n              gridItemStatusColorMap[props.status]\r\n            )}\r\n            3s ease;\r\n          animation-iteration-count: infinite;\r\n          animation-delay: 1s;\r\n        `\r\n      : \"\"}\r\n`;\r\n","import * as React from \"react\";\r\n\r\nimport { View } from \"../components/View\";\r\n\r\nexport const BotView: React.SFC<{}> = () => <View text={true}>Bot</View>;\r\n","import * as React from \"react\";\r\n\r\nimport { View } from \"../components/View\";\r\n\r\nexport const MapView: React.SFC = () => <View text={true}>Map</View>;\r\n","import * as nipplejs from \"nipplejs\";\r\nimport * as React from \"react\";\r\n\r\nexport interface JoystickProps {\r\n  name: string;\r\n  config?: nipplejs.JoystickOptions;\r\n  bind?: string;\r\n  x?: boolean;\r\n  y?: boolean;\r\n  onEvent?(\r\n    name: string,\r\n    event: nipplejs.JoystickEvent,\r\n    info: nipplejs.JoystickInstance\r\n  ): void;\r\n}\r\n\r\nexport class Joystick extends React.Component<JoystickProps> {\r\n  private readonly ref = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidMount() {\r\n    const el = this.ref.current;\r\n\r\n    // return if element could not be found\r\n    if (!el) {\r\n      console.warn(\"grid item dom node not found\");\r\n\r\n      return;\r\n    }\r\n\r\n    // create the nipple manager\r\n    const manager = nipplejs.create({\r\n      zone: el,\r\n      color: \"#FFF\",\r\n      size: 200,\r\n      position: {\r\n        left: \"50%\",\r\n        top: \"50%\"\r\n      },\r\n      mode: \"static\",\r\n      lockX: this.props.x === true,\r\n      lockY: this.props.y === true\r\n    });\r\n\r\n    const { onEvent } = this.props;\r\n\r\n    // only listen for events if even listener has been added\r\n    if (typeof onEvent === \"function\") {\r\n      const bind = this.props.bind\r\n        ? this.props.bind\r\n        : \"start move end dir plain\";\r\n\r\n      manager\r\n        .on(bind, (event, nipple) => {\r\n          onEvent(this.props.name, event, nipple);\r\n        })\r\n        .on(\"removed\", (_event, nipple) => {\r\n          nipple.off(bind);\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"joystick\" ref={this.ref} />;\r\n  }\r\n}\r\n","export interface TrackedVehicleOptions {\r\n  trackWidth: number;\r\n  maxSpeed: number;\r\n  wheelDiameter: number;\r\n  encoderCountsPerRotation: number;\r\n  gearboxRatio: number;\r\n  speedUpdateInterval: number;\r\n}\r\n\r\nexport interface MotorSpeeds {\r\n  left: number;\r\n  right: number;\r\n}\r\n\r\n// https://pdfs.semanticscholar.org/29ae/0bc974737b58afd63b6edb8d0837a3383321.pdf\r\nexport class TrackedVehicleKinematics {\r\n  constructor(private readonly options: TrackedVehicleOptions) {}\r\n\r\n  /**\r\n   * Returns motor speeds in m/s for requested forward speed at given rotational speed.\r\n   *\r\n   * @param speed Speed in m/s\r\n   * @param omega Rotational speed in rad/s\r\n   */\r\n  calculateMotorSpeeds(speed: number, omega: number): MotorSpeeds {\r\n    // TODO: calculate actual kinematics\r\n    return this.limit(\r\n      {\r\n        left: speed + omega,\r\n        right: speed - omega\r\n      },\r\n      this.options.maxSpeed\r\n    );\r\n  }\r\n\r\n  getSpeedEncoderCount(speed: number) {\r\n    const circumference = this.options.wheelDiameter * Math.PI;\r\n    const rps = speed / circumference;\r\n    const actualEncoderCountPerRevolution =\r\n      this.options.encoderCountsPerRotation * this.options.gearboxRatio;\r\n    const targetEncoderCountPerSecond = rps * actualEncoderCountPerRevolution;\r\n\r\n    return Math.floor(targetEncoderCountPerSecond);\r\n  }\r\n\r\n  limit(speeds: MotorSpeeds, maxSpeed: number): MotorSpeeds {\r\n    const maxRequestedSpeedMagnitude = Math.max(\r\n      Math.abs(speeds.left),\r\n      Math.abs(speeds.right)\r\n    );\r\n    const normalizationFactor = Math.min(\r\n      maxSpeed / maxRequestedSpeedMagnitude,\r\n      1.0\r\n    );\r\n\r\n    // console.log(\"normalize\", {\r\n    //   maxRequestedSpeedMagnitude,\r\n    //   normalizationFactor,\r\n    //   speeds,\r\n    //   maxSpeed,\r\n    // });\r\n\r\n    return {\r\n      left: speeds.left * normalizationFactor,\r\n      right: speeds.right * normalizationFactor\r\n    };\r\n  }\r\n\r\n  getEncoderSpeeds(speeds: MotorSpeeds): MotorSpeeds {\r\n    return {\r\n      left: this.getSpeedEncoderCount(speeds.left),\r\n      right: this.getSpeedEncoderCount(speeds.right)\r\n    };\r\n  }\r\n}\r\n","import throttle from \"lodash.throttle\";\r\nimport { dummyLogger, Logger } from \"ts-log\";\r\n\r\nimport { Robot } from \"../robot\";\r\nimport {\r\n  TrackedVehicleKinematics,\r\n  TrackedVehicleOptions\r\n} from \"../tracked-vehicle-kinematics\";\r\nimport { WebSocketClient } from \"../web-socket-client/index\";\r\n\r\nexport interface RemoteControllerOptions {\r\n  webSocketClient: WebSocketClient;\r\n  robot: Robot;\r\n  vehicle: TrackedVehicleOptions;\r\n  log?: Logger;\r\n}\r\n\r\nexport class RemoteController {\r\n  private readonly options: Required<RemoteControllerOptions>;\r\n  private readonly kinematics: TrackedVehicleKinematics;\r\n  private readonly robot: Robot;\r\n  private speed = 0;\r\n  private omega = 0;\r\n  private readonly scheduleUpdateMotorSpeeds: () => void;\r\n\r\n  constructor(options: RemoteControllerOptions) {\r\n    this.options = {\r\n      log: dummyLogger,\r\n      ...options\r\n    };\r\n    this.robot = this.options.robot;\r\n    this.kinematics = new TrackedVehicleKinematics(this.options.vehicle);\r\n\r\n    this.scheduleUpdateMotorSpeeds = throttle(\r\n      () => this.updateMotorSpeeds(),\r\n      this.options.vehicle.speedUpdateInterval\r\n    );\r\n  }\r\n\r\n  setSpeed(speed: number) {\r\n    this.speed = speed;\r\n\r\n    this.scheduleUpdateMotorSpeeds();\r\n  }\r\n\r\n  setOmega(omega: number) {\r\n    this.omega = omega;\r\n\r\n    this.scheduleUpdateMotorSpeeds();\r\n  }\r\n\r\n  private updateMotorSpeeds() {\r\n    const motorSpeeds = this.kinematics.calculateMotorSpeeds(\r\n      this.speed,\r\n      this.omega\r\n    );\r\n    const encoderSpeeds = this.kinematics.getEncoderSpeeds(motorSpeeds);\r\n\r\n    // TODO: only send if sufficiently different from last sent values\r\n    this.robot.setSpeed(encoderSpeeds.left, encoderSpeeds.right);\r\n  }\r\n}\r\n","import { JoystickEvent, JoystickEventName, JoystickInstance } from \"nipplejs\";\r\nimport * as React from \"react\";\r\n\r\nimport { Grid, GridItem } from \"../components/Grid\";\r\nimport { Joystick } from \"../components/Joystick\";\r\nimport { View } from \"../components/View\";\r\nimport { config } from \"../config\";\r\nimport { RemoteController } from \"../lib/remote-controller\";\r\nimport { robot } from \"../services/robot\";\r\nimport { webSocketClient } from \"../services/webSocketClient\";\r\nimport { styled } from \"../styled\";\r\n\r\nconst JoystickGrid = styled(Grid)`\r\n  grid-template-columns: 1fr;\r\n`;\r\n\r\n// TODO: show track speeds on edges (target and real)\r\nexport class RemoteView extends React.Component {\r\n  private readonly remoteController = new RemoteController({\r\n    webSocketClient,\r\n    log: console,\r\n    vehicle: config.vehicle,\r\n    robot\r\n  });\r\n\r\n  render() {\r\n    return (\r\n      <View grid={true}>\r\n        <JoystickGrid>\r\n          <GridItem>\r\n            <Joystick\r\n              x={true}\r\n              name=\"speed\"\r\n              onEvent={(name, event, info) =>\r\n                this.onJoystickEvent(name, event, info)\r\n              }\r\n            />\r\n          </GridItem>\r\n          <GridItem>\r\n            <Joystick\r\n              y={true}\r\n              name=\"omega\"\r\n              onEvent={(name, event, info) =>\r\n                this.onJoystickEvent(name, event, info)\r\n              }\r\n            />\r\n          </GridItem>\r\n        </JoystickGrid>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  private onJoystickEvent(\r\n    name: string,\r\n    event: JoystickEvent,\r\n    info: JoystickInstance\r\n  ) {\r\n    const interestingEvents: JoystickEventName[] = [\"move\", \"end\"];\r\n\r\n    if (interestingEvents.indexOf(event.type) === -1) {\r\n      return;\r\n    }\r\n\r\n    const isMoveEvent = event.type === \"move\";\r\n\r\n    const xPos = isMoveEvent ? Math.sin(info.angle.radian) * info.distance : 0;\r\n    const yPos = isMoveEvent ? Math.cos(info.angle.radian) * info.distance : 0;\r\n\r\n    // console.log(`${name} x: ${xPos}, y: ${yPos}, distance: ${info.distance}`, this.remoteController);\r\n\r\n    switch (name) {\r\n      case \"speed\":\r\n        this.remoteController.setSpeed((yPos * -1) / 100.0);\r\n        break;\r\n\r\n      case \"omega\":\r\n        this.remoteController.setOmega(xPos / 100.0);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(`Got unexpected joystick \"${name}\" info`);\r\n    }\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport { View } from \"../components/View\";\r\n\r\nexport const SettingsView: React.SFC<{}> = () => <View text={true}>\r\n  <button onClick={() => window.location.href = \"http://kallaspriit\"}>Open http://kallaspriit</button>\r\n</View>;\r\n","import * as React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { BatteryState, StatusContainer } from \"../containers/StatusContainer\";\r\nimport { assertUnreachable } from \"../services/assertUnreachable\";\r\nimport { robot } from \"../services/robot\";\r\n\r\nimport { GridItem, GridItemStatus } from \"./Grid\";\r\nimport { BatteryIcon } from \"./Icon\";\r\nimport { Text } from \"./Text\";\r\n\r\nexport const BatteryStatus: React.SFC = () => (\r\n  <Subscribe to={[StatusContainer]}>\r\n    {(statusContainer: StatusContainer) => {\r\n      const status = getBatteryStatus(statusContainer.batteryState);\r\n      const description = statusContainer.state.batteryVoltage\r\n        ? `${statusContainer.state.batteryVoltage.toFixed(1)}V`\r\n        : \"Unknown\";\r\n\r\n      return (\r\n        <GridItem status={status} onClick={() => robot.requestVoltage()}>\r\n          <BatteryIcon />\r\n          <Text primary={true}>Battery</Text>\r\n          <Text>{description}</Text>\r\n        </GridItem>\r\n      );\r\n    }}\r\n  </Subscribe>\r\n);\r\n\r\nfunction getBatteryStatus(batteryState: BatteryState): GridItemStatus {\r\n  switch (batteryState) {\r\n    case BatteryState.UNKNOWN:\r\n      return GridItemStatus.BAD;\r\n\r\n    case BatteryState.FULL:\r\n      return GridItemStatus.GOOD;\r\n\r\n    case BatteryState.LOW:\r\n      return GridItemStatus.WARN;\r\n\r\n    case BatteryState.CRITICAL:\r\n      return GridItemStatus.BAD;\r\n\r\n    default:\r\n      return assertUnreachable(batteryState, \"got unexpected battery state\");\r\n  }\r\n}\r\n","export function assertUnreachable(value: never, message: string): never {\r\n  throw new Error(`${message} (${value})`);\r\n}\r\n","export function pad(\r\n  data: string | number,\r\n  length: number,\r\n  padCharacter = \" \"\r\n): string {\r\n  const str = typeof data === \"string\" ? data : data.toString();\r\n\r\n  // return as is if already long enough\r\n  if (str.length >= length) {\r\n    return str;\r\n  }\r\n\r\n  const missingLength = length - str.length;\r\n\r\n  return `${new Array(missingLength + 1).join(padCharacter)}${str}`;\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport type Props = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLElement>,\r\n  HTMLElement\r\n> & {\r\n  scrollToBottom?: boolean;\r\n};\r\n\r\nexport class AutoScroll extends React.Component<Props> {\r\n  private readonly ref = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidUpdate() {\r\n    // return if scrolling to bottom is not requested, default to true\r\n    if (this.props.scrollToBottom === false) {\r\n      return;\r\n    }\r\n\r\n    // get the dom node from the reference\r\n    const el = this.ref.current;\r\n\r\n    // return if element could not be found\r\n    if (!el) {\r\n      console.warn(\"auto-scroll dom node not found\");\r\n\r\n      return;\r\n    }\r\n\r\n    // check whether we're aready near the bottom\r\n    const isNearBottom = el.scrollHeight - el.clientHeight <= el.scrollTop + 50;\r\n\r\n    // only force the scroll if near bottom\r\n    if (isNearBottom) {\r\n      el.scrollTop = el.scrollHeight - el.clientHeight;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // filter out unsupported props\r\n    const { scrollToBottom, ...props } = this.props;\r\n\r\n    return (\r\n      <div {...props} ref={this.ref}>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { LogContainer, MessageType } from \"../containers/LogContainer\";\r\nimport { formatTime } from \"../services/formatTime\";\r\nimport { ElProps, styled } from \"../styled\";\r\n\r\nimport { AutoScroll } from \"./AutoScroll\";\r\nimport { GridItem } from \"./Grid\";\r\nimport { ClearIcon } from \"./Icon\";\r\n\r\nconst StatusGridItem = styled(GridItem)`\r\n  grid-column: 1 / 4;\r\n  font-family: Consolas, \"Courier New\", Courier, monospace;\r\n  display: flex;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst LogWrap = styled(AutoScroll)`\r\n  flex: 1;\r\n  overflow: scroll;\r\n  padding: 8px;\r\n`;\r\n\r\nconst LogEntry = styled.div``;\r\n\r\nconst LogEntryTime = styled.span`\r\n  color: ${props => props.theme.text.secondary};\r\n`;\r\n\r\ninterface LogEntryMessageProps {\r\n  type: MessageType;\r\n}\r\n\r\nconst logEntryTypeColorMap = {\r\n  [MessageType.INFO]: \"#666\",\r\n  [MessageType.RX]: \"#090\",\r\n  [MessageType.TX]: \"#FF8000\",\r\n  [MessageType.ERROR]: \"#900\"\r\n};\r\n\r\nconst LogEntryMessage = styled.span<LogEntryMessageProps>`\r\n  padding-left: 6px;\r\n  border-left: 2px solid ${props => logEntryTypeColorMap[props.type]};\r\n  margin-left: 6px;\r\n`;\r\n\r\nconst LogEntryCount = styled.span`\r\n  display: inline-block;\r\n  padding: 0 4px;\r\n  margin-left: 8px;\r\n  border-radius: 8px;\r\n  background-color: ${props => props.theme.text.primary};\r\n  color: ${props => props.theme.bg.tertiary};\r\n`;\r\n\r\nconst ClearLogButton = styled.div<ElProps>`\r\n  box-sizing: content-box;\r\n  position: absolute;\r\n  bottom: ${props => props.theme.size.gridGap};\r\n  right: ${props => props.theme.size.gridGap};\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 10px;\r\n  background-color: ${props => props.theme.bg.tertiary};\r\n`;\r\n\r\nconst ClearLogIcon = styled(ClearIcon)`\r\n  background-color: ${props => props.theme.text.secondary};\r\n`;\r\n\r\nexport const Log: React.SFC = () => (\r\n  <Subscribe to={[LogContainer]}>\r\n    {(logContainer: LogContainer) => (\r\n      <StatusGridItem>\r\n        <LogWrap>\r\n          {logContainer.state.entries.map(entry => (\r\n            <LogEntry key={entry.id}>\r\n              <LogEntryTime>{formatTime(entry.time)}</LogEntryTime>\r\n              <LogEntryMessage type={entry.type}>\r\n                {entry.message}\r\n              </LogEntryMessage>\r\n              {entry.count > 1 ? (\r\n                <LogEntryCount>{entry.count}</LogEntryCount>\r\n              ) : null}\r\n            </LogEntry>\r\n          ))}\r\n        </LogWrap>\r\n        <ClearLogButton onClick={() => logContainer.clear()}>\r\n          <ClearLogIcon />\r\n        </ClearLogButton>\r\n      </StatusGridItem>\r\n    )}\r\n  </Subscribe>\r\n);\r\n","import { pad } from \"./pad\";\r\n\r\nexport function formatTime(date: Date): string {\r\n  return (\r\n    `${pad(date.getHours(), 2, \"0\")}:` +\r\n    `${pad(date.getMinutes(), 2, \"0\")}:` +\r\n    `${pad(date.getSeconds(), 2, \"0\")}.` +\r\n    `${pad(date.getMilliseconds(), 3, \"0\")}`\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport titleCase from \"title-case\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { SerialType, StatusContainer } from \"../containers/StatusContainer\";\r\n\r\nimport { GridItem, GridItemStatus } from \"./Grid\";\r\nimport { BluetoothIcon, SerialIcon } from \"./Icon\";\r\nimport { Text } from \"./Text\";\r\n\r\nexport const UsbStatus: React.SFC = () => (\r\n  <Subscribe to={[StatusContainer]}>\r\n    {(statusContainer: StatusContainer) => {\r\n      const connectedSerial = statusContainer.getConnectedSerial();\r\n      const status =\r\n        connectedSerial !== undefined\r\n          ? GridItemStatus.GOOD\r\n          : GridItemStatus.BAD;\r\n      const Icon =\r\n        connectedSerial && connectedSerial.type === SerialType.BLUETOOTH\r\n          ? BluetoothIcon\r\n          : SerialIcon;\r\n      const title = connectedSerial ? connectedSerial.type : \"Serial\";\r\n      const description = titleCase(\r\n        connectedSerial ? connectedSerial.state : \"Disconnected\"\r\n      );\r\n\r\n      return (\r\n        <GridItem status={status}>\r\n          <Icon />\r\n          <Text primary={true}>{title}</Text>\r\n          <Text>{description}</Text>\r\n        </GridItem>\r\n      );\r\n    }}\r\n  </Subscribe>\r\n);\r\n","import * as React from \"react\";\r\nimport titleCase from \"title-case\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { StatusContainer } from \"../containers/StatusContainer\";\r\nimport { WebSocketState } from \"../lib/web-socket-client\";\r\nimport { robot } from \"../services/robot\";\r\n\r\nimport { GridItem, GridItemStatus } from \"./Grid\";\r\nimport { WebSocketIcon } from \"./Icon\";\r\nimport { Text } from \"./Text\";\r\n\r\nexport const WebSocketStatus: React.SFC = () => (\r\n  <Subscribe to={[StatusContainer]}>\r\n    {(statusContainer: StatusContainer) => {\r\n      const status =\r\n        statusContainer.state.webSocketState === WebSocketState.CONNECTED\r\n          ? GridItemStatus.GOOD\r\n          : GridItemStatus.BAD;\r\n      const description =\r\n        statusContainer.state.webSocketState !== WebSocketState.CONNECTED ||\r\n        statusContainer.state.remoteIp === undefined\r\n          ? titleCase(statusContainer.state.webSocketState)\r\n          : statusContainer.state.remoteIp;\r\n\r\n      return (\r\n        <GridItem\r\n          status={status}\r\n          onClick={() =>\r\n            robot.ping(statusContainer.getConnectedSerial() === undefined)\r\n          }\r\n        >\r\n          <WebSocketIcon />\r\n          <Text primary={true}>Web Socket</Text>\r\n          <Text>{description}</Text>\r\n        </GridItem>\r\n      );\r\n    }}\r\n  </Subscribe>\r\n);\r\n","import * as React from \"react\";\r\n\r\nimport { BatteryStatus } from \"../components/BatteryStatus\";\r\nimport { Grid } from \"../components/Grid\";\r\nimport { Log } from \"../components/Log\";\r\nimport { UsbStatus } from \"../components/UsbStatus\";\r\nimport { View } from \"../components/View\";\r\nimport { WebSocketStatus } from \"../components/WebSocketStatus\";\r\nimport { styled } from \"../styled\";\r\n\r\nconst StatusGrid = styled(Grid)`\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n  grid-template-rows: 100px;\r\n`;\r\n\r\n// TODO: add target and real speed (compare %?)\r\n// TODO: add odometry (visualize path?)\r\n// TODO: add lidar (tiny map?)\r\n// TODO: add buttons (state for each?)\r\nexport const StatusView: React.SFC = () => (\r\n  <View grid={true}>\r\n    <StatusGrid>\r\n      <UsbStatus />\r\n      <WebSocketStatus />\r\n      <BatteryStatus />\r\n      <Log />\r\n    </StatusGrid>\r\n  </View>\r\n);\r\n","import * as React from \"react\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"unstated\";\n\nimport { MainMenu } from \"./components/MainMenu\";\nimport { Router } from \"./components/Router\";\nimport { GlobalStyle, styled, theme } from \"./styled\";\nimport { BotView } from \"./views/BotView\";\nimport { MapView } from \"./views/MapView\";\nimport { RemoteView } from \"./views/RemoteView\";\nimport { SettingsView } from \"./views/SettingsView\";\nimport { StatusView } from \"./views/StatusView\";\n\nconst AppWrap = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  animation: ${props => props.theme.animation.fadeIn} 1000ms;\n`;\n\nexport class App extends React.Component {\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <Provider>\n          <GlobalStyle />\n          <Router />\n          <BrowserRouter>\n            <AppWrap>\n              <Switch>\n                <Route path=\"/status\" component={StatusView} />\n                <Route path=\"/map\" component={MapView} />\n                <Route path=\"/remote\" component={RemoteView} />\n                <Route path=\"/bot\" component={BotView} />\n                <Route path=\"/settings\" component={SettingsView} />\n                <Route exact={true} path=\"/\">\n                  <Redirect to=\"/status\" />\n                </Route>\n              </Switch>\n              <MainMenu />\n            </AppWrap>\n          </BrowserRouter>\n        </Provider>\n      </ThemeProvider>\n    );\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"reset-css\";\n\nimport { App } from \"./App\";\n\n// render the application\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}