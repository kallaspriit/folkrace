{"version":3,"sources":["containers/ButtonContainer.ts","containers/AhrsContainer.ts","containers/LogContainer.ts","containers/LidarContainer.ts","lib/transport/Transport.ts","containers/StatusContainer.ts","containers/MeasurementsContainer.ts","containers/OdometryContainer.ts","containers/RobotContainer.ts","config.ts","lib/robot/Robot.ts","lib/transport/MultiTransport.ts","services/nativeTransport.ts","lib/transport/NativeTransport.ts","services/websocketTransport.ts","lib/transport/WebsocketTransport.ts","services/multiTransport.ts","services/robot.ts","handlers/handleSerialCommand.ts","handlers/index.ts","handlers/handleIpCommand.ts","handlers/handleUsbCommand.ts","handlers/handleGetVoltageCommand.ts","handlers/handleButtonCommand.ts","handlers/handleResetCommand.ts","handlers/handleCurrentCommand.ts","handlers/handleLidarStateCommand.ts","handlers/handlePongCommand.ts","handlers/handleEncoderCommand.ts","handlers/handleBeaconCommand.ts","handlers/handleLidarMeasurementCommand.ts","handlers/handleSpeedCommand.ts","handlers/handleAhrsCommand.ts","services/containers.ts","services/log.ts","components/Hub.tsx","components/Icon.tsx","components/Text.tsx","components/MainMenu.tsx","theme.ts","components/View.tsx","components/Grid.tsx","views/MapView.tsx","components/Joystick.tsx","lib/tracked-vehicle-kinematics/TrackedVehicleKinematics.ts","lib/remote-controller/RemoteController.ts","views/RemoteView.tsx","views/SettingsView.tsx","views/SimulationView.tsx","components/BatteryStatus.tsx","services/assertUnreachable.ts","components/LidarStatus.tsx","services/pad.ts","components/AutoScroll.tsx","components/Log.tsx","services/formatTime.ts","components/TransportStatus.tsx","components/UsbStatus.tsx","views/StatusView.tsx","App.tsx","index.tsx","services/map.ts","lib/visualizer/Layer.ts","lib/visualizer/Visualizer.ts","lib/visualizer/index.ts","components/LidarMap.tsx","components/Simulation.tsx","lib/simulator/Simulator.ts","lib/fps-counter/FpsCounter.ts","lib/gamepad/GamepadManager.ts","lib/gamepad/ManagedGamepad.ts","lib/occupancy-grid/OccupancyGrid.ts","lib/statistics/Statistic.ts","lib/statistics/Statistics.ts","lib/simulator/index.ts"],"names":["Button","ButtonState","AhrsContainer","_Container","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","roll","pitch","yaw","lastUpdated","Date","inherits","createClass","key","value","attitude","setState","objectSpread","Container","MessageType","ButtonContainer","_this$state","defineProperty","START","UNKNOWN","LEFT","RIGHT","button","LidarContainer","isStarted","isValid","targetRpm","currentRpm","motorPwm","TransportState","SerialType","SerialState","BatteryState","LogContainer","entries","lastId","message","_this2","avoidDuplicate","undefined","previousState","lastEntry","type","resolveMessageType","toConsumableArray","slice","id","toString","time","count","shift","catch","error","console","substr","RX","TX","ERROR","INFO","MeasurementsContainer","measurements","measurement","OdometryContainer","left","right","RobotContainer","targetSpeed","current","config","webSocket","host","localStorage","webSocketHost","port","webSocketPort","parseInt","useSSL","reconnectInterval","rules","battery","low","critical","vehicle","trackWidth","maxSpeed","wheelDiameter","encoderCountsPerRotation","gearboxRatio","speedUpdateInterval","StatusContainer","serials","BLUETOOTH","DISCONNECTED","deviceName","USB","transportState","typeKey","keys","find","typeName","update","$merge","newState","batteryVoltage","remoteIp","loopFrequency","loopTimeUs","lastBeaconTime","lastResetTime","map","serialName","serial","CONNECTED","get","voltage","CRITICAL","LOW","FULL","Robot","transport","pingSentTime","targetLidarRpm","send","transportOnly","now","command","join","MultiTransport","options","log","listeners","transports","dummyLogger","activeTransport","getActiveTransport","getName","getAvailableTransport","getState","listener","push","_connect","asyncToGenerator","regenerator_default","a","mark","_callee","promises","wrap","_context","prev","next","Promise","resolve","connect","all","stop","connectedTransport","getConnectedTransport","warn","forEach","onMessageSent","addListener","onStateChanged","eventTransport","onError","wasSentSuccessfully","onMessageReceived","isAvailable","nativeTransport","NativeTransport","bridgeExists","native","window","CONNECTING","info","abrupt","app","receive","_this3","_this4","websocketTransport","WebsocketTransport","wasConnected","ws","WebSocket","url","RECONNECTING","onopen","event","onclose","logDetails","code","reason","wasClean","setTimeout","onerror","_event","onmessage","data","multiTransport","addTransport","robot","_ref","status","serialType","serialState","serialDeviceName","connectedSerial","setSerialState","getConnectedSerial","requestState","setBatteryVoltage","commandHandlers","_x","_x2","_handleSerialCommand","ip","setOffline","setRemoteIp","usb","_args","_containerMap","parseFloat","name","PRESSED","RELEASED","setButtonState","toUpperCase","reset","setResetReceived","setCurrent","lidar","pong","pingTimeTaken","addEntry","e","odometry","b","durationMs","cycleCount","setLoopStatistics","l","i","add","angle","distance","quality","timestamp","s","setTargetSpeed","ahrs","setAttitude","containers","logListeners","Hub","_React$Component","isInitialized","react_default","createElement","unstated_es","to","newContainers","containerName","setTransportState","_previousState","_transport","_message$split","split","slicedToArray","includes","handleTransportMessage","_message$split3","_message$split4","toArray","indexOf","handler","handleCommand","React","Component","Icon","styled","_templateObject","props","width","height","theme","text","primary","StatusIcon","Icon_Icon","assign","MapIcon","BotIcon","RemoteIcon","SettingsIcon","BluetoothIcon","SerialIcon","WebsocketIcon","NativeIcon","BatteryIcon","LidarIcon","Text","div","Text_templateObject","Wrap","MainMenu_templateObject","Items","ul","_templateObject2","size","menuHeight","Item","li","_templateObject3","Link","NavLink","_templateObject4","darken","darkerLighterPercentage","bg","secondary","Label","_templateObject5","MainMenu","activeClassName","Icon_StatusIcon","Icon_MapIcon","Icon_BotIcon","Icon_RemoteIcon","Icon_SettingsIcon","tertiary","lighten","quaternary","good","bad","gridGap","animation","fadeIn","keyframes","theme_templateObject","pulse","color","theme_templateObject2","GlobalStyle","createGlobalStyle","theme_templateObject3","CellStatus","View","View_templateObject","fakeMeasurements","MapView","LidarMap","radius","cellSize","Grid","Grid_templateObject","columns","css","Grid_templateObject2","rows","Grid_templateObject3","getGridItemStatusColorMap","GOOD","WARN","BAD","Cell","Grid_templateObject4","Grid_templateObject5","_templateObject6","_templateObject7","Joystick","ref","createRef","el","manager","create","zone","position","top","mode","lockX","x","lockY","y","onEvent","bind","on","nipple","off","className","TrackedVehicleKinematics","speed","omega","limit","targetEncoderCountPerSecond","Math","PI","floor","speeds","maxRequestedSpeedMagnitude","max","abs","normalizationFactor","min","getSpeedEncoderCount","RemoteController","kinematics","scheduleUpdateMotorSpeeds","throttle","updateMotorSpeeds","motorSpeeds","calculateMotorSpeeds","encoderSpeeds","getEncoderSpeeds","setSpeed","RemoteView","remoteController","Joystick_Joystick","onJoystickEvent","isMoveEvent","xPos","sin","radian","yPos","cos","setOmega","Error","SettingsView","onClick","location","href","SimulationView","Simulation","BatteryStatus","batteryStatus","batteryState","assertUnreachable","getBatteryStatus","description","toFixed","requestVoltage","Icon_BatteryIcon","LidarStatus","_getLidarStatus","round","getLidarStatus","stopLidar","startLidar","Icon_LidarIcon","pad","padCharacter","str","missingLength","AutoScroll","scrollToBottom","scrollHeight","clientHeight","scrollTop","_this$props","objectWithoutProperties","children","StatusGridItem","Log_templateObject","LogWrap","Log_templateObject2","LogEntry","Log_templateObject3","LogEntryTime","span","Log_templateObject4","logEntryTypeColorMap","_logEntryTypeColorMap","LogEntryMessage","Log_templateObject5","LogEntryCount","Log_templateObject6","ClearLogButton","Log_templateObject7","ClearLogIcon","_templateObject8","Log","entry","date","getHours","getMinutes","getSeconds","getMilliseconds","clear","TransportStatus","transportStatus","titleCase","ping","Icon_NativeIcon","Icon_WebsocketIcon","UsbStatus","usbStatus","title","StatusView","UsbStatus_UsbStatus","TransportStatus_TransportStatus","BatteryStatus_BatteryStatus","LidarStatus_LidarStatus","Log_Log","App","styled_components_browser_esm","Hub_Hub","BrowserRouter","AppWrap","Switch","Route","path","component","Redirect","MainMenu_MainMenu","App_templateObject","ReactDOM","render","App_App","document","getElementById","inMin","inMax","outMin","outMax","uncapped","Layer","canvas","ctx","transform","mouseDownCounter","frameNumber","isRunning","lastRenderTime","defaultStyle","fillStyle","strokeStyle","font","textBaseline","getTransform","_layer","_info","onMouseDownEvent","onMouseUpEvent","onMouseMoveEvent","getContext","offsetWidth","offsetHeight","setAttribute","style","removeProperty","pointerEvents","horizontalScaling","verticalSkewing","horizontalSkewing","verticalScaling","horizontalTranslation","verticalTranslation","rotation","scale","rotate","applyStyle","onmousedown","handleMouseEvent","onmouseup","onmousemove","scheduleNextFrame","opt","center","screenCenter","worldToScreen","save","beginPath","arc","fill","stroke","restore","lifetime","age","getScale","opacity","alpha","drawCircle","isPolar","screenSize","translate","fillRect","padding","centered","origin","offset","strokeRect","screenFrom","from","screenTo","moveTo","lineTo","defaultRowCount","ceil","cellHeight","defaultColumnCount","cellWidth","toCartesian","row","rowY","drawLine","column","columnX","grid","isArray","occupancy","delta","drawBox","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","_ref3","_ref2","err","return","tipSize","Vector","fromObject","subtract","drawDirection","drawText","screenOrigin","fillText","worldSize","screenToWorld","toX","clone","toY","drawArrow","lineWidth","textAlign","startIndex","values","samples","range","wasAnyValueCapped","cappedValue","isCapped","_ref4","coordinates","angleCorrection","world","_this$toCartesian","screen","_this$toCartesian2","getScreenOrigin","multiply","angleDegrees","setTransform","clearRect","currentTime","dt","frame","layer","requestAnimationFrame","newTime","renderFrame","canvasToScreen","isMouseDown","Visualizer","container","layers","createCanvasElement","append","start","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","__webpack_require__","d","__webpack_exports__","Visualizer_Visualizer","D_projects_folkbot_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","D_projects_folkbot_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","D_projects_folkbot_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","wrapRef","visualizer","D_projects_folkbot_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","D_projects_folkbot_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","setImmediate","setupMap","react__WEBPACK_IMPORTED_MODULE_7___default","Map","mapLayerOptions","createLayer","D_projects_folkbot_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","renderBackground","renderMap","gridSize","circleStep","drawGrid","circleRadius","drawCoordinateSystem","drawMarker","toRadians","D_projects_folkbot_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","D_projects_folkbot_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_projects_folkbot_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","containerRef","simulator","D_projects_folkbot_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","D_projects_folkbot_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","setup","react__WEBPACK_IMPORTED_MODULE_6___default","Simulator","pathPlanningIntervalMs","Stat","FpsCounter","frameDurations","lastFrameTime","historySize","averageSize","frameDuration","reduce","result","GamepadManager","gamepads","autoPoll","onConnect","_gamepad","onDisconnect","onUpdate","navigator","getGamepads","addEventListener","gamepad","index","buttons","axes","managedGamepad","ManagedGamepad","addUpdateListener","updatedGamepad","startPolling","getGamepadByIndex","filter","item","stopPolling","updateListeners","isPolling","animationFrameRequest","poll","cancelAnimationFrame","updateListener","OccupancyGrid","_this$getCellAtCoordi","getCellAtCoordinates","exists","setOccupancy","_this$getCellAtCoordi2","getOccupancy","_this$getSize","getSize","PathFinder","diagonalMovement","DiagonalMovement","Never","heuristic","Heuristic","euclidean","findPath","defaultValue","Statistic","historyLength","Statistics","statistics","statistic","getByName","report","occupancyGrid","fpsCounter","gamepadManager","pulses","gridModificationMode","lastPathPlanningTime","generate","getFirstAvailableGamepad","axisValue","axisIndex","decimalPlaces","onMouseDown","onMouseUp","onMouseMove","renderForeground","FPS","PATH_FINDER","unit","pathStartTime","findShortestPath","pathTimeTaken","drawOccupancyGrid","drawPulses","fps","getFps","drawGraph","getLatest","_ref5","drawPulse","_ref6","currentOccupancy","getOccupancyAt","setOccupancyAt","_ref7","Simulator_Simulator"],"mappings":"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","file":"static/js/main.11d018df.chunk.js","sourcesContent":["import { Container } from \"unstated\";\r\n\r\nexport enum Button {\r\n  START = \"START\",\r\n  LEFT = \"LEFT\",\r\n  RIGHT = \"RIGHT\",\r\n}\r\n\r\nexport enum ButtonState {\r\n  UNKNOWN = \"UNKNOWN\",\r\n  PRESSED = \"PRESSED\",\r\n  RELEASED = \"RELEASED\",\r\n}\r\n\r\nexport type State = { readonly [key in keyof typeof Button]: ButtonState };\r\n\r\nexport class ButtonContainer extends Container<State> {\r\n  readonly state: State = {\r\n    [Button.START]: ButtonState.UNKNOWN,\r\n    [Button.LEFT]: ButtonState.UNKNOWN,\r\n    [Button.RIGHT]: ButtonState.UNKNOWN,\r\n  };\r\n\r\n  setButtonState(button: Button, state: ButtonState) {\r\n    return this.setState({\r\n      [button]: state,\r\n    });\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface Attitude {\r\n  readonly roll: number;\r\n  readonly pitch: number;\r\n  readonly yaw: number;\r\n}\r\n\r\nexport interface State extends Attitude {\r\n  lastUpdated: Date;\r\n}\r\n\r\nexport class AhrsContainer extends Container<State> {\r\n  readonly state: State = {\r\n    roll: 0,\r\n    pitch: 0,\r\n    yaw: 0,\r\n    lastUpdated: new Date(),\r\n  };\r\n\r\n  setAttitude(attitude: Attitude) {\r\n    return this.setState({\r\n      ...attitude,\r\n      lastUpdated: new Date(),\r\n    });\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport enum MessageType {\r\n  INFO = \"INFO\",\r\n  ERROR = \"ERROR\",\r\n  RX = \"RX\",\r\n  TX = \"TX\",\r\n}\r\n\r\nexport interface LogEntry {\r\n  readonly id: string;\r\n  readonly time: Date;\r\n  readonly message: string;\r\n  readonly type: MessageType;\r\n  readonly count: number;\r\n}\r\n\r\nexport interface LogState {\r\n  readonly entries: LogEntry[];\r\n}\r\n\r\nexport const MAX_LOG_ENTRY_COUNT = 200;\r\n\r\nexport class LogContainer extends Container<LogState> {\r\n  readonly state: LogState = {\r\n    entries: [],\r\n  };\r\n\r\n  private lastId = 0;\r\n\r\n  addEntry(message: string, avoidDuplicate = true) {\r\n    // update state (use the callback syntax not to miss any updates if called in series)\r\n    this.setState(previousState => {\r\n      const lastEntry = this.state.entries.length > 0 ? this.state.entries[this.state.entries.length - 1] : null;\r\n      const type = this.resolveMessageType(message);\r\n\r\n      // skip the message if requested not to add the same message twice in a row\r\n      if (lastEntry !== null && avoidDuplicate) {\r\n        // check whether the latest message is the same as last\r\n        if (message === lastEntry.message) {\r\n          const updatedEntries: LogEntry[] = [\r\n            // remove last entry\r\n            ...previousState.entries.slice(0, this.state.entries.length - 1),\r\n            // add it again with updated time\r\n            {\r\n              id: (this.lastId++).toString(),\r\n              time: new Date(),\r\n              message,\r\n              type,\r\n              count: lastEntry.count + 1,\r\n            },\r\n          ];\r\n\r\n          return {\r\n            entries: updatedEntries,\r\n          };\r\n        }\r\n      }\r\n\r\n      // appends the log entry\r\n      const entries: LogEntry[] = [\r\n        ...previousState.entries,\r\n        {\r\n          id: (this.lastId++).toString(),\r\n          time: new Date(),\r\n          message,\r\n          type,\r\n          count: 1,\r\n        },\r\n      ];\r\n\r\n      // limit the number of entries\r\n      while (entries.length > MAX_LOG_ENTRY_COUNT) {\r\n        entries.shift();\r\n      }\r\n\r\n      return {\r\n        entries,\r\n      };\r\n    }).catch(error => console.error(error));\r\n  }\r\n\r\n  clear() {\r\n    this.setState({\r\n      entries: [],\r\n    }).catch(error => console.error(error));\r\n  }\r\n\r\n  private resolveMessageType(message: string): MessageType {\r\n    const firstCharacter = message.substr(0, 1);\r\n\r\n    switch (firstCharacter) {\r\n      case \"<\":\r\n        return MessageType.RX;\r\n\r\n      case \">\":\r\n        return MessageType.TX;\r\n\r\n      case \"@\":\r\n        return MessageType.ERROR;\r\n\r\n      case \"#\":\r\n        return MessageType.INFO;\r\n\r\n      default:\r\n        return MessageType.INFO;\r\n    }\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface State {\r\n  readonly isStarted: boolean;\r\n  readonly isValid: boolean;\r\n  readonly targetRpm: number;\r\n  readonly currentRpm: number;\r\n  readonly motorPwm: number;\r\n}\r\n\r\nexport class LidarContainer extends Container<State> {\r\n  readonly state: State = {\r\n    isStarted: false,\r\n    isValid: false,\r\n    targetRpm: 0,\r\n    currentRpm: 0,\r\n    motorPwm: 0,\r\n  };\r\n\r\n  update(state: State) {\r\n    return this.setState({\r\n      ...state,\r\n    });\r\n  }\r\n}\r\n","export enum TransportState {\r\n  DISCONNECTED = \"DISCONNECTED\",\r\n  CONNECTING = \"CONNECTING\",\r\n  RECONNECTING = \"RECONNECTING\",\r\n  CONNECTED = \"CONNECTED\",\r\n}\r\n\r\nexport interface TransportListener {\r\n  onStateChanged(transport: Transport, newState: TransportState, previousState: TransportState): void;\r\n  onError(transport: Transport, error?: Error): void;\r\n  onMessageSent(transport: Transport, message: string, wasSentSuccessfully: boolean): void;\r\n  onMessageReceived(transport: Transport, message: string): void;\r\n}\r\n\r\nexport interface Transport {\r\n  getName(): string;\r\n  isAvailable(): boolean;\r\n  getState(): TransportState;\r\n  addListener(listener: TransportListener): void;\r\n  connect(): Promise<void>;\r\n  send(message: string): boolean;\r\n}\r\n","import update from \"immutability-helper\";\r\nimport { Container } from \"unstated\";\r\n\r\nimport { config } from \"../config\";\r\nimport { TransportState } from \"../lib/transport/Transport\";\r\n\r\nexport enum SerialType {\r\n  USB = \"usb\",\r\n  BLUETOOTH = \"bluetooth\",\r\n}\r\n\r\nexport enum SerialState {\r\n  CONNECTING = \"CONNECTING\",\r\n  CONNECTED = \"CONNECTED\",\r\n  DISCONNECTED = \"DISCONNECTED\",\r\n  NOT_SUPPORTED = \"NOT_SUPPORTED\",\r\n  DEVICE_NOT_FOUND = \"DEVICE_NOT_FOUND\",\r\n  DISABLED = \"DISABLED\",\r\n}\r\n\r\nexport interface Serial {\r\n  readonly type: SerialType;\r\n  readonly state: SerialState;\r\n  readonly deviceName?: string;\r\n}\r\n\r\nexport type SerialsMap = { readonly [type in keyof typeof SerialType]: Serial };\r\n\r\nexport enum BatteryState {\r\n  UNKNOWN = \"UNKNOWN\",\r\n  FULL = \"FULL\",\r\n  LOW = \"LOW\",\r\n  CRITICAL = \"CRITICAL\",\r\n}\r\n\r\nexport interface State {\r\n  readonly transportState: TransportState;\r\n  readonly serials: SerialsMap;\r\n  readonly batteryVoltage?: number;\r\n  readonly remoteIp?: string;\r\n  readonly lastBeaconTime?: Date;\r\n  readonly lastResetTime?: Date;\r\n  readonly loopFrequency?: number;\r\n  readonly loopTimeUs?: number;\r\n}\r\n\r\nexport class StatusContainer extends Container<State> {\r\n  readonly state: State = {\r\n    serials: {\r\n      BLUETOOTH: {\r\n        type: SerialType.BLUETOOTH,\r\n        state: SerialState.DISCONNECTED,\r\n        deviceName: undefined,\r\n      },\r\n      USB: {\r\n        type: SerialType.USB,\r\n        state: SerialState.DISCONNECTED,\r\n        deviceName: undefined,\r\n      },\r\n    },\r\n    transportState: TransportState.DISCONNECTED,\r\n  };\r\n\r\n  setSerialState(type: SerialType, state: SerialState, deviceName?: string) {\r\n    const typeKey = Object.keys(SerialType).find(\r\n      typeName => SerialType[typeName as keyof typeof SerialType] === type,\r\n    ) as keyof typeof SerialType;\r\n\r\n    // update serial state\r\n    return this.setState(\r\n      update(this.state, {\r\n        serials: {\r\n          [typeKey]: { $merge: { state, deviceName } },\r\n        },\r\n      }),\r\n    );\r\n  }\r\n\r\n  setTransportState(newState: TransportState) {\r\n    return this.setState({\r\n      transportState: newState,\r\n    });\r\n  }\r\n\r\n  setBatteryVoltage(batteryVoltage: number | undefined) {\r\n    return this.setState({\r\n      batteryVoltage,\r\n    });\r\n  }\r\n\r\n  setRemoteIp(remoteIp: string) {\r\n    return this.setState({\r\n      remoteIp,\r\n    });\r\n  }\r\n\r\n  setOffline() {\r\n    return this.setState({\r\n      remoteIp: undefined,\r\n    });\r\n  }\r\n\r\n  setLoopStatistics(loopFrequency: number, loopTimeUs: number) {\r\n    return this.setState({\r\n      lastBeaconTime: new Date(),\r\n      loopFrequency,\r\n      loopTimeUs,\r\n    });\r\n  }\r\n\r\n  setResetReceived() {\r\n    return this.setState({\r\n      lastResetTime: new Date(),\r\n    });\r\n  }\r\n\r\n  getConnectedSerial(): Serial | undefined {\r\n    const serialNames = Object.keys(this.state.serials) as (keyof typeof SerialType)[];\r\n    const connectedSerial = serialNames\r\n      .map(serialName => this.state.serials[serialName])\r\n      .find(serial => serial.state === SerialState.CONNECTED);\r\n\r\n    return connectedSerial;\r\n  }\r\n\r\n  get batteryState(): BatteryState {\r\n    const voltage = this.state.batteryVoltage;\r\n\r\n    if (voltage === undefined) {\r\n      return BatteryState.UNKNOWN;\r\n    }\r\n\r\n    if (voltage <= config.rules.battery.critical) {\r\n      return BatteryState.CRITICAL;\r\n    } else if (voltage <= config.rules.battery.low) {\r\n      return BatteryState.LOW;\r\n    }\r\n\r\n    return BatteryState.FULL;\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface LidarMeasurement {\r\n  readonly angle: number;\r\n  readonly distance: number;\r\n  readonly quality: number;\r\n  readonly timestamp: number;\r\n}\r\n\r\nexport interface State {\r\n  readonly measurements: LidarMeasurement[];\r\n}\r\n\r\nexport class MeasurementsContainer extends Container<State> {\r\n  readonly state: State = {\r\n    measurements: [],\r\n  };\r\n\r\n  add(measurement: LidarMeasurement) {\r\n    const measurements = [...this.state.measurements, measurement];\r\n\r\n    // store a maximum of 360 measurements\r\n    if (measurements.length > 360) {\r\n      measurements.shift();\r\n    }\r\n\r\n    return this.setState({\r\n      measurements,\r\n    });\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface State {\r\n  readonly left: number;\r\n  readonly right: number;\r\n}\r\n\r\nexport class OdometryContainer extends Container<State> {\r\n  readonly state: State = {\r\n    left: 0,\r\n    right: 0,\r\n  };\r\n\r\n  update(left: number, right: number) {\r\n    return this.setState({\r\n      left,\r\n      right,\r\n    });\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface State {\r\n  readonly targetSpeed: {\r\n    readonly left: number;\r\n    readonly right: number;\r\n  };\r\n  readonly current: {\r\n    readonly left: number;\r\n    readonly right: number;\r\n  };\r\n}\r\n\r\nexport class RobotContainer extends Container<State> {\r\n  readonly state: State = {\r\n    targetSpeed: {\r\n      left: 0,\r\n      right: 0,\r\n    },\r\n    current: {\r\n      left: 0,\r\n      right: 0,\r\n    },\r\n  };\r\n\r\n  setTargetSpeed(left: number, right: number) {\r\n    return this.setState({\r\n      targetSpeed: {\r\n        left,\r\n        right,\r\n      },\r\n    });\r\n  }\r\n\r\n  setCurrent(left: number, right: number) {\r\n    return this.setState({\r\n      current: {\r\n        left,\r\n        right,\r\n      },\r\n    });\r\n  }\r\n}\r\n","// import { TrackedVehicleOptions } from \"./lib/tracked-vehicle-kinematics\";\r\n// import { WebSocketClientOptions } from \"./lib/web-socket-client/index\";\r\n\r\n// export interface RulesConfig {\r\n//   battery: {\r\n//     low: number;\r\n//     critical: number;\r\n//   };\r\n// }\r\n\r\n// export interface Config {\r\n//   webSocket: WebSocketClientOptions;\r\n//   rules: RulesConfig;\r\n//   vehicle: TrackedVehicleOptions;\r\n// }\r\n\r\nexport const config = {\r\n  webSocket: {\r\n    // allow overriding web-socket options via local storage\r\n    host:\r\n      // process.env.NODE_ENV === \"development\" &&\r\n      localStorage.webSocketHost !== undefined ? localStorage.webSocketHost : \"127.0.0.1\",\r\n    port: localStorage.webSocketPort !== undefined ? parseInt(localStorage.webSocketPort, 10) : 8000,\r\n    useSSL: false,\r\n    reconnectInterval: 3000,\r\n  },\r\n  rules: {\r\n    battery: {\r\n      low: 15.0,\r\n      critical: 13.5,\r\n    },\r\n  },\r\n  vehicle: {\r\n    trackWidth: 0.15, // meters\r\n    maxSpeed: 1, // meters per second\r\n    wheelDiameter: 0.039, // meters\r\n    encoderCountsPerRotation: 20, // encoder pulse count per revolution\r\n    gearboxRatio: 25, // 25/1 gearbox ratio\r\n    speedUpdateInterval: 50, // 20Hz\r\n  },\r\n};\r\n","import { Transport } from \"../transport/Transport\";\r\n\r\nexport interface RobotConfig {\r\n  targetLidarRpm?: number;\r\n}\r\n\r\nexport type SendArgument = string | number;\r\n\r\nexport class Robot {\r\n  pingSentTime?: number;\r\n\r\n  private readonly config: Required<RobotConfig>;\r\n\r\n  constructor(private readonly transport: Transport, config: RobotConfig = {}) {\r\n    this.config = {\r\n      targetLidarRpm: 300,\r\n      ...config,\r\n    };\r\n  }\r\n\r\n  requestVoltage() {\r\n    this.send(\"voltage\");\r\n  }\r\n\r\n  requestState() {\r\n    this.send(\"state\");\r\n  }\r\n\r\n  setSpeed(left: number, right: number) {\r\n    this.send(\"s\", left, right);\r\n  }\r\n\r\n  ping(transportOnly = false) {\r\n    this.pingSentTime = Date.now();\r\n\r\n    if (transportOnly) {\r\n      // send internal ping command if testing the transport only (Android responds to this)\r\n      this.send(\"!ping\");\r\n    } else {\r\n      // send full ping, responded by the MCU\r\n      this.send(\"ping\");\r\n    }\r\n  }\r\n\r\n  startLidar(): void {\r\n    this.send(`rpm:${this.config.targetLidarRpm}`);\r\n  }\r\n\r\n  stopLidar(): void {\r\n    this.send(\"rpm:0\");\r\n  }\r\n\r\n  // don't use directly, add new robot method\r\n  private send(command: string, ...args: SendArgument[]) {\r\n    const message = `${command}${args.length > 0 ? \":\" : \"\"}${args.join(\":\")}`;\r\n\r\n    this.transport.send(message);\r\n  }\r\n}\r\n","import { dummyLogger, Logger } from \"ts-log\";\r\n\r\nimport { log as logGlobal } from \"../../services/log\";\r\n\r\nimport { Transport, TransportListener, TransportState } from \"./Transport\";\r\n\r\nexport interface MultiTransportOptions {\r\n  log?: Logger;\r\n}\r\n\r\nexport class MultiTransport implements Transport {\r\n  private readonly options: Required<MultiTransportOptions>;\r\n  private readonly log: Logger;\r\n  private readonly listeners: TransportListener[] = [];\r\n  private readonly transports: Transport[] = [];\r\n\r\n  constructor(options: MultiTransportOptions = {}) {\r\n    this.options = {\r\n      log: dummyLogger,\r\n      ...options,\r\n    };\r\n    this.log = this.options.log;\r\n  }\r\n\r\n  getName() {\r\n    const activeTransport = this.getActiveTransport();\r\n\r\n    // return none if no transport is available\r\n    if (!activeTransport) {\r\n      return \"None\";\r\n    }\r\n\r\n    // return active transport name\r\n    return activeTransport.getName();\r\n  }\r\n\r\n  isAvailable() {\r\n    return this.getAvailableTransport() !== undefined;\r\n  }\r\n\r\n  getState() {\r\n    const activeTransport = this.getActiveTransport();\r\n\r\n    // return disconnected if no transport is available\r\n    if (!activeTransport) {\r\n      return TransportState.DISCONNECTED;\r\n    }\r\n\r\n    // return active transport state\r\n    return activeTransport.getState();\r\n  }\r\n\r\n  addListener(listener: TransportListener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  async connect() {\r\n    // call connect on all disconnected transports\r\n    const promises = this.transports.map(transport => {\r\n      if (transport.getState() !== TransportState.DISCONNECTED) {\r\n        return Promise.resolve();\r\n      }\r\n\r\n      return transport.connect();\r\n    });\r\n\r\n    // wait for all transports to connect\r\n    await Promise.all(promises);\r\n  }\r\n\r\n  send(message: string) {\r\n    const connectedTransport = this.getConnectedTransport();\r\n\r\n    if (!connectedTransport) {\r\n      this.log.warn(`sending message \"${message}\" requested but there is no connected transport available`);\r\n\r\n      // notify of failed message sending attempt\r\n      this.listeners.forEach(listener => listener.onMessageSent(this, message, false));\r\n\r\n      return false;\r\n    }\r\n\r\n    return connectedTransport.send(message);\r\n  }\r\n\r\n  addTransport(transport: Transport) {\r\n    // listen for transport events and forward active transport events\r\n    transport.addListener({\r\n      onStateChanged: (eventTransport, newState, previousState) => {\r\n        const activeTransport = this.getActiveTransport();\r\n\r\n        if (eventTransport !== activeTransport) {\r\n          return;\r\n        }\r\n\r\n        this.listeners.forEach(listener => listener.onStateChanged(eventTransport, newState, previousState));\r\n      },\r\n      onError: (eventTransport, error) => {\r\n        const activeTransport = this.getActiveTransport();\r\n\r\n        if (eventTransport !== activeTransport) {\r\n          return;\r\n        }\r\n\r\n        this.listeners.forEach(listener => listener.onError(eventTransport, error));\r\n      },\r\n      onMessageSent: (eventTransport, message, wasSentSuccessfully: boolean) => {\r\n        const activeTransport = this.getActiveTransport();\r\n\r\n        if (eventTransport !== activeTransport) {\r\n          return;\r\n        }\r\n\r\n        this.listeners.forEach(listener => listener.onMessageSent(eventTransport, message, wasSentSuccessfully));\r\n      },\r\n      onMessageReceived: (eventTransport, message) => {\r\n        const activeTransport = this.getActiveTransport();\r\n\r\n        if (eventTransport !== activeTransport) {\r\n          return;\r\n        }\r\n\r\n        this.listeners.forEach(listener => listener.onMessageReceived(eventTransport, message));\r\n      },\r\n    });\r\n\r\n    this.transports.push(transport);\r\n  }\r\n\r\n  getAvailableTransport() {\r\n    // return first available transport\r\n    return this.transports.find(transport => transport.isAvailable());\r\n  }\r\n\r\n  getConnectedTransport() {\r\n    // return first connected transport if any\r\n    return this.transports.find(transport => transport.getState() === TransportState.CONNECTED);\r\n  }\r\n\r\n  getActiveTransport() {\r\n    const connectedTransport = this.getConnectedTransport();\r\n\r\n    // return first connected transport if exists\r\n    if (connectedTransport) {\r\n      return connectedTransport;\r\n    }\r\n\r\n    // return first available transport if exists\r\n    return this.getAvailableTransport();\r\n  }\r\n}\r\n","import { NativeTransport } from \"../lib/transport/NativeTransport\";\r\n\r\nexport const nativeTransport = new NativeTransport({\r\n  // log: console\r\n});\r\n","import { dummyLogger, Logger } from \"ts-log\";\r\n\r\nimport { Transport, TransportListener, TransportState } from \"./Transport\";\r\n\r\ninterface BridgeInterface {\r\n  receive(message: string): void;\r\n}\r\n\r\n// extend the global window interface with the bridge interfaces\r\ndeclare global {\r\n  interface Window {\r\n    native?: BridgeInterface;\r\n    app?: BridgeInterface;\r\n  }\r\n}\r\n\r\nexport interface NativeTransportOptions {\r\n  log?: Logger;\r\n}\r\n\r\nexport class NativeTransport implements Transport {\r\n  private readonly options: Required<NativeTransportOptions>;\r\n  private readonly log: Logger;\r\n  private readonly listeners: TransportListener[] = [];\r\n  private readonly bridgeExists: boolean;\r\n  private state: TransportState = TransportState.DISCONNECTED;\r\n  private native?: BridgeInterface;\r\n\r\n  constructor(options: NativeTransportOptions = {}) {\r\n    this.options = {\r\n      log: dummyLogger,\r\n      ...options,\r\n    };\r\n    this.log = this.options.log;\r\n    this.bridgeExists = window.native !== undefined;\r\n  }\r\n\r\n  getName() {\r\n    return \"Native\";\r\n  }\r\n\r\n  isAvailable() {\r\n    return this.bridgeExists;\r\n  }\r\n\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  addListener(listener: TransportListener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  async connect() {\r\n    // attempt to connect\r\n    this.setState(TransportState.CONNECTING);\r\n\r\n    // default to using mock interface if not available\r\n    if (window.native === undefined) {\r\n      this.log.info(\"no native bridge is available\");\r\n\r\n      // connection failed\r\n      this.setState(TransportState.DISCONNECTED);\r\n\r\n      return;\r\n    }\r\n\r\n    this.log.info(\"native bridge is available\");\r\n\r\n    // store reference to the native javascript bridge interface\r\n    this.native = window.native;\r\n\r\n    // setup native to app interface\r\n    window.app = {\r\n      receive: message => this.onMessageReceived(message),\r\n    };\r\n\r\n    // perform handshake to test connection\r\n    this.send(\"!handshake\");\r\n\r\n    // set connecting state until handshake response is received\r\n    this.setState(TransportState.CONNECTING);\r\n  }\r\n\r\n  send(message: string) {\r\n    // fail to send if no bridge available\r\n    if (!this.native) {\r\n      this.log.warn(`sending message \"${message}\" requested but the native bridge is not available`);\r\n\r\n      // notify of failed message sending attempt\r\n      this.listeners.forEach(listener => listener.onMessageSent(this, message, false));\r\n\r\n      return false;\r\n    }\r\n\r\n    // attempt to send the message\r\n    try {\r\n      // call the receive native bridge function\r\n      this.native.receive(message);\r\n\r\n      // notify of message sent\r\n      this.listeners.forEach(listener => listener.onMessageSent(this, message, true));\r\n\r\n      return true;\r\n    } catch (error) {\r\n      // notify of error\r\n      this.listeners.forEach(listener => listener.onError(this, error));\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private setState(newState: TransportState) {\r\n    // ignore if state did not change\r\n    if (newState === this.state) {\r\n      return;\r\n    }\r\n\r\n    // remember previous state\r\n    const previousState = this.state;\r\n\r\n    // update current state\r\n    this.state = newState;\r\n\r\n    // notify the listeners of state change\r\n    this.listeners.forEach(listener => listener.onStateChanged(this, newState, previousState));\r\n  }\r\n\r\n  private onMessageReceived(message: string) {\r\n    this.log.info(`received: \"${message}\"`);\r\n\r\n    // notify the listeners of message received\r\n    this.listeners.forEach(listener => listener.onMessageReceived(this, message));\r\n\r\n    // handle handshake response\r\n    if (message === \"!handshake\") {\r\n      // consider connection successful\r\n      this.setState(TransportState.CONNECTED);\r\n    }\r\n  }\r\n}\r\n","import { config } from \"../config\";\r\nimport { WebsocketTransport } from \"../lib/transport/WebsocketTransport\";\r\n\r\nexport const websocketTransport = new WebsocketTransport({\r\n  ...config.webSocket,\r\n  // log: console\r\n});\r\n","import { dummyLogger, Logger } from \"ts-log\";\r\n\r\nimport { Transport, TransportListener, TransportState } from \"./Transport\";\r\n\r\nexport interface WebsocketTransportOptions {\r\n  host: string;\r\n  port: number;\r\n  useSSL?: boolean;\r\n  reconnectInterval?: number;\r\n  log?: Logger;\r\n}\r\n\r\nexport class WebsocketTransport implements Transport {\r\n  private readonly options: Required<WebsocketTransportOptions>;\r\n  private readonly log: Logger;\r\n  private readonly listeners: TransportListener[] = [];\r\n  private state: TransportState = TransportState.DISCONNECTED;\r\n  private wasConnected = false;\r\n  private ws?: WebSocket;\r\n\r\n  constructor(options: WebsocketTransportOptions) {\r\n    this.options = {\r\n      useSSL: false,\r\n      log: dummyLogger,\r\n      reconnectInterval: 1000,\r\n      ...options,\r\n    };\r\n    this.log = this.options.log;\r\n  }\r\n\r\n  getName() {\r\n    return \"WebSocket\";\r\n  }\r\n\r\n  isAvailable() {\r\n    return WebSocket !== undefined;\r\n  }\r\n\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  addListener(listener: TransportListener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  async connect() {\r\n    const url = `${this.options.useSSL ? \"wss\" : \"ws\"}://${this.options.host}:${this.options.port}`;\r\n\r\n    this.log.info(`connecting to web-socket server at ${url}`);\r\n\r\n    // update state depending on whether the connection was ever established\r\n    this.setState(this.wasConnected ? TransportState.RECONNECTING : TransportState.CONNECTING);\r\n\r\n    // attempt to open web-socket connection\r\n    this.ws = new WebSocket(url);\r\n\r\n    // handle open event\r\n    this.ws.onopen = event => {\r\n      this.log.info(\"established web-socket connection\");\r\n\r\n      this.wasConnected = true;\r\n\r\n      // update state\r\n      this.setState(TransportState.CONNECTED);\r\n    };\r\n\r\n    // handle close event\r\n    this.ws.onclose = event => {\r\n      const logDetails = `code: ${event.code}, reason: ${event.reason}, was clean: ${event.wasClean ? \"yes\" : \"no\"}`;\r\n\r\n      if (this.wasConnected) {\r\n        this.log.warn(`connection to web-socket was lost (${logDetails})`);\r\n      } else {\r\n        this.log.warn(`connecting to web-socket failed (${logDetails})`);\r\n      }\r\n\r\n      // update state\r\n      this.setState(TransportState.DISCONNECTED);\r\n\r\n      // attempt to reconnect\r\n      setTimeout(() => {\r\n        void this.connect();\r\n      }, this.options.reconnectInterval);\r\n    };\r\n\r\n    // handle error event\r\n    this.ws.onerror = _event => {\r\n      this.log.warn(\"got web-socket error\");\r\n\r\n      // notify the listeners\r\n      this.listeners.forEach(listener => listener.onError(this));\r\n    };\r\n\r\n    // handle message event\r\n    this.ws.onmessage = event => {\r\n      const message = event.data;\r\n\r\n      // notify the listeners of message received\r\n      this.listeners.forEach(listener => listener.onMessageReceived(this, message));\r\n    };\r\n  }\r\n\r\n  send(message: string) {\r\n    // we can only send messages if we're connected\r\n    if (!this.ws || this.state !== TransportState.CONNECTED) {\r\n      this.log.warn(`sending message \"${message}\" requested but websocket state is ${this.state}`);\r\n\r\n      // notify of failed message sending attempt\r\n      this.listeners.forEach(listener => listener.onMessageSent(this, message, false));\r\n\r\n      return false;\r\n    }\r\n\r\n    // send the message\r\n    this.ws.send(message);\r\n\r\n    // notify the listeners\r\n    this.listeners.forEach(listener => listener.onMessageSent(this, message, true));\r\n\r\n    return true;\r\n  }\r\n\r\n  private setState(newState: TransportState) {\r\n    // ignore if state did not change\r\n    if (newState === this.state) {\r\n      return;\r\n    }\r\n\r\n    // remember previous state\r\n    const previousState = this.state;\r\n\r\n    // update current state\r\n    this.state = newState;\r\n\r\n    // notify the listeners of state change\r\n    this.listeners.forEach(listener => listener.onStateChanged(this, newState, previousState));\r\n  }\r\n}\r\n","import { MultiTransport } from \"../lib/transport/MultiTransport\";\r\n\r\nimport { nativeTransport } from \"./nativeTransport\";\r\nimport { websocketTransport } from \"./websocketTransport\";\r\n\r\nexport const multiTransport = new MultiTransport({\r\n  // log: console\r\n});\r\n\r\n// register sub-transports in preferred order\r\nmultiTransport.addTransport(nativeTransport);\r\nmultiTransport.addTransport(websocketTransport);\r\n","import { Robot } from \"../lib/robot\";\r\n\r\nimport { multiTransport } from \"./multiTransport\";\r\n\r\nexport const robot = new Robot(multiTransport);\r\n","import { SerialState, SerialType } from \"../containers/StatusContainer\";\r\nimport { ContainerMap } from \"../services/containers\";\r\nimport { robot } from \"../services/robot\";\r\n\r\nexport async function handleSerialCommand(args: string[], { status }: ContainerMap) {\r\n  // extract serial info\r\n  const serialType = args[0] as SerialType;\r\n  const serialState = args[1] as SerialState;\r\n  const serialDeviceName = typeof args[2] === \"string\" ? args[2] : undefined;\r\n\r\n  // update serial state\r\n  await status.setSerialState(serialType, serialState, serialDeviceName);\r\n\r\n  const connectedSerial = status.getConnectedSerial();\r\n\r\n  // ask for some initial state info once a serial connection is established\r\n  if (connectedSerial !== undefined && serialType === connectedSerial.type) {\r\n    // request current state\r\n    robot.requestState();\r\n\r\n    // also setup an interval to ask the voltage level periodically\r\n    // requestBatteryVoltageInterval = window.setInterval(() => {\r\n    //   requestVoltage();\r\n    // }, REQUEST_BATTERY_VOLTAGE_INTERVAL);\r\n  } else {\r\n    // clear the battery voltage interval if exists\r\n    // if (requestBatteryVoltageInterval !== null) {\r\n    //   window.clearInterval(requestBatteryVoltageInterval);\r\n\r\n    //   requestBatteryVoltageInterval = null;\r\n    // }\r\n\r\n    // no serial connection so we can't be sure of battery voltage\r\n    void status.setBatteryVoltage(undefined);\r\n  }\r\n}\r\n","import { ContainerMap } from \"../services/containers\";\r\n\r\nimport { handleAhrsCommand } from \"./handleAhrsCommand\";\r\nimport { handleBeaconCommand } from \"./handleBeaconCommand\";\r\nimport { handleButtonCommand } from \"./handleButtonCommand\";\r\nimport { handleCurrentCommand } from \"./handleCurrentCommand\";\r\nimport { handleEncoderCommand } from \"./handleEncoderCommand\";\r\nimport { handleVoltageCommand } from \"./handleGetVoltageCommand\";\r\nimport { handleIpCommand } from \"./handleIpCommand\";\r\nimport { handleLidarMeasurementCommand } from \"./handleLidarMeasurementCommand\";\r\nimport { handleLidarStateCommand } from \"./handleLidarStateCommand\";\r\nimport { handlePongCommand } from \"./handlePongCommand\";\r\nimport { handleResetCommand } from \"./handleResetCommand\";\r\nimport { handleSerialCommand } from \"./handleSerialCommand\";\r\nimport { handleSpeedCommand } from \"./handleSpeedCommand\";\r\nimport { handleUsbCommand } from \"./handleUsbCommand\";\r\n\r\nexport type CommandHandlerFn = (args: string[], containers: ContainerMap) => void;\r\n\r\nexport interface CommandHandlersMap {\r\n  [x: string]: CommandHandlerFn | undefined;\r\n}\r\n\r\nexport const commandHandlers: CommandHandlersMap = {\r\n  serial: handleSerialCommand,\r\n  ip: handleIpCommand,\r\n  usb: handleUsbCommand,\r\n  voltage: handleVoltageCommand,\r\n  button: handleButtonCommand,\r\n  reset: handleResetCommand,\r\n  current: handleCurrentCommand,\r\n  lidar: handleLidarStateCommand,\r\n  pong: handlePongCommand,\r\n  e: handleEncoderCommand,\r\n  b: handleBeaconCommand,\r\n  l: handleLidarMeasurementCommand,\r\n  s: handleSpeedCommand,\r\n  a: handleAhrsCommand,\r\n};\r\n\r\n// handles parsed web-socket commands\r\nexport function handleCommand(name: string, args: string[], containers: ContainerMap) {\r\n  const handler = commandHandlers[name];\r\n\r\n  // check whether the handler exists\r\n  if (handler === undefined) {\r\n    console.warn(`missing web-socket command handler for \"${name}\" (${args.join(\", \")})`);\r\n\r\n    return;\r\n  }\r\n\r\n  // call the handler\r\n  handler(args, containers);\r\n}\r\n","import { ContainerMap } from \"../services/containers\";\r\n\r\nexport function handleIpCommand(args: string[], { status }: ContainerMap) {\r\n  const remoteIp = args[0];\r\n  const isOffline = remoteIp === \"null\";\r\n\r\n  if (!isOffline) {\r\n    void status.setRemoteIp(remoteIp);\r\n  } else {\r\n    void status.setOffline();\r\n  }\r\n}\r\n","import { ContainerMap } from \"../services/containers\";\r\n\r\nexport function handleUsbCommand(_args: string[], _containerMap: ContainerMap) {\r\n  // const vendorId = parseInt(args[0], 10);\r\n  // const productId = parseInt(args[1], 10);\r\n  // const productName = args[2];\r\n  // TODO: store in status?\r\n  // console.log(\"usb\", {\r\n  //   vendorId,\r\n  //   productId,\r\n  //   productName\r\n  // });\r\n}\r\n","import { ContainerMap } from \"../services/containers\";\r\n\r\nexport function handleVoltageCommand(args: string[], { status }: ContainerMap) {\r\n  const voltage = parseFloat(args[0]);\r\n\r\n  void status.setBatteryVoltage(voltage);\r\n}\r\n","import { Button, ButtonState } from \"../containers/ButtonContainer\";\r\nimport { ContainerMap } from \"../services/containers\";\r\n\r\nexport function handleButtonCommand(args: string[], { button }: ContainerMap) {\r\n  const name = args[0];\r\n  const state = parseInt(args[1], 10) === 0 ? ButtonState.PRESSED : ButtonState.RELEASED;\r\n\r\n  void button.setButtonState(name.toUpperCase() as Button, state);\r\n}\r\n","import { ContainerMap } from \"../services/containers\";\r\n\r\nexport function handleResetCommand(_args: string[], { status }: ContainerMap) {\r\n  void status.setResetReceived();\r\n}\r\n","import { ContainerMap } from \"../services/containers\";\r\n\r\nexport function handleCurrentCommand(args: string[], { robot }: ContainerMap) {\r\n  const left = parseInt(args[0], 10);\r\n  const right = parseInt(args[1], 10);\r\n\r\n  void robot.setCurrent(left, right);\r\n}\r\n","import { ContainerMap } from \"../services/containers\";\r\n\r\nexport function handleLidarStateCommand(args: string[], { lidar }: ContainerMap) {\r\n  const isStarted = parseInt(args[0], 10) === 1;\r\n  const isValid = parseInt(args[1], 10) === 1;\r\n  const targetRpm = parseFloat(args[2]);\r\n  const currentRpm = parseFloat(args[3]);\r\n  const motorPwm = parseFloat(args[4]);\r\n\r\n  void lidar.update({\r\n    isStarted,\r\n    isValid,\r\n    targetRpm,\r\n    currentRpm,\r\n    motorPwm,\r\n  });\r\n}\r\n","import { ContainerMap } from \"../services/containers\";\r\nimport { robot } from \"../services/robot\";\r\n\r\nexport function handlePongCommand(args: string[], { log }: ContainerMap) {\r\n  if (!robot.pingSentTime) {\r\n    return;\r\n  }\r\n\r\n  const pingTimeTaken = Date.now() - robot.pingSentTime;\r\n\r\n  robot.pingSentTime = undefined;\r\n\r\n  log.addEntry(`# ping: ${pingTimeTaken} ms`);\r\n}\r\n","import { ContainerMap } from \"../services/containers\";\r\n\r\nexport function handleEncoderCommand(args: string[], { odometry }: ContainerMap) {\r\n  const left = parseInt(args[0], 10);\r\n  const right = parseInt(args[1], 10);\r\n\r\n  void odometry.update(left, right);\r\n}\r\n","import { ContainerMap } from \"../services/containers\";\r\n\r\nexport function handleBeaconCommand(args: string[], { status }: ContainerMap) {\r\n  const durationMs = parseInt(args[0], 10);\r\n  const cycleCount = parseInt(args[1], 10);\r\n  const loopFrequency = (cycleCount / durationMs) * 1000;\r\n  const loopTimeUs = (durationMs / cycleCount) * 1000;\r\n\r\n  void status.setLoopStatistics(loopFrequency, loopTimeUs);\r\n}\r\n","import { ContainerMap } from \"../services/containers\";\r\n\r\nexport function handleLidarMeasurementCommand(args: string[], { measurements }: ContainerMap) {\r\n  // the command includes 4 measurements\r\n  for (let i = 0; i < 4; i++) {\r\n    void measurements.add({\r\n      angle: parseInt(args[0 + i * 3], 10),\r\n      distance: parseInt(args[1 + i * 3], 10),\r\n      quality: parseInt(args[2 + i * 3], 10),\r\n      timestamp: Date.now(),\r\n    });\r\n  }\r\n}\r\n","import { ContainerMap } from \"../services/containers\";\r\n\r\nexport function handleSpeedCommand(args: string[], { robot }: ContainerMap) {\r\n  const left = parseInt(args[0], 10);\r\n  const right = parseInt(args[1], 10);\r\n\r\n  void robot.setTargetSpeed(left, right);\r\n}\r\n","import { ContainerMap } from \"../services/containers\";\r\n\r\nexport function handleAhrsCommand(args: string[], { ahrs }: ContainerMap) {\r\n  // console.log(\"measurement\", { args });\r\n  void ahrs.setAttitude({\r\n    roll: parseFloat(args[0]),\r\n    pitch: parseFloat(args[1]),\r\n    yaw: parseFloat(args[2]),\r\n  });\r\n}\r\n","import { AhrsContainer } from \"../containers/AhrsContainer\";\r\nimport { ButtonContainer } from \"../containers/ButtonContainer\";\r\nimport { LidarContainer } from \"../containers/LidarContainer\";\r\nimport { LogContainer } from \"../containers/LogContainer\";\r\nimport { MeasurementsContainer } from \"../containers/MeasurementsContainer\";\r\nimport { OdometryContainer } from \"../containers/OdometryContainer\";\r\nimport { RobotContainer } from \"../containers/RobotContainer\";\r\nimport { StatusContainer } from \"../containers/StatusContainer\";\r\n\r\nexport interface ContainerMap {\r\n  log: LogContainer;\r\n  status: StatusContainer;\r\n  odometry: OdometryContainer;\r\n  lidar: LidarContainer;\r\n  button: ButtonContainer;\r\n  robot: RobotContainer;\r\n  measurements: MeasurementsContainer;\r\n  ahrs: AhrsContainer;\r\n}\r\n\r\n// initial lie\r\nexport const containers: ContainerMap = {} as ContainerMap;\r\n\r\n// updates the containers to use\r\nexport function setContainers(newContainers: ContainerMap) {\r\n  Object.keys(newContainers).forEach(key => {\r\n    const containerName = key as keyof ContainerMap;\r\n\r\n    containers[containerName] = newContainers[containerName];\r\n  });\r\n}\r\n","// simple log listener function\r\nexport type LogListenerFn = (message: string) => void;\r\n\r\n// list of registered log listeners\r\nexport const logListeners: LogListenerFn[] = [];\r\n\r\n// registers a new log listener\r\nexport const addLogListener = (listener: LogListenerFn) => {\r\n  logListeners.push(listener);\r\n};\r\n\r\n// global log function callable from anywhere, can be intercepted by any number of listeners\r\nexport const log = (message: string) => logListeners.forEach(listener => listener(message));\r\n","import React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { AhrsContainer } from \"../containers/AhrsContainer\";\r\nimport { ButtonContainer } from \"../containers/ButtonContainer\";\r\nimport { LidarContainer } from \"../containers/LidarContainer\";\r\nimport { LogContainer } from \"../containers/LogContainer\";\r\nimport { MeasurementsContainer } from \"../containers/MeasurementsContainer\";\r\nimport { OdometryContainer } from \"../containers/OdometryContainer\";\r\nimport { RobotContainer } from \"../containers/RobotContainer\";\r\nimport { StatusContainer } from \"../containers/StatusContainer\";\r\nimport { handleCommand } from \"../handlers\";\r\nimport { ContainerMap, setContainers } from \"../services/containers\";\r\nimport { addLogListener } from \"../services/log\";\r\nimport { multiTransport } from \"../services/multiTransport\";\r\n\r\n// connects transport to containers, does not render anything visual\r\nexport class Hub extends React.Component {\r\n  private isInitialized = false;\r\n\r\n  render() {\r\n    return (\r\n      <Subscribe\r\n        to={[\r\n          LogContainer,\r\n          StatusContainer,\r\n          OdometryContainer,\r\n          LidarContainer,\r\n          ButtonContainer,\r\n          RobotContainer,\r\n          MeasurementsContainer,\r\n          AhrsContainer\r\n        ]}\r\n      >\r\n        {(\r\n          log: LogContainer,\r\n          status: StatusContainer,\r\n          odometry: OdometryContainer,\r\n          lidar: LidarContainer,\r\n          button: ButtonContainer,\r\n          robot: RobotContainer,\r\n          measurements: MeasurementsContainer,\r\n          ahrs: AhrsContainer\r\n        ) => {\r\n          // only initialize the connection logic once\r\n          if (this.isInitialized) {\r\n            return null;\r\n          }\r\n\r\n          // setup container map\r\n          const containers: ContainerMap = {\r\n            log,\r\n            status,\r\n            odometry,\r\n            lidar,\r\n            button,\r\n            robot,\r\n            measurements,\r\n            ahrs\r\n          };\r\n\r\n          // make the containers globally available\r\n          setContainers(containers);\r\n\r\n          // register as log listener and proxy to log container\r\n          addLogListener(message => log.addEntry(message));\r\n\r\n          // set initial transport state\r\n          void status.setTransportState(multiTransport.getState());\r\n\r\n          // subscribe to transport events\r\n          multiTransport.addListener({\r\n            onStateChanged: (transport, newState, _previousState) => {\r\n              log.addEntry(\r\n                `# ${transport.getName()} state changed to ${newState}`\r\n              );\r\n\r\n              void status.setTransportState(newState);\r\n            },\r\n            onError: (_transport, error) => {\r\n              log.addEntry(\r\n                `# transport error occurred${\r\n                  error ? ` (${error.message})` : \"\"\r\n                }`\r\n              );\r\n            },\r\n            onMessageSent: (\r\n              _transport,\r\n              message,\r\n              wasSentSuccessfully: boolean\r\n            ) => {\r\n              const [command] = message.split(\":\");\r\n              const noLogCommands = [\"ping\", \"!ping\"];\r\n\r\n              // don't log single-character recurring commands (\"s\" for speed etc)\r\n              if (command.length === 1 || noLogCommands.includes(command)) {\r\n                return;\r\n              }\r\n\r\n              log.addEntry(\r\n                `> ${message}${!wasSentSuccessfully ? \" (sending failed)\" : \"\"}`\r\n              );\r\n            },\r\n            onMessageReceived: (_transport, message) => {\r\n              this.handleTransportMessage(message, containers);\r\n            }\r\n          });\r\n\r\n          // attempt to establish connection\r\n          void multiTransport.connect();\r\n\r\n          // don't run this logic again\r\n          this.isInitialized = true;\r\n\r\n          // don't render anything\r\n          return null;\r\n        }}\r\n      </Subscribe>\r\n    );\r\n  }\r\n\r\n  // handles web-socket messages\r\n  private handleTransportMessage(message: string, containers: ContainerMap) {\r\n    // ignore empty messages\r\n    if (message.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // parse message\r\n    const [command, ...args] = message.split(\":\");\r\n    const noLogCommands = [\"pong\", \"lidar\"];\r\n\r\n    // dont log single-character commands (fast lidar measurements, encoders etc)\r\n    if (command.length > 1 && noLogCommands.indexOf(command) === -1) {\r\n      containers.log.addEntry(`< ${message}`);\r\n    }\r\n\r\n    // attempt to handle command\r\n    handleCommand(command, args, containers);\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport interface IconProps {\r\n  url: string;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport const Icon = styled.i<IconProps>`\r\n  display: block;\r\n  width: ${props => props.width}px;\r\n  height: ${props => props.height}px;\r\n  mask-image: url(${props => props.url});\r\n  mask-size: ${props => props.height}px ${props => props.width}px;\r\n  mask-repeat: no-repeat;\r\n  mask-position: center center;\r\n  background-color: ${props => props.theme.text.primary};\r\n`;\r\n\r\nexport const StatusIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/status.svg\" width={37} height={32} />\r\n);\r\n\r\nexport const MapIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/map.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const BotIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/bot.svg\" width={27} height={32} />\r\n);\r\n\r\nexport const RemoteIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/remote.svg\" width={44} height={32} />\r\n);\r\n\r\nexport const SettingsIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/settings.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const BluetoothIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/bluetooth.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const SerialIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/serial.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const WebsocketIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/websocket.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const NativeIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/native.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const BatteryIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/battery.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const ClearIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/clear.svg\" width={32} height={32} />\r\n);\r\n\r\nexport const LidarIcon: React.SFC = props => (\r\n  <Icon {...props} url=\"icons/lidar.svg\" width={32} height={32} />\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nexport interface TextProps {\r\n  primary?: boolean;\r\n}\r\n\r\nexport const Text = styled.div<TextProps>`\r\n  text-align: center;\r\n  font-variant: ${props => (props.primary ? \"all-small-caps\" : \"normal\")};\r\n  line-height: 1.2em;\r\n`;\r\n","import { darken } from \"polished\";\r\nimport React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { BotIcon, MapIcon, RemoteIcon, SettingsIcon, StatusIcon } from \"./Icon\";\r\nimport { Text } from \"./Text\";\r\n\r\nconst Wrap = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  background-color: #000;\r\n`;\r\n\r\nconst Items = styled.ul`\r\n  display: flex;\r\n  flex-direction: row;\r\n  height: ${props => props.theme.size.menuHeight};\r\n  flex: 1;\r\n  max-width: 600px;\r\n`;\r\n\r\nconst Item = styled.li`\r\n  height: 100%;\r\n  text-align: center;\r\n  font-variant: small-caps;\r\n  text-transform: uppercase;\r\n  font-size: 0.8em;\r\n  flex: 1;\r\n`;\r\n\r\nconst Link = styled(NavLink)`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  text-decoration: none;\r\n  color: ${props => darken(props.theme.size.darkerLighterPercentage, props.theme.text.primary)};\r\n  background-color: rgba(0, 0, 0, 0);\r\n  transition: background-color 300ms;\r\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n\r\n  &.active-main-menu-item {\r\n    background-color: ${props => props.theme.bg.secondary};\r\n    color: ${props => props.theme.text.primary};\r\n  }\r\n`;\r\n\r\nconst Label = styled(Text)`\r\n  padding-top: 4px;\r\n`;\r\n\r\nexport const MainMenu: React.SFC<{}> = () => (\r\n  <Wrap>\r\n    <Items>\r\n      <Item>\r\n        <Link to=\"/status\" activeClassName=\"active-main-menu-item\">\r\n          <StatusIcon />\r\n          <Label>Status</Label>\r\n        </Link>\r\n      </Item>\r\n      <Item>\r\n        <Link to=\"/map\" activeClassName=\"active-main-menu-item\">\r\n          <MapIcon />\r\n          <Label>Map</Label>\r\n        </Link>\r\n      </Item>\r\n      <Item>\r\n        <Link to=\"/simulation\" activeClassName=\"active-main-menu-item\">\r\n          <BotIcon />\r\n          <Label>Simulation</Label>\r\n        </Link>\r\n      </Item>\r\n      <Item>\r\n        <Link to=\"/remote\" activeClassName=\"active-main-menu-item\">\r\n          <RemoteIcon />\r\n          <Label>Remote</Label>\r\n        </Link>\r\n      </Item>\r\n      <Item>\r\n        <Link to=\"/settings\" activeClassName=\"active-main-menu-item\">\r\n          <SettingsIcon />\r\n          <Label>Settings</Label>\r\n        </Link>\r\n      </Item>\r\n    </Items>\r\n  </Wrap>\r\n);\r\n","import { lighten } from \"polished\";\r\nimport { MouseEventHandler } from \"react\";\r\nimport { createGlobalStyle, keyframes } from \"styled-components\";\r\n\r\n// common visual configuration used by various components\r\nexport const theme = {\r\n  text: {\r\n    primary: \"#f0f0f0\",\r\n    secondary: \"#969696\",\r\n  },\r\n  bg: {\r\n    primary: \"#cc3333\",\r\n    secondary: \"#282828\",\r\n    tertiary: lighten(0.05, \"#282828\"),\r\n    quaternary: \"#087099\",\r\n    good: \"#009900\",\r\n    warn: \"#999900\",\r\n    bad: \"#990000\",\r\n  },\r\n  size: {\r\n    darkerLighterPercentage: 0.25,\r\n    gridGap: \"2px\",\r\n    menuHeight: \"64px\",\r\n  },\r\n  animation: {\r\n    fadeIn: keyframes`\r\n      from {\r\n        opacity: 0;\r\n      }\r\n      to {\r\n        opacity: 1;\r\n      }\r\n    `,\r\n    pulse: (color: string) => keyframes`\r\n      0% {\r\n        background: ${color};\r\n      }\r\n      50% {\r\n        background: ${lighten(0.25, color)};\r\n      }\r\n      100% {\r\n        background: ${color};\r\n      }\r\n    `,\r\n  },\r\n};\r\n\r\n// resolve theme type\r\nexport type Theme = typeof theme;\r\n\r\n// clickable element\r\nexport interface Clickable<T = Element> {\r\n  onClick?: MouseEventHandler<T>;\r\n}\r\n\r\n// these global styles get injected in the document above all else\r\nexport const GlobalStyle = createGlobalStyle`\r\n  // main font\r\n  @font-face {\r\n    font-family: \"heebo-regular\";\r\n    src: url(\"fonts/Heebo-Regular.ttf\");\r\n  }\r\n\r\n  @font-face {\r\n    font-family: \"roboto-mono-light\";\r\n    src: url(\"fonts/RobotoMono-Light.ttf\");\r\n  }\r\n\r\n  // default to using border box sizing\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n  *,\r\n  *:before,\r\n  *:after {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  // set body styles\r\n  body,\r\n  html {\r\n    height: 100%;\r\n    padding: 0;\r\n    margin: 0;\r\n    font-family: \"heebo-regular\";\r\n    color: ${theme.text.primary};\r\n    background-color: ${theme.bg.secondary};\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport interface ViewProps {\r\n  text?: boolean;\r\n}\r\n\r\nexport const View = styled.div<ViewProps>`\r\n  position: relative;\r\n  flex: 1;\r\n  border-radius: 8px 8px 0 0;\r\n  padding: ${props => (props.text ? \"16px\" : \"0\")};\r\n`;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nimport { Clickable, Theme } from \"../theme\";\r\n\r\nexport interface GridProps {\r\n  columns?: string;\r\n  rows?: string;\r\n  wide?: boolean;\r\n}\r\n\r\nexport interface CellProps {\r\n  primary?: boolean;\r\n  text?: boolean;\r\n  status?: CellStatus;\r\n}\r\n\r\nexport enum CellStatus {\r\n  GOOD = \"GOOD\",\r\n  WARN = \"WARN\",\r\n  BAD = \"BAD\",\r\n}\r\n\r\nexport const Grid = styled.div<GridProps>`\r\n  display: grid;\r\n  grid-gap: ${props => props.theme.size.gridGap};\r\n  margin: ${props => props.theme.size.gridGap};\r\n  height: calc(100vh - (${props => props.theme.size.menuHeight} + (${props => props.theme.size.gridGap} * 2)));\r\n\r\n  ${props =>\r\n    props.columns\r\n      ? css`\r\n          grid-template-columns: ${props.columns};\r\n        `\r\n      : \"\"}\r\n\r\n  ${props =>\r\n    props.rows\r\n      ? css`\r\n          grid-template-rows: ${props.rows};\r\n        `\r\n      : \"\"}\r\n`;\r\n\r\nconst getGridItemStatusColorMap = (theme: Theme) => ({\r\n  [CellStatus.GOOD]: theme.bg.good,\r\n  [CellStatus.WARN]: theme.bg.warn,\r\n  [CellStatus.BAD]: theme.bg.bad,\r\n});\r\n\r\nexport const Cell = styled.div<CellProps & Clickable>`\r\n  position: relative;\r\n  background-color: ${props => props.theme.bg.tertiary};\r\n  font-variant: ${props => (props.primary ? \"all-small-caps\" : \"normal\")};\r\n\r\n  ${props =>\r\n    props.text\r\n      ? css`\r\n          line-height: 1.25em;\r\n          text-align: center;\r\n          margin-top: 8px;\r\n        `\r\n      : \"\"}\r\n\r\n  ${props =>\r\n    props.status\r\n      ? css`\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          justify-content: center;\r\n          padding: 16px;\r\n          overflow: hidden;\r\n          background-color: ${getGridItemStatusColorMap(props.theme)[props.status]};\r\n        `\r\n      : \"\"}\r\n\r\n  ${props =>\r\n    props.status === CellStatus.BAD\r\n      ? css`\r\n          animation: ${props.theme.animation.pulse(getGridItemStatusColorMap(props.theme)[props.status])} 3s ease;\r\n          animation-iteration-count: infinite;\r\n          animation-delay: 1s;\r\n        `\r\n      : \"\"}\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { LidarMap } from \"../components/LidarMap\";\r\nimport { View } from \"../components/View\";\r\nimport { LidarMeasurement } from \"../containers/MeasurementsContainer\";\r\nimport { containers } from \"../services/containers\";\r\n\r\nconst fakeMeasurements: LidarMeasurement[] = [\r\n  {\r\n    angle: 0,\r\n    distance: 50,\r\n    quality: 100,\r\n    timestamp: Date.now(),\r\n  },\r\n  {\r\n    angle: 90,\r\n    distance: 100,\r\n    quality: 50,\r\n    timestamp: Date.now(),\r\n  },\r\n];\r\n\r\nexport const MapView: React.SFC = () => (\r\n  <View>\r\n    <LidarMap\r\n      radius={2}\r\n      cellSize={0.1}\r\n      measurements={() => /*containers.measurements.state.measurements*/ fakeMeasurements}\r\n    />\r\n  </View>\r\n);\r\n","import {\r\n  create,\r\n  EventData,\r\n  JoystickManagerEventTypes,\r\n  JoystickOutputData\r\n} from \"nipplejs\";\r\nimport React from \"react\";\r\n\r\nexport interface JoystickProps {\r\n  name: string;\r\n  x?: boolean;\r\n  y?: boolean;\r\n  onEvent?(name: string, event: EventData, info: JoystickOutputData): void;\r\n}\r\n\r\nexport class Joystick extends React.Component<JoystickProps> {\r\n  private readonly ref = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidMount() {\r\n    const el = this.ref.current;\r\n\r\n    // return if element could not be found\r\n    if (!el) {\r\n      console.warn(\"grid item dom node not found\");\r\n\r\n      return;\r\n    }\r\n\r\n    // create the nipple manager\r\n    const manager = create({\r\n      zone: el,\r\n      color: \"#FFF\",\r\n      size: 200,\r\n      position: {\r\n        left: \"50%\",\r\n        top: \"50%\"\r\n      },\r\n      mode: \"static\",\r\n      lockX: this.props.x === true,\r\n      lockY: this.props.y === true\r\n    });\r\n\r\n    const { onEvent } = this.props;\r\n\r\n    // only listen for events if even listener has been added\r\n    if (typeof onEvent === \"function\") {\r\n      const bind = \"start,move,end,dir,plain\" as JoystickManagerEventTypes;\r\n\r\n      manager.on(bind, (event, nipple) => {\r\n        onEvent(this.props.name, event, nipple);\r\n      });\r\n      manager.on(\"removed\", (event, nipple) => {\r\n        // @ts-ignore wrong typings\r\n        nipple.off(bind);\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"joystick\" ref={this.ref} />;\r\n  }\r\n}\r\n","export interface TrackedVehicleOptions {\r\n  trackWidth: number;\r\n  maxSpeed: number;\r\n  wheelDiameter: number;\r\n  encoderCountsPerRotation: number;\r\n  gearboxRatio: number;\r\n  speedUpdateInterval: number;\r\n}\r\n\r\nexport interface MotorSpeeds {\r\n  left: number;\r\n  right: number;\r\n}\r\n\r\n// https://pdfs.semanticscholar.org/29ae/0bc974737b58afd63b6edb8d0837a3383321.pdf\r\nexport class TrackedVehicleKinematics {\r\n  constructor(private readonly options: TrackedVehicleOptions) {}\r\n\r\n  /**\r\n   * Returns motor speeds in m/s for requested forward speed at given rotational speed.\r\n   *\r\n   * @param speed Speed in m/s\r\n   * @param omega Rotational speed in rad/s\r\n   */\r\n  calculateMotorSpeeds(speed: number, omega: number): MotorSpeeds {\r\n    // TODO: calculate actual kinematics\r\n    return this.limit(\r\n      {\r\n        left: speed + omega,\r\n        right: speed - omega,\r\n      },\r\n      this.options.maxSpeed,\r\n    );\r\n  }\r\n\r\n  getSpeedEncoderCount(speed: number) {\r\n    const circumference = this.options.wheelDiameter * Math.PI;\r\n    const rps = speed / circumference;\r\n    const actualEncoderCountPerRevolution = this.options.encoderCountsPerRotation * this.options.gearboxRatio;\r\n    const targetEncoderCountPerSecond = rps * actualEncoderCountPerRevolution;\r\n\r\n    return Math.floor(targetEncoderCountPerSecond);\r\n  }\r\n\r\n  limit(speeds: MotorSpeeds, maxSpeed: number): MotorSpeeds {\r\n    const maxRequestedSpeedMagnitude = Math.max(Math.abs(speeds.left), Math.abs(speeds.right));\r\n    const normalizationFactor = Math.min(maxSpeed / maxRequestedSpeedMagnitude, 1.0);\r\n\r\n    // console.log(\"normalize\", {\r\n    //   maxRequestedSpeedMagnitude,\r\n    //   normalizationFactor,\r\n    //   speeds,\r\n    //   maxSpeed,\r\n    // });\r\n\r\n    return {\r\n      left: speeds.left * normalizationFactor,\r\n      right: speeds.right * normalizationFactor,\r\n    };\r\n  }\r\n\r\n  getEncoderSpeeds(speeds: MotorSpeeds): MotorSpeeds {\r\n    return {\r\n      left: this.getSpeedEncoderCount(speeds.left),\r\n      right: this.getSpeedEncoderCount(speeds.right),\r\n    };\r\n  }\r\n}\r\n","import throttle from \"lodash.throttle\";\r\nimport { dummyLogger, Logger } from \"ts-log\";\r\n\r\nimport { Robot } from \"../robot\";\r\nimport { TrackedVehicleKinematics, TrackedVehicleOptions } from \"../tracked-vehicle-kinematics\";\r\n\r\nexport interface RemoteControllerOptions {\r\n  robot: Robot;\r\n  vehicle: TrackedVehicleOptions;\r\n  log?: Logger;\r\n}\r\n\r\nexport class RemoteController {\r\n  private readonly options: Required<RemoteControllerOptions>;\r\n  private readonly kinematics: TrackedVehicleKinematics;\r\n  private readonly robot: Robot;\r\n  private speed = 0;\r\n  private omega = 0;\r\n  private readonly scheduleUpdateMotorSpeeds: () => void;\r\n\r\n  constructor(options: RemoteControllerOptions) {\r\n    this.options = {\r\n      log: dummyLogger,\r\n      ...options,\r\n    };\r\n    this.robot = this.options.robot;\r\n    this.kinematics = new TrackedVehicleKinematics(this.options.vehicle);\r\n\r\n    this.scheduleUpdateMotorSpeeds = throttle(() => this.updateMotorSpeeds(), this.options.vehicle.speedUpdateInterval);\r\n  }\r\n\r\n  setSpeed(speed: number) {\r\n    this.speed = speed;\r\n\r\n    this.scheduleUpdateMotorSpeeds();\r\n  }\r\n\r\n  setOmega(omega: number) {\r\n    this.omega = omega;\r\n\r\n    this.scheduleUpdateMotorSpeeds();\r\n  }\r\n\r\n  private updateMotorSpeeds() {\r\n    const motorSpeeds = this.kinematics.calculateMotorSpeeds(this.speed, this.omega);\r\n    const encoderSpeeds = this.kinematics.getEncoderSpeeds(motorSpeeds);\r\n\r\n    // TODO: only send if sufficiently different from last sent values\r\n    this.robot.setSpeed(encoderSpeeds.left, encoderSpeeds.right);\r\n  }\r\n}\r\n","import {\r\n  EventData,\r\n  JoystickEventTypes,\r\n  JoystickOutputData,\r\n  ManagerOnlyEventTypes\r\n} from \"nipplejs\";\r\nimport React from \"react\";\r\n\r\nimport { Cell, Grid } from \"../components/Grid\";\r\nimport { Joystick } from \"../components/Joystick\";\r\nimport { View } from \"../components/View\";\r\nimport { config } from \"../config\";\r\nimport { RemoteController } from \"../lib/remote-controller\";\r\nimport { robot } from \"../services/robot\";\r\n\r\n// TODO: show track speeds on edges (target and real)\r\nexport class RemoteView extends React.Component {\r\n  private readonly remoteController = new RemoteController({\r\n    log: console,\r\n    vehicle: config.vehicle,\r\n    robot\r\n  });\r\n\r\n  render() {\r\n    return (\r\n      <View>\r\n        <Grid>\r\n          <Cell>\r\n            <Joystick\r\n              x\r\n              name=\"speed\"\r\n              onEvent={(name, event, info) =>\r\n                this.onJoystickEvent(name, event, info)\r\n              }\r\n            />\r\n          </Cell>\r\n          <Cell>\r\n            <Joystick\r\n              y\r\n              name=\"omega\"\r\n              onEvent={(name, event, info) =>\r\n                this.onJoystickEvent(name, event, info)\r\n              }\r\n            />\r\n          </Cell>\r\n        </Grid>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  private onJoystickEvent(\r\n    name: string,\r\n    event: EventData,\r\n    info: JoystickOutputData\r\n  ) {\r\n    const interestingEvents: (JoystickEventTypes | ManagerOnlyEventTypes)[] = [\r\n      \"move\",\r\n      \"end\"\r\n    ];\r\n\r\n    if (interestingEvents.indexOf(event.type) === -1) {\r\n      return;\r\n    }\r\n\r\n    const isMoveEvent = event.type === \"move\";\r\n\r\n    const xPos = isMoveEvent ? Math.sin(info.angle.radian) * info.distance : 0;\r\n    const yPos = isMoveEvent ? Math.cos(info.angle.radian) * info.distance : 0;\r\n\r\n    // console.log(`${name} x: ${xPos}, y: ${yPos}, distance: ${info.distance}`, this.remoteController);\r\n\r\n    switch (name) {\r\n      case \"speed\":\r\n        this.remoteController.setSpeed((yPos * -1) / 100.0);\r\n        break;\r\n\r\n      case \"omega\":\r\n        this.remoteController.setOmega(xPos / 100.0);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(`Got unexpected joystick \"${name}\" info`);\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport { View } from \"../components/View\";\r\n\r\nexport const SettingsView: React.SFC<{}> = () => <View text>\r\n  <button onClick={() => window.location.href = \"http://kallaspriit\"}>Open http://kallaspriit</button>\r\n</View>;\r\n","import React from \"react\";\r\n\r\nimport { Simulation } from \"../components/Simulation\";\r\nimport { View } from \"../components/View\";\r\n\r\nexport const SimulationView: React.SFC = () => (\r\n  <View>\r\n    <Simulation />\r\n  </View>\r\n);\r\n","import React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { BatteryState, StatusContainer } from \"../containers/StatusContainer\";\r\nimport { assertUnreachable } from \"../services/assertUnreachable\";\r\nimport { robot } from \"../services/robot\";\r\n\r\nimport { Cell, CellStatus } from \"./Grid\";\r\nimport { BatteryIcon } from \"./Icon\";\r\nimport { Text } from \"./Text\";\r\n\r\nexport const BatteryStatus: React.SFC = () => (\r\n  <Subscribe to={[StatusContainer]}>\r\n    {(status: StatusContainer) => {\r\n      const batteryStatus = getBatteryStatus(status.batteryState);\r\n      const description = status.state.batteryVoltage\r\n        ? `${status.state.batteryVoltage.toFixed(1)}V`\r\n        : \"Unknown\";\r\n\r\n      return (\r\n        <Cell status={batteryStatus} onClick={() => robot.requestVoltage()}>\r\n          <BatteryIcon />\r\n          <Text primary>Battery</Text>\r\n          <Text>{description}</Text>\r\n        </Cell>\r\n      );\r\n    }}\r\n  </Subscribe>\r\n);\r\n\r\nfunction getBatteryStatus(batteryState: BatteryState): CellStatus {\r\n  switch (batteryState) {\r\n    case BatteryState.UNKNOWN:\r\n      return CellStatus.BAD;\r\n\r\n    case BatteryState.FULL:\r\n      return CellStatus.GOOD;\r\n\r\n    case BatteryState.LOW:\r\n      return CellStatus.WARN;\r\n\r\n    case BatteryState.CRITICAL:\r\n      return CellStatus.BAD;\r\n\r\n    default:\r\n      return assertUnreachable(batteryState, \"got unexpected battery state\");\r\n  }\r\n}\r\n","export function assertUnreachable(value: never, message: string): never {\r\n  throw new Error(`${message} (${value})`);\r\n}\r\n","import React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { LidarContainer } from \"../containers/LidarContainer\";\r\nimport { robot } from \"../services/robot\";\r\n\r\nimport { Cell, CellStatus } from \"./Grid\";\r\nimport { LidarIcon } from \"./Icon\";\r\nimport { Text } from \"./Text\";\r\n\r\nexport const LidarStatus: React.SFC = () => (\r\n  <Subscribe to={[LidarContainer]}>\r\n    {(lidar: LidarContainer) => {\r\n      const { status, description } = getLidarStatus(lidar);\r\n\r\n      return (\r\n        <Cell\r\n          status={status}\r\n          onClick={() =>\r\n            lidar.state.isStarted ? robot.stopLidar() : robot.startLidar()\r\n          }\r\n        >\r\n          <LidarIcon />\r\n          <Text primary>Lidar</Text>\r\n          <Text>{description}</Text>\r\n        </Cell>\r\n      );\r\n    }}\r\n  </Subscribe>\r\n);\r\n\r\nfunction getLidarStatus(lidar: LidarContainer) {\r\n  let status = CellStatus.BAD;\r\n  let description = \"Stopped\";\r\n\r\n  if (lidar.state.isValid) {\r\n    status = CellStatus.GOOD;\r\n    description = `${Math.round(lidar.state.currentRpm)}/${\r\n      lidar.state.targetRpm\r\n    } RPM`;\r\n  } else if (lidar.state.isStarted) {\r\n    status = CellStatus.WARN;\r\n    description = \"Unstable\";\r\n  }\r\n\r\n  return {\r\n    status,\r\n    description\r\n  };\r\n}\r\n","export function pad(data: string | number, length: number, padCharacter = \" \"): string {\r\n  const str = typeof data === \"string\" ? data : data.toString();\r\n\r\n  // return as is if already long enough\r\n  if (str.length >= length) {\r\n    return str;\r\n  }\r\n\r\n  const missingLength = length - str.length;\r\n\r\n  return `${new Array(missingLength + 1).join(padCharacter)}${str}`;\r\n}\r\n","import React from \"react\";\r\n\r\nexport type Props = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLElement>,\r\n  HTMLElement\r\n> & {\r\n  scrollToBottom?: boolean;\r\n};\r\n\r\nexport class AutoScroll extends React.Component<Props> {\r\n  private readonly ref = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidUpdate() {\r\n    // return if scrolling to bottom is not requested, default to true\r\n    if (this.props.scrollToBottom === false) {\r\n      return;\r\n    }\r\n\r\n    // get the dom node from the reference\r\n    const el = this.ref.current;\r\n\r\n    // return if element could not be found\r\n    if (!el) {\r\n      console.warn(\"auto-scroll dom node not found\");\r\n\r\n      return;\r\n    }\r\n\r\n    // check whether we're aready near the bottom\r\n    const isNearBottom = el.scrollHeight - el.clientHeight <= el.scrollTop + 50;\r\n\r\n    // only force the scroll if near bottom\r\n    if (isNearBottom) {\r\n      el.scrollTop = el.scrollHeight - el.clientHeight;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // filter out unsupported props\r\n    const { scrollToBottom, ...props } = this.props;\r\n\r\n    return (\r\n      <div {...props} ref={this.ref}>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { LogContainer, MessageType } from \"../containers/LogContainer\";\r\nimport { formatTime } from \"../services/formatTime\";\r\nimport { Clickable } from \"../theme\";\r\n\r\nimport { AutoScroll } from \"./AutoScroll\";\r\nimport { Cell } from \"./Grid\";\r\nimport { ClearIcon } from \"./Icon\";\r\n\r\nconst StatusGridItem = styled(Cell)`\r\n  grid-column: 1 / 4;\r\n  font-family: Consolas, \"Courier New\", Courier, monospace;\r\n  display: flex;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst LogWrap = styled(AutoScroll)`\r\n  flex: 1;\r\n  overflow: scroll;\r\n  padding: 8px;\r\n`;\r\n\r\nconst LogEntry = styled.div``;\r\n\r\nconst LogEntryTime = styled.span`\r\n  color: ${props => props.theme.text.secondary};\r\n`;\r\n\r\ninterface LogEntryMessageProps {\r\n  type: MessageType;\r\n}\r\n\r\nconst logEntryTypeColorMap = {\r\n  [MessageType.INFO]: \"#666\",\r\n  [MessageType.RX]: \"#090\",\r\n  [MessageType.TX]: \"#FF8000\",\r\n  [MessageType.ERROR]: \"#900\"\r\n};\r\n\r\nconst LogEntryMessage = styled.span<LogEntryMessageProps>`\r\n  padding-left: 6px;\r\n  border-left: 2px solid ${props => logEntryTypeColorMap[props.type]};\r\n  margin-left: 6px;\r\n`;\r\n\r\nconst LogEntryCount = styled.span`\r\n  display: inline-block;\r\n  padding: 0 4px;\r\n  margin-left: 8px;\r\n  border-radius: 8px;\r\n  background-color: ${props => props.theme.text.primary};\r\n  color: ${props => props.theme.bg.tertiary};\r\n`;\r\n\r\nconst ClearLogButton = styled.div<Clickable>`\r\n  box-sizing: content-box;\r\n  position: absolute;\r\n  bottom: ${props => props.theme.size.gridGap};\r\n  right: ${props => props.theme.size.gridGap};\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 10px;\r\n  background-color: ${props => props.theme.bg.tertiary};\r\n`;\r\n\r\nconst ClearLogIcon = styled(ClearIcon)`\r\n  background-color: ${props => props.theme.text.secondary};\r\n`;\r\n\r\nexport const Log: React.SFC = () => (\r\n  <Subscribe to={[LogContainer]}>\r\n    {(log: LogContainer) => (\r\n      <StatusGridItem>\r\n        <LogWrap>\r\n          {log.state.entries.map(entry => (\r\n            <LogEntry key={entry.id}>\r\n              <LogEntryTime>{formatTime(entry.time)}</LogEntryTime>\r\n              <LogEntryMessage type={entry.type}>\r\n                {entry.message}\r\n              </LogEntryMessage>\r\n              {entry.count > 1 ? (\r\n                <LogEntryCount>{entry.count}</LogEntryCount>\r\n              ) : null}\r\n            </LogEntry>\r\n          ))}\r\n        </LogWrap>\r\n        <ClearLogButton onClick={() => log.clear()}>\r\n          <ClearLogIcon />\r\n        </ClearLogButton>\r\n      </StatusGridItem>\r\n    )}\r\n  </Subscribe>\r\n);\r\n","import { pad } from \"./pad\";\r\n\r\nexport function formatTime(date: Date): string {\r\n  return (\r\n    `${pad(date.getHours(), 2, \"0\")}:` +\r\n    `${pad(date.getMinutes(), 2, \"0\")}:` +\r\n    `${pad(date.getSeconds(), 2, \"0\")}.` +\r\n    `${pad(date.getMilliseconds(), 3, \"0\")}`\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport titleCase from \"title-case\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { StatusContainer } from \"../containers/StatusContainer\";\r\nimport { TransportState } from \"../lib/transport/Transport\";\r\nimport { multiTransport } from \"../services/multiTransport\";\r\nimport { robot } from \"../services/robot\";\r\n\r\nimport { Cell, CellStatus } from \"./Grid\";\r\nimport { NativeIcon, WebsocketIcon } from \"./Icon\";\r\nimport { Text } from \"./Text\";\r\n\r\nexport const TransportStatus: React.SFC = () => (\r\n  <Subscribe to={[StatusContainer]}>\r\n    {(status: StatusContainer) => {\r\n      const transportStatus =\r\n        status.state.transportState === TransportState.CONNECTED\r\n          ? CellStatus.GOOD\r\n          : CellStatus.BAD;\r\n      const description =\r\n        status.state.transportState !== TransportState.CONNECTED ||\r\n        status.state.remoteIp === undefined\r\n          ? titleCase(status.state.transportState)\r\n          : status.state.remoteIp;\r\n\r\n      return (\r\n        <Cell\r\n          status={transportStatus}\r\n          onClick={() => robot.ping(status.getConnectedSerial() === undefined)}\r\n        >\r\n          {multiTransport.getName() === \"Native\" ? (\r\n            <NativeIcon />\r\n          ) : (\r\n            <WebsocketIcon />\r\n          )}\r\n          <Text primary>{multiTransport.getName()}</Text>\r\n          <Text>{description}</Text>\r\n        </Cell>\r\n      );\r\n    }}\r\n  </Subscribe>\r\n);\r\n","import React from \"react\";\r\nimport titleCase from \"title-case\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { SerialType, StatusContainer } from \"../containers/StatusContainer\";\r\n\r\nimport { Cell, CellStatus } from \"./Grid\";\r\nimport { BluetoothIcon, SerialIcon } from \"./Icon\";\r\nimport { Text } from \"./Text\";\r\n\r\nexport const UsbStatus: React.SFC = () => (\r\n  <Subscribe to={[StatusContainer]}>\r\n    {(status: StatusContainer) => {\r\n      const connectedSerial = status.getConnectedSerial();\r\n      const usbStatus =\r\n        connectedSerial !== undefined ? CellStatus.GOOD : CellStatus.BAD;\r\n      const Icon =\r\n        connectedSerial && connectedSerial.type === SerialType.BLUETOOTH\r\n          ? BluetoothIcon\r\n          : SerialIcon;\r\n      const title = connectedSerial ? connectedSerial.type : \"Serial\";\r\n      const description = titleCase(\r\n        connectedSerial ? connectedSerial.state : \"Disconnected\"\r\n      );\r\n\r\n      return (\r\n        <Cell status={usbStatus}>\r\n          <Icon />\r\n          <Text primary>{title}</Text>\r\n          <Text>{description}</Text>\r\n        </Cell>\r\n      );\r\n    }}\r\n  </Subscribe>\r\n);\r\n","import React from \"react\";\r\n\r\nimport { BatteryStatus } from \"../components/BatteryStatus\";\r\nimport { Grid } from \"../components/Grid\";\r\nimport { LidarStatus } from \"../components/LidarStatus\";\r\nimport { Log } from \"../components/Log\";\r\nimport { TransportStatus } from \"../components/TransportStatus\";\r\nimport { UsbStatus } from \"../components/UsbStatus\";\r\nimport { View } from \"../components/View\";\r\n\r\n// TODO: add target and real speed (compare %?)\r\n// TODO: add odometry (visualize path?)\r\n// TODO: add lidar (tiny map?)\r\n// TODO: add buttons (state for each?)\r\nexport const StatusView: React.SFC = () => (\r\n  <View>\r\n    <Grid columns=\"1fr 1fr 1fr\" rows=\"100px 100px\">\r\n      <UsbStatus />\r\n      <TransportStatus />\r\n      <BatteryStatus />\r\n      <LidarStatus />\r\n      <Log />\r\n    </Grid>\r\n  </View>\r\n);\r\n","import React from \"react\";\r\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport styled, { ThemeProvider } from \"styled-components\";\r\nimport { Provider } from \"unstated\";\r\n\r\nimport { Hub } from \"./components/Hub\";\r\nimport { MainMenu } from \"./components/MainMenu\";\r\nimport { GlobalStyle, theme } from \"./theme\";\r\nimport { MapView } from \"./views/MapView\";\r\nimport { RemoteView } from \"./views/RemoteView\";\r\nimport { SettingsView } from \"./views/SettingsView\";\r\nimport { SimulationView } from \"./views/SimulationView\";\r\nimport { StatusView } from \"./views/StatusView\";\r\n\r\nexport class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <Provider>\r\n          <GlobalStyle />\r\n          <Hub />\r\n          <BrowserRouter>\r\n            <AppWrap>\r\n              <Switch>\r\n                <Route path=\"/status\" component={StatusView} />\r\n                <Route path=\"/map\" component={MapView} />\r\n                <Route path=\"/remote\" component={RemoteView} />\r\n                <Route path=\"/simulation\" component={SimulationView} />\r\n                <Route path=\"/settings\" component={SettingsView} />\r\n                <Route>\r\n                  <Redirect to=\"/status\" />\r\n                </Route>\r\n              </Switch>\r\n              <MainMenu />\r\n            </AppWrap>\r\n          </BrowserRouter>\r\n        </Provider>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nconst AppWrap = styled.div`\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  animation: ${props => props.theme.animation.fadeIn} 1000ms;\r\n`;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"reset-css\";\n\nimport { App } from \"./App\";\n\n// render the application\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","export function map(x: number, inMin: number, inMax: number, outMin: number, outMax: number, capped = true) {\r\n  const uncapped = ((x - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\r\n\r\n  if (!capped) {\r\n    return uncapped;\r\n  }\r\n\r\n  const min = Math.min(outMin, outMax);\r\n  const max = Math.max(outMin, outMax);\r\n\r\n  return Math.min(Math.max(uncapped, min), max);\r\n}\r\n","import color from \"color\";\r\nimport Vector from \"victor\";\r\n\r\nimport { map } from \"../../services/map\";\r\n\r\nexport interface LayerOptions {\r\n  readonly defaultStyle?: DrawStyle;\r\n  getTransform?(layer: Layer): Transform;\r\n  render?(info: FrameInfo): void;\r\n  onMouseDownEvent?(event: LayerMouseDownEvent): void;\r\n  onMouseUpEvent?(event: LayerMouseUpEvent): void;\r\n  onMouseMoveEvent?(event: LayerMouseMoveEvent): void;\r\n}\r\n\r\nexport interface Transform {\r\n  horizontalScaling?: number;\r\n  verticalSkewing?: number;\r\n  horizontalSkewing?: number;\r\n  verticalScaling?: number;\r\n  horizontalTranslation?: number;\r\n  verticalTranslation?: number;\r\n  rotation?: number;\r\n  scale?: number;\r\n}\r\n\r\nexport interface FrameInfo {\r\n  time: number;\r\n  dt: number;\r\n  frame: number;\r\n  layer: Layer;\r\n}\r\n\r\nexport type LayerMouseEventType = \"down\" | \"up\" | \"move\";\r\n\r\nexport interface LayerMouseEvent {\r\n  type: LayerMouseEventType;\r\n  screen: CartesianCoordinates;\r\n  world: CartesianCoordinates;\r\n  isMouseDown: boolean;\r\n  event: MouseEvent;\r\n}\r\n\r\nexport interface LayerMouseDownEvent extends LayerMouseEvent {\r\n  type: \"down\";\r\n}\r\n\r\nexport interface LayerMouseUpEvent extends LayerMouseEvent {\r\n  type: \"up\";\r\n}\r\n\r\nexport interface LayerMouseMoveEvent extends LayerMouseEvent {\r\n  type: \"move\";\r\n}\r\n\r\nexport interface CartesianCoordinates {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface PolarCoordinates {\r\n  angle: number; // radians\r\n  distance: number;\r\n}\r\n\r\nexport type Coordinates = CartesianCoordinates | PolarCoordinates;\r\n\r\nexport type ColorStyle = string | CanvasGradient | CanvasPattern;\r\n\r\nexport interface DrawStyle {\r\n  color?: ColorStyle;\r\n  fillStyle?: ColorStyle;\r\n  strokeStyle?: ColorStyle;\r\n  lineWidth?: number;\r\n  font?: string;\r\n  textAlign?: CanvasTextAlign;\r\n  textBaseline?: CanvasTextBaseline;\r\n}\r\n\r\nexport interface DrawCircleOptions {\r\n  center?: Coordinates;\r\n  radius: number;\r\n}\r\n\r\nexport interface DrawPulseOptions {\r\n  center?: Coordinates;\r\n  lifetime?: number;\r\n  age?: number;\r\n  size?: number;\r\n}\r\n\r\nexport interface DrawMarkerOptions {\r\n  center: Coordinates;\r\n  size?: number;\r\n}\r\n\r\nexport interface DrawBoxOptions {\r\n  origin: Coordinates;\r\n  width: number;\r\n  height: number;\r\n  padding?: number;\r\n  centered?: boolean;\r\n}\r\n\r\n// TODO: support center, angle, length\r\nexport interface DrawLineOptions {\r\n  from: Coordinates;\r\n  to: Coordinates;\r\n}\r\n\r\nexport interface DrawTextOptions {\r\n  origin: Coordinates;\r\n  text: string;\r\n  offset?: CartesianCoordinates;\r\n}\r\n\r\nexport interface DrawArrowOptions extends DrawLineOptions {\r\n  tipSize?: number;\r\n  name?: string;\r\n}\r\n\r\nexport interface DrawDirectionOptions {\r\n  center: Coordinates;\r\n  angle: number;\r\n  size?: number;\r\n  name?: string;\r\n}\r\n\r\nexport interface DrawGridOptions {\r\n  cellWidth: number;\r\n  cellHeight: number;\r\n  rows?: number;\r\n  columns?: number;\r\n  origin?: Coordinates;\r\n  centered?: boolean;\r\n}\r\n\r\nexport interface DrawOccupancyGridOptions {\r\n  cellWidth: number;\r\n  cellHeight: number;\r\n  grid: OccupancyGrid;\r\n  path?: Path;\r\n  origin?: Coordinates;\r\n  centered?: boolean;\r\n}\r\n\r\nexport interface DrawCoordinateSystemOptions {\r\n  center?: Coordinates;\r\n  length?: number;\r\n}\r\n\r\nexport interface DrawGraphOptions {\r\n  origin: Coordinates;\r\n  name: string;\r\n  values: number[];\r\n  min?: number;\r\n  max?: number;\r\n  width?: number;\r\n  height?: number;\r\n}\r\n\r\nexport type OccupancyGrid = number[][];\r\n\r\nexport type Cell = [number, number];\r\n\r\nexport type Path = Cell[];\r\n\r\nexport class Layer {\r\n  readonly options: Required<LayerOptions>;\r\n  readonly ctx: CanvasRenderingContext2D;\r\n  readonly width: number;\r\n  readonly height: number;\r\n  readonly size: number;\r\n  readonly transform: Required<Transform>;\r\n  private mouseDownCounter = 0;\r\n  private frameNumber = 0;\r\n  private isRunning = false;\r\n  private lastRenderTime?: number;\r\n\r\n  constructor(readonly canvas: HTMLCanvasElement, options: LayerOptions) {\r\n    this.options = {\r\n      defaultStyle: {\r\n        fillStyle: \"#000\",\r\n        strokeStyle: \"#000\",\r\n        font: \"16px monospace\",\r\n        textBaseline: \"top\",\r\n      },\r\n      getTransform: (_layer: Layer) => ({}),\r\n      render: (_info: FrameInfo) => {\r\n        /* do nothing */\r\n      },\r\n      onMouseDownEvent: (_event: LayerMouseDownEvent) => {\r\n        /* do nothing */\r\n      },\r\n      onMouseUpEvent: (_event: LayerMouseUpEvent) => {\r\n        /* do nothing */\r\n      },\r\n      onMouseMoveEvent: (_event: LayerMouseMoveEvent) => {\r\n        /* do nothing */\r\n      },\r\n      ...options,\r\n    };\r\n\r\n    // get canvas drawing context\r\n    const ctx = this.canvas.getContext(\"2d\");\r\n\r\n    // this should generally not fail\r\n    if (!ctx) {\r\n      throw new Error(\"Getting layer 2D context failed, this should not happen\");\r\n    }\r\n\r\n    // store context\r\n    this.ctx = ctx;\r\n\r\n    // get dimensions\r\n    this.width = this.canvas.offsetWidth;\r\n    this.height = this.canvas.offsetHeight;\r\n\r\n    // use minimum of width/height as size\r\n    this.size = Math.min(this.width, this.height) - 2;\r\n\r\n    // set fixed canvas dimensions\r\n    this.canvas.setAttribute(\"width\", `${this.width.toString()}px`);\r\n    this.canvas.setAttribute(\"height\", `${this.height.toString()}px`);\r\n\r\n    // remove style dimension properties\r\n    this.canvas.style.removeProperty(\"width\");\r\n    this.canvas.style.removeProperty(\"height\");\r\n\r\n    // mouse events should pass through if no listeners were set\r\n    const passThroughMouseEvents =\r\n      options.onMouseDownEvent === undefined &&\r\n      options.onMouseUpEvent === undefined &&\r\n      options.onMouseMoveEvent === undefined;\r\n\r\n    // disable canvas pointer events (pass them through) if no event listeners are present\r\n    if (passThroughMouseEvents) {\r\n      this.canvas.style.pointerEvents = \"none\";\r\n    }\r\n\r\n    // resolve transform to use\r\n    this.transform = {\r\n      horizontalScaling: 1,\r\n      verticalSkewing: 0,\r\n      horizontalSkewing: 0,\r\n      verticalScaling: 1,\r\n      horizontalTranslation: 0,\r\n      verticalTranslation: 0,\r\n      rotation: 0,\r\n      scale: 1,\r\n      ...this.options.getTransform(this),\r\n    };\r\n\r\n    // apply transformation and rotation\r\n    this.ctx.transform(\r\n      this.transform.horizontalScaling,\r\n      this.transform.verticalSkewing,\r\n      this.transform.horizontalSkewing,\r\n      this.transform.verticalScaling,\r\n      this.transform.horizontalTranslation,\r\n      this.transform.verticalTranslation,\r\n    );\r\n    this.ctx.rotate(this.transform.rotation);\r\n\r\n    // set default styles\r\n    this.applyStyle(this.options.defaultStyle);\r\n\r\n    // only add mouse events if listener is registered\r\n    if (options.onMouseDownEvent) {\r\n      this.canvas.onmousedown = event => this.handleMouseEvent(\"down\", event);\r\n    }\r\n\r\n    if (options.onMouseUpEvent) {\r\n      this.canvas.onmouseup = event => this.handleMouseEvent(\"up\", event);\r\n    }\r\n\r\n    if (options.onMouseMoveEvent) {\r\n      this.canvas.onmousemove = event => this.handleMouseEvent(\"move\", event);\r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.isRunning = true;\r\n\r\n    this.scheduleNextFrame();\r\n  }\r\n\r\n  stop() {\r\n    this.isRunning = false;\r\n  }\r\n\r\n  drawCircle(options: DrawCircleOptions, style: DrawStyle = { strokeStyle: \"#000\" }) {\r\n    const opt: Required<DrawCircleOptions> = {\r\n      center: { x: 0, y: 0 },\r\n      ...options,\r\n    };\r\n    const screenCenter = this.worldToScreen(opt.center);\r\n\r\n    this.ctx.save();\r\n    this.applyStyle(style);\r\n\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(screenCenter.x, screenCenter.y, this.scale(opt.radius), 0, Math.PI * 2);\r\n\r\n    if (style.fillStyle) {\r\n      this.ctx.fill();\r\n    }\r\n\r\n    if (style.strokeStyle || (!style.strokeStyle && !style.fillStyle)) {\r\n      this.ctx.stroke();\r\n    }\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawPulse(options: DrawPulseOptions, style: DrawStyle = { strokeStyle: \"#000\" }) {\r\n    const opt: Required<DrawPulseOptions> = {\r\n      center: { x: 0, y: 0 },\r\n      lifetime: 300,\r\n      age: 0,\r\n      size: this.size / 50 / this.getScale(),\r\n      ...options,\r\n    };\r\n\r\n    // don't draw dead pulses\r\n    if (opt.age > opt.lifetime) {\r\n      return;\r\n    }\r\n\r\n    const opacity = map(opt.age, 0, opt.lifetime, 1, 0);\r\n    const fillStyle = color(style.fillStyle || \"#F00\")\r\n      .alpha(opacity)\r\n      .toString();\r\n\r\n    this.drawCircle(\r\n      {\r\n        center: opt.center,\r\n        radius: map(opt.age, 0, opt.lifetime, opt.size / 10, opt.size),\r\n      },\r\n      {\r\n        fillStyle,\r\n      },\r\n    );\r\n  }\r\n\r\n  drawMarker(options: DrawMarkerOptions, style: DrawStyle = {}) {\r\n    const opt: Required<DrawMarkerOptions> = {\r\n      size: this.size / 100 / this.getScale(),\r\n      ...options,\r\n    };\r\n    const angle = this.isPolar(opt.center) ? opt.center.angle : 0;\r\n    const screenCenter = this.worldToScreen(opt.center);\r\n    const screenSize = this.scale(opt.size);\r\n\r\n    this.ctx.save();\r\n    this.applyStyle(style);\r\n\r\n    this.ctx.translate(screenCenter.x, screenCenter.y);\r\n    this.ctx.rotate(angle);\r\n    this.ctx.fillRect(-screenSize / 2, -screenSize / 2, screenSize, screenSize);\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawBox(options: DrawBoxOptions, style: DrawStyle = {}) {\r\n    const opt: Required<DrawBoxOptions> = {\r\n      padding: 0,\r\n      centered: false,\r\n      ...options,\r\n    };\r\n\r\n    const origin = this.worldToScreen(opt.origin);\r\n    const width = this.scale(opt.width);\r\n    const height = this.scale(opt.height);\r\n\r\n    const offset = opt.centered ? { x: -width / 2, y: -height / 2 } : { x: 0, y: 0 };\r\n\r\n    this.ctx.save();\r\n    this.applyStyle(style);\r\n\r\n    if (style.fillStyle) {\r\n      this.ctx.fillRect(\r\n        origin.x + offset.x + opt.padding,\r\n        origin.y + offset.y + opt.padding,\r\n        width - opt.padding * 2,\r\n        height - opt.padding * 2,\r\n      );\r\n    }\r\n\r\n    if (style.strokeStyle || (!style.strokeStyle && !style.fillStyle)) {\r\n      this.ctx.strokeRect(\r\n        origin.x + offset.x + opt.padding,\r\n        origin.y + offset.y + opt.padding,\r\n        width - opt.padding * 2,\r\n        height - opt.padding * 2,\r\n      );\r\n    }\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawLine(options: DrawLineOptions, style: DrawStyle = {}) {\r\n    const opt: Required<DrawLineOptions> = {\r\n      ...options,\r\n    };\r\n    const screenFrom = this.worldToScreen(opt.from);\r\n    const screenTo = this.worldToScreen(opt.to);\r\n\r\n    this.ctx.save();\r\n    this.applyStyle(style);\r\n\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(screenFrom.x, screenFrom.y);\r\n    this.ctx.lineTo(screenTo.x, screenTo.y);\r\n    this.ctx.stroke();\r\n\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawGrid(options: DrawGridOptions, style: DrawStyle = {}) {\r\n    const defaultRowCount = Math.ceil(this.height / this.getScale() / options.cellHeight);\r\n    const defaultColumnCount = Math.ceil(this.width / this.getScale() / options.cellWidth);\r\n\r\n    const opt: Required<DrawGridOptions> = {\r\n      origin: { x: 0, y: 0 },\r\n      centered: false,\r\n      rows: defaultRowCount % 2 === 0 ? defaultRowCount : defaultRowCount + 1,\r\n      columns: defaultColumnCount % 2 === 0 ? defaultColumnCount : defaultColumnCount + 1,\r\n      ...options,\r\n    };\r\n\r\n    const height = opt.cellHeight * opt.rows;\r\n    const width = opt.cellWidth * opt.columns;\r\n\r\n    const origin = this.toCartesian(opt.origin);\r\n    const offset: CartesianCoordinates = opt.centered ? { x: -width / 2, y: -height / 2 } : { x: 0, y: 0 };\r\n\r\n    for (let row = 0; row <= opt.rows; row++) {\r\n      const rowY = row * opt.cellHeight;\r\n\r\n      this.drawLine(\r\n        {\r\n          from: {\r\n            x: origin.x + offset.x,\r\n            y: origin.y + offset.y + rowY,\r\n          },\r\n          to: {\r\n            x: origin.x + offset.x + width,\r\n            y: origin.y + offset.y + rowY,\r\n          },\r\n        },\r\n        style,\r\n      );\r\n    }\r\n\r\n    for (let column = 0; column <= opt.columns; column++) {\r\n      const columnX = column * opt.cellWidth;\r\n\r\n      this.drawLine(\r\n        {\r\n          from: {\r\n            x: origin.x + offset.x + columnX,\r\n            y: origin.y + offset.y,\r\n          },\r\n          to: {\r\n            x: origin.x + offset.x + columnX,\r\n            y: origin.y + offset.y + height,\r\n          },\r\n        },\r\n        style,\r\n      );\r\n    }\r\n  }\r\n\r\n  drawOccupancyGrid(options: DrawOccupancyGridOptions, style: DrawStyle = {}) {\r\n    const opt: Required<DrawOccupancyGridOptions> = {\r\n      origin: { x: 0, y: 0 },\r\n      centered: false,\r\n      path: [],\r\n      ...options,\r\n    };\r\n\r\n    // don't attempt to draw an empty map\r\n    if (opt.grid.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const rows = opt.grid.length;\r\n    const columns = opt.grid[0].length;\r\n\r\n    const width = opt.cellWidth * columns;\r\n    const height = opt.cellHeight * rows;\r\n\r\n    const origin = this.toCartesian(opt.origin);\r\n    const offset: CartesianCoordinates = opt.centered ? { x: -width / 2, y: -height / 2 } : { x: 0, y: 0 };\r\n\r\n    // draw grid\r\n    for (let row = 0; row < rows; row++) {\r\n      for (let column = 0; column < columns; column++) {\r\n        if (!Array.isArray(opt.grid[row])) {\r\n          throw new Error(`Expected occupancy map row #${row} to be an array, got ${typeof opt.grid[row]}`);\r\n        }\r\n\r\n        const occupancy = opt.grid[row][column];\r\n\r\n        if (typeof occupancy !== \"number\") {\r\n          throw new Error(`Expected occupancy map row cell ${row}x${column} to be a number, got ${typeof occupancy}`);\r\n        }\r\n\r\n        // don't draw empty or unknown cells\r\n        if (occupancy <= 0) {\r\n          continue;\r\n        }\r\n\r\n        const delta = {\r\n          x: column * opt.cellWidth,\r\n          y: row * opt.cellHeight,\r\n        };\r\n\r\n        const position = {\r\n          x: origin.x + offset.x + delta.x,\r\n          y: origin.y + offset.y + delta.y,\r\n        };\r\n\r\n        this.drawBox(\r\n          { origin: position, width: opt.cellWidth, height: opt.cellHeight, padding: 1 },\r\n          { fillStyle: `rgba(0, 0, 0, ${occupancy})` },\r\n        );\r\n      }\r\n    }\r\n\r\n    // draw path\r\n    for (const [column, row] of opt.path) {\r\n      const delta = {\r\n        x: column * opt.cellWidth,\r\n        y: row * opt.cellHeight,\r\n      };\r\n\r\n      const position = {\r\n        x: origin.x + offset.x + delta.x,\r\n        y: origin.y + offset.x + delta.y,\r\n      };\r\n\r\n      this.drawBox(\r\n        { origin: position, width: opt.cellWidth, height: opt.cellHeight, padding: 1 },\r\n        { fillStyle: \"rgba(0, 255, 0, 0.2)\" },\r\n      );\r\n    }\r\n  }\r\n\r\n  drawArrow(options: DrawArrowOptions, style: DrawStyle = {}) {\r\n    const opt: Required<DrawArrowOptions> = {\r\n      tipSize: this.size / 100 / this.getScale(),\r\n      name: \"\",\r\n      ...options,\r\n    };\r\n\r\n    this.drawLine({ ...opt }, style);\r\n\r\n    const screenFrom = this.worldToScreen(opt.from);\r\n    const screenTo = this.worldToScreen(opt.to);\r\n    const directionVector = Vector.fromObject(screenTo).subtract(Vector.fromObject(screenFrom));\r\n    const angle = directionVector.angle();\r\n\r\n    this.drawDirection(\r\n      {\r\n        ...opt,\r\n        center: opt.to,\r\n        angle,\r\n        size: opt.tipSize,\r\n      },\r\n      style,\r\n    );\r\n  }\r\n\r\n  drawDirection(options: DrawDirectionOptions, style: DrawStyle = {}) {\r\n    const opt: Required<DrawDirectionOptions> = {\r\n      size: this.size / 100 / this.getScale(),\r\n      name: \"\",\r\n      ...options,\r\n    };\r\n\r\n    const screenCenter = this.worldToScreen(opt.center);\r\n    const screenSize = this.scale(opt.size);\r\n\r\n    this.ctx.save();\r\n    this.applyStyle(style);\r\n\r\n    this.ctx.translate(screenCenter.x, screenCenter.y);\r\n    this.ctx.rotate(opt.angle);\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(-screenSize / 2, screenSize / 2);\r\n    this.ctx.lineTo(-screenSize / 2, -screenSize / 2);\r\n    this.ctx.lineTo(0, 0);\r\n    this.ctx.lineTo(-screenSize / 2, screenSize / 2);\r\n    this.ctx.fill();\r\n\r\n    this.ctx.restore();\r\n\r\n    if (opt.name.length > 0) {\r\n      const origin = this.toCartesian(opt.center);\r\n      origin.x += opt.size * 2;\r\n\r\n      this.drawText({ origin, text: opt.name }, style);\r\n    }\r\n  }\r\n\r\n  drawText(options: DrawTextOptions, style: DrawStyle = {}) {\r\n    const opt: Required<DrawTextOptions> = {\r\n      offset: { x: 0, y: 0 },\r\n      ...options,\r\n    };\r\n\r\n    const screenOrigin = this.worldToScreen(opt.origin);\r\n\r\n    this.ctx.save();\r\n    this.applyStyle(style);\r\n\r\n    this.ctx.translate(screenOrigin.x, screenOrigin.y);\r\n\r\n    // roll back transforms to get the text to draw correctly\r\n    this.ctx.rotate(-this.transform.rotation);\r\n    this.ctx.scale(this.transform.horizontalScaling, this.transform.verticalScaling);\r\n\r\n    this.ctx.fillText(opt.text, opt.offset.x, opt.offset.y);\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawCoordinateSystem(options: DrawCoordinateSystemOptions = {}) {\r\n    const worldSize = this.screenToWorld({ x: this.width, y: this.height });\r\n    const length = this.size / 20 / this.getScale();\r\n    const opt: Required<DrawCoordinateSystemOptions> = {\r\n      center: { x: -worldSize.y / 2 + length, y: -worldSize.x / 2 + length },\r\n      length,\r\n      ...options,\r\n    };\r\n    const center = Vector.fromObject(this.toCartesian(opt.center));\r\n\r\n    const toX = center.clone().add(new Vector(opt.length, 0));\r\n    const toY = center.clone().add(new Vector(0, opt.length));\r\n\r\n    this.drawArrow({ from: opt.center, to: toX, name: \"X\" }, { lineWidth: 2, color: \"#F00\", textAlign: \"center\" });\r\n    this.drawArrow({ from: opt.center, to: toY, name: \"Y\" }, { lineWidth: 2, color: \"#0F0\", textAlign: \"center\" });\r\n  }\r\n\r\n  drawGraph(options: DrawGraphOptions) {\r\n    const opt = {\r\n      width: 200,\r\n      height: 80,\r\n      ...options,\r\n    };\r\n\r\n    const screenOrigin = this.worldToScreen(opt.origin);\r\n    const startIndex = Math.max(opt.values.length - opt.width, 0);\r\n    const samples = opt.values.slice(startIndex, opt.values.length);\r\n    const min = options.min !== undefined ? options.min : Math.min(...samples);\r\n    const max = options.max !== undefined ? options.max : Math.max(...samples);\r\n    const range = max - min;\r\n\r\n    this.ctx.save();\r\n    this.ctx.translate(screenOrigin.x, screenOrigin.y);\r\n\r\n    // draw background\r\n    this.ctx.fillStyle = \"rgba(0, 0, 0, 0.1)\";\r\n    this.ctx.fillRect(0, 0, opt.width, opt.height);\r\n\r\n    let xPos = opt.width;\r\n\r\n    // draw line\r\n    this.ctx.beginPath();\r\n\r\n    let wasAnyValueCapped = false;\r\n\r\n    // build the line path\r\n    for (let i = samples.length; i >= 0; i--) {\r\n      const value = samples[i];\r\n      const cappedValue = Math.min(Math.max(value, min), max);\r\n      const isCapped = Math.abs(cappedValue - value) > 0.1;\r\n      const yPos = opt.height - Math.round(((cappedValue - min) / range) * opt.height);\r\n\r\n      if (i === 0) {\r\n        this.ctx.moveTo(xPos, yPos);\r\n      } else {\r\n        this.ctx.lineTo(xPos, yPos);\r\n      }\r\n\r\n      xPos--;\r\n\r\n      if (isCapped) {\r\n        wasAnyValueCapped = true;\r\n      }\r\n    }\r\n\r\n    // draw red when any of the values were capped to min/max\r\n    this.ctx.strokeStyle = wasAnyValueCapped ? \"rgba(200, 0, 0, 0.75)\" : \"rgba(0, 200, 0, 0.75)\";\r\n\r\n    // draw graph line and restore\r\n    this.ctx.stroke();\r\n    this.ctx.restore();\r\n\r\n    // draw name on top of the graph\r\n    this.drawText(\r\n      {\r\n        origin: options.origin,\r\n        text: options.name,\r\n        offset: {\r\n          x: 10,\r\n          y: 10,\r\n        },\r\n      },\r\n      {\r\n        fillStyle: \"#FFF\",\r\n      },\r\n    );\r\n  }\r\n\r\n  polarToCartesian({ angle, distance }: PolarCoordinates): CartesianCoordinates {\r\n    return {\r\n      x: distance * Math.cos(angle),\r\n      y: distance * Math.sin(angle),\r\n    };\r\n  }\r\n\r\n  toCartesian(coordinates: Coordinates): CartesianCoordinates {\r\n    if (this.isPolar(coordinates)) {\r\n      const angleCorrection = Math.PI / 2;\r\n\r\n      return {\r\n        x: coordinates.distance * Math.cos(coordinates.angle + angleCorrection),\r\n        y: coordinates.distance * Math.sin(coordinates.angle + angleCorrection),\r\n      };\r\n    }\r\n\r\n    // already cartesian\r\n    return coordinates;\r\n  }\r\n\r\n  worldToScreen(world: Coordinates): CartesianCoordinates {\r\n    const { x, y } = this.toCartesian(world);\r\n\r\n    return {\r\n      x: this.scale(x),\r\n      y: this.scale(y),\r\n    };\r\n  }\r\n\r\n  screenToWorld(screen: Coordinates): CartesianCoordinates {\r\n    const { x, y } = this.toCartesian(screen);\r\n    const scale = this.getScale();\r\n\r\n    return {\r\n      x: x / scale,\r\n      y: y / scale,\r\n    };\r\n  }\r\n\r\n  canvasToScreen(canvas: CartesianCoordinates) {\r\n    const origin = Vector.fromObject(this.getScreenOrigin());\r\n    const screen = Vector.fromObject(canvas)\r\n      .subtract(origin)\r\n      .rotate(this.transform.rotation)\r\n      .multiply(new Vector(this.transform.horizontalScaling, this.transform.verticalScaling));\r\n\r\n    return {\r\n      x: screen.x,\r\n      y: screen.y,\r\n    };\r\n  }\r\n\r\n  isPolar(coordinates: any): coordinates is PolarCoordinates {\r\n    return typeof coordinates.angle === \"number\" && typeof coordinates.distance === \"number\";\r\n  }\r\n\r\n  getScale() {\r\n    return this.transform.scale;\r\n  }\r\n\r\n  scale(distance: number) {\r\n    return distance * this.getScale();\r\n  }\r\n\r\n  toRadians(angleDegrees: number) {\r\n    return angleDegrees * (Math.PI / 180);\r\n  }\r\n\r\n  clear() {\r\n    this.ctx.save();\r\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n    this.ctx.clearRect(0, 0, this.width, this.height);\r\n    this.ctx.restore();\r\n  }\r\n\r\n  private applyStyle(options: DrawStyle) {\r\n    if (options.color) {\r\n      this.ctx.strokeStyle = options.color;\r\n      this.ctx.fillStyle = options.color;\r\n    }\r\n\r\n    if (options.strokeStyle) {\r\n      this.ctx.strokeStyle = options.strokeStyle;\r\n    }\r\n\r\n    if (options.fillStyle) {\r\n      this.ctx.fillStyle = options.fillStyle;\r\n    }\r\n\r\n    if (options.lineWidth) {\r\n      this.ctx.lineWidth = options.lineWidth;\r\n    }\r\n\r\n    if (options.font) {\r\n      this.ctx.font = options.font;\r\n    }\r\n\r\n    if (options.textAlign) {\r\n      this.ctx.textAlign = options.textAlign;\r\n    }\r\n\r\n    if (options.textBaseline) {\r\n      this.ctx.textBaseline = options.textBaseline;\r\n    }\r\n  }\r\n\r\n  // TODO: remove / refactor\r\n  private getScreenOrigin(): CartesianCoordinates {\r\n    return {\r\n      x: this.width / 2,\r\n      y: this.height / 2,\r\n    };\r\n  }\r\n\r\n  private renderFrame(time: number) {\r\n    if (!this.isRunning) {\r\n      return;\r\n    }\r\n\r\n    const currentTime = Date.now();\r\n    const dt = (this.lastRenderTime ? currentTime - this.lastRenderTime : 16) / 1000;\r\n\r\n    this.options.render({\r\n      dt,\r\n      time,\r\n      frame: this.frameNumber++,\r\n      layer: this,\r\n    });\r\n\r\n    this.lastRenderTime = currentTime;\r\n  }\r\n\r\n  private scheduleNextFrame() {\r\n    window.requestAnimationFrame(newTime => {\r\n      if (!this.isRunning) {\r\n        return;\r\n      }\r\n\r\n      this.renderFrame(newTime);\r\n      this.scheduleNextFrame();\r\n    });\r\n  }\r\n\r\n  private handleMouseEvent(type: LayerMouseEventType, event: MouseEvent) {\r\n    const screen = this.canvasToScreen(event);\r\n    const world = this.screenToWorld(screen);\r\n\r\n    const info = {\r\n      screen,\r\n      world,\r\n      isMouseDown: this.mouseDownCounter > 0,\r\n      event,\r\n    };\r\n\r\n    switch (type) {\r\n      case \"down\":\r\n        this.mouseDownCounter++;\r\n\r\n        this.options.onMouseDownEvent({ type, ...info });\r\n        break;\r\n\r\n      case \"up\":\r\n        this.mouseDownCounter--;\r\n\r\n        this.options.onMouseUpEvent({ type, ...info });\r\n        break;\r\n\r\n      case \"move\":\r\n        this.options.onMouseMoveEvent({ type, ...info });\r\n        break;\r\n    }\r\n  }\r\n}\r\n","import { Layer, LayerOptions } from \"./Layer\";\r\n\r\nexport class Visualizer {\r\n  readonly layers: Layer[] = [];\r\n\r\n  constructor(readonly container: HTMLElement) {}\r\n\r\n  createLayer(options: LayerOptions) {\r\n    // create canvas and add it to DOM\r\n    const canvas = this.createCanvasElement();\r\n    this.container.append(canvas);\r\n\r\n    // create layer and register it\r\n    const layer = new Layer(canvas, options);\r\n\r\n    this.layers.push(layer);\r\n\r\n    return layer;\r\n  }\r\n\r\n  start() {\r\n    // start rendering all layers\r\n    for (const layer of this.layers) {\r\n      layer.start();\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    // stop rendering all layers\r\n    for (const layer of this.layers) {\r\n      layer.stop();\r\n    }\r\n  }\r\n\r\n  private createCanvasElement() {\r\n    const canvas = document.createElement(\"canvas\");\r\n\r\n    canvas.style.position = \"absolute\";\r\n    canvas.style.width = \"100%\";\r\n    canvas.style.height = \"100%\";\r\n    canvas.style.left = \"0\";\r\n    canvas.style.right = \"0\";\r\n\r\n    return canvas;\r\n  }\r\n}\r\n","export * from \"./Layer\";\r\nexport * from \"./Visualizer\";\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { LidarMeasurement } from \"../containers/MeasurementsContainer\";\r\nimport { FrameInfo, LayerOptions, Visualizer } from \"../lib/visualizer\";\r\n\r\nexport interface LidarMapProps {\r\n  radius: number;\r\n  cellSize: number;\r\n  measurements(): LidarMeasurement[];\r\n}\r\n\r\nexport class LidarMap extends React.Component<LidarMapProps> {\r\n  private readonly wrapRef = React.createRef<HTMLDivElement>();\r\n  private visualizer: Visualizer | null = null;\r\n\r\n  componentDidMount() {\r\n    // map setup is delayed to allow for it to get correct size\r\n    setImmediate(() => this.setupMap());\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // stop and destroy the visualizer\r\n    if (this.visualizer !== null) {\r\n      this.visualizer.stop();\r\n      this.visualizer = null;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Map ref={this.wrapRef} />;\r\n  }\r\n\r\n  private setupMap() {\r\n    const wrap = this.wrapRef.current;\r\n\r\n    if (!wrap) {\r\n      throw new Error(\"Wrap element was not found, this should not happen\");\r\n    }\r\n\r\n    // setup visualizer\r\n    this.visualizer = new Visualizer(wrap);\r\n\r\n    // common map layer options\r\n    const mapLayerOptions: LayerOptions = {\r\n      getTransform: layer => {\r\n        const screenOrigin = {\r\n          x: layer.width / 2,\r\n          y: layer.height / 2,\r\n        };\r\n        const rotation = -Math.PI / 2;\r\n        const scale = layer.size / 2 / (this.props.radius + this.props.cellSize);\r\n\r\n        return {\r\n          horizontalScaling: -1,\r\n          verticalSkewing: 0,\r\n          horizontalSkewing: 0,\r\n          verticalScaling: 1,\r\n          horizontalTranslation: screenOrigin.x,\r\n          verticalTranslation: screenOrigin.y,\r\n          rotation,\r\n          scale,\r\n        };\r\n      },\r\n    };\r\n\r\n    this.visualizer.createLayer({\r\n      ...mapLayerOptions,\r\n      render: this.renderBackground.bind(this),\r\n    });\r\n\r\n    this.visualizer.createLayer({\r\n      ...mapLayerOptions,\r\n      render: this.renderMap.bind(this),\r\n    });\r\n\r\n    // start rendering\r\n    this.visualizer.start();\r\n  }\r\n\r\n  private renderBackground({ layer, frame }: FrameInfo) {\r\n    // only draw the first frame\r\n    if (frame > 0) {\r\n      return;\r\n    }\r\n\r\n    const gridSize = (this.props.radius * 2) / this.props.cellSize;\r\n    const circleStep = this.props.radius / 4;\r\n\r\n    // draw full size background grid\r\n    layer.drawGrid(\r\n      {\r\n        cellWidth: this.props.cellSize,\r\n        cellHeight: this.props.cellSize,\r\n      },\r\n      { strokeStyle: \"#222\" },\r\n    );\r\n\r\n    // draw map sized active grid\r\n    layer.drawGrid(\r\n      {\r\n        rows: gridSize,\r\n        columns: gridSize,\r\n        cellWidth: this.props.cellSize,\r\n        cellHeight: this.props.cellSize,\r\n      },\r\n      { strokeStyle: \"#333\" },\r\n    );\r\n\r\n    // draw radius circles\r\n    for (let circleRadius = circleStep; circleRadius <= this.props.radius; circleRadius += circleStep) {\r\n      layer.drawCircle({ radius: circleRadius }, { strokeStyle: \"#444\" });\r\n      layer.drawText(\r\n        { origin: { x: 0, y: circleRadius }, text: `${circleRadius.toFixed(2)}m`, offset: { x: 10, y: 0 } },\r\n        { fillStyle: \"#444\", textBaseline: \"middle\" },\r\n      );\r\n    }\r\n\r\n    // draw coordinates system\r\n    layer.drawCoordinateSystem();\r\n  }\r\n\r\n  private renderMap({ layer }: FrameInfo) {\r\n    // clear map\r\n    layer.clear();\r\n\r\n    // get measurements\r\n    const measurements = this.props.measurements();\r\n\r\n    // render measurements\r\n    for (const measurement of measurements) {\r\n      layer.drawMarker(\r\n        {\r\n          center: {\r\n            angle: layer.toRadians(measurement.angle),\r\n            distance: measurement.distance / 100,\r\n          },\r\n        },\r\n        {\r\n          // draw lower quality measurements with lower opacity\r\n          fillStyle: `rgba(255, 255, 255, ${measurement.quality / 100})`,\r\n        },\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst Map = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { Simulator } from \"../lib/simulator\";\r\n\r\nexport class Simulation extends React.Component {\r\n  private readonly containerRef = React.createRef<HTMLDivElement>();\r\n  private simulator: Simulator | null = null;\r\n\r\n  componentDidMount() {\r\n    // setup is delayed to allow for it to get correct size\r\n    setImmediate(() => this.setup());\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.simulator !== null) {\r\n      this.simulator.stop();\r\n      this.simulator = null;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Map ref={this.containerRef} />;\r\n  }\r\n\r\n  private setup() {\r\n    const container = this.containerRef.current;\r\n\r\n    if (!container) {\r\n      throw new Error(\"Wrap element was not found, this should not happen\");\r\n    }\r\n\r\n    this.simulator = new Simulator({\r\n      container,\r\n      radius: 5,\r\n      cellSize: 0.1,\r\n      pathPlanningIntervalMs: 100,\r\n    });\r\n\r\n    this.simulator.start();\r\n  }\r\n}\r\n\r\nconst Map = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n","import { FpsCounter } from \"../fps-counter\";\r\nimport { GamepadManager, ManagedGamepad } from \"../gamepad\";\r\nimport { OccupancyGrid, Path } from \"../occupancy-grid\";\r\nimport { Statistics } from \"../statistics\";\r\nimport { CartesianCoordinates, FrameInfo, Layer, LayerMouseEvent, LayerOptions, Visualizer } from \"../visualizer\";\r\n\r\nexport interface TimedCartesianCoordinates extends CartesianCoordinates {\r\n  time: number;\r\n}\r\n\r\nexport interface SimulatorOptions {\r\n  container: HTMLElement;\r\n  radius: number;\r\n  cellSize: number;\r\n  pathPlanningIntervalMs: number;\r\n}\r\n\r\nexport enum Stat {\r\n  FPS = \"FPS\",\r\n  PATH_FINDER = \"Path finder\",\r\n}\r\n\r\nexport class Simulator {\r\n  private readonly occupancyGrid: OccupancyGrid;\r\n  private readonly fpsCounter: FpsCounter;\r\n  private readonly statistics: Statistics;\r\n  private readonly gamepadManager: GamepadManager;\r\n  private readonly visualizer: Visualizer;\r\n  private gamepad?: ManagedGamepad;\r\n  private pulses: TimedCartesianCoordinates[] = [];\r\n  private gridModificationMode = 0;\r\n  private lastPathPlanningTime = 0;\r\n  private path: Path = [];\r\n\r\n  constructor(readonly options: SimulatorOptions) {\r\n    const gridSize = (options.radius * 2) / options.cellSize;\r\n\r\n    // setup occupancy grid\r\n    this.occupancyGrid = OccupancyGrid.generate(\r\n      { rows: gridSize, columns: gridSize, defaultValue: 0 },\r\n      { cellWidth: options.cellSize, cellHeight: options.cellSize },\r\n    );\r\n\r\n    // setup fps counter\r\n    this.fpsCounter = new FpsCounter();\r\n\r\n    // setup statistics manager\r\n    this.statistics = new Statistics();\r\n\r\n    // setup gamepad\r\n    this.gamepadManager = new GamepadManager({\r\n      log: console,\r\n      onConnect: gamepad => {\r\n        console.log(\"GOT GAMEPAD\", gamepad, this.gamepadManager.gamepads);\r\n\r\n        this.gamepad = this.gamepadManager.getFirstAvailableGamepad();\r\n      },\r\n      onDisconnect: gamepad => {\r\n        console.log(\"LOST GAMEPAD\", gamepad, this.gamepadManager.gamepads);\r\n\r\n        this.gamepad = this.gamepadManager.getFirstAvailableGamepad();\r\n      },\r\n      onUpdate: gamepad => {\r\n        // console.log(\"GAMEPAD UPDATED\", gamepad.index, gamepad.axes, gamepad.buttons);\r\n        gamepad.axes.forEach((axisValue, axisIndex) => {\r\n          const name = `Gamepad #${gamepad.index}.${axisIndex}`;\r\n\r\n          if (!this.statistics.getByName(name)) {\r\n            this.statistics.create({\r\n              name,\r\n              min: -1,\r\n              max: 1,\r\n              decimalPlaces: 2,\r\n            });\r\n          }\r\n\r\n          this.statistics.report(name, axisValue);\r\n        });\r\n      },\r\n    });\r\n\r\n    // setup visualizer\r\n    this.visualizer = new Visualizer(this.options.container);\r\n\r\n    // common map layer options\r\n    const mapLayerOptions: LayerOptions = {\r\n      defaultStyle: {\r\n        fillStyle: \"#000\",\r\n        strokeStyle: \"#000\",\r\n        font: \"16px roboto-mono-light\",\r\n        textBaseline: \"top\",\r\n      },\r\n      getTransform: layer => {\r\n        const screenOrigin = {\r\n          x: layer.width / 2,\r\n          y: layer.height / 2,\r\n        };\r\n        const rotation = -Math.PI / 2;\r\n        const scale = layer.size / 2 / (options.radius + options.cellSize);\r\n\r\n        return {\r\n          horizontalScaling: -1,\r\n          verticalSkewing: 0,\r\n          horizontalSkewing: 0,\r\n          verticalScaling: 1,\r\n          horizontalTranslation: screenOrigin.x,\r\n          verticalTranslation: screenOrigin.y,\r\n          rotation,\r\n          scale,\r\n        };\r\n      },\r\n    };\r\n\r\n    // background\r\n    this.visualizer.createLayer({\r\n      ...mapLayerOptions,\r\n      render: this.renderBackground.bind(this),\r\n    });\r\n\r\n    // // map\r\n    this.visualizer.createLayer({\r\n      ...mapLayerOptions,\r\n      render: this.renderMap.bind(this),\r\n      onMouseDownEvent: this.onMouseDown.bind(this),\r\n      onMouseUpEvent: this.onMouseUp.bind(this),\r\n      onMouseMoveEvent: this.onMouseMove.bind(this),\r\n    });\r\n\r\n    // foreground\r\n    this.visualizer.createLayer({\r\n      defaultStyle: {\r\n        fillStyle: \"#000\",\r\n        strokeStyle: \"#000\",\r\n        font: \"16px roboto-mono-light\",\r\n        textBaseline: \"top\",\r\n      },\r\n      render: this.renderForeground.bind(this),\r\n    });\r\n\r\n    // create statistics\r\n    this.statistics.create({\r\n      name: Stat.FPS,\r\n      min: 0,\r\n      max: 62,\r\n    });\r\n\r\n    this.statistics.create({\r\n      name: Stat.PATH_FINDER,\r\n      unit: \"ms\",\r\n      min: 0,\r\n      max: 100,\r\n    });\r\n  }\r\n\r\n  start() {\r\n    this.visualizer.start();\r\n  }\r\n\r\n  stop() {\r\n    this.visualizer.stop();\r\n  }\r\n\r\n  private renderBackground({ layer, frame }: FrameInfo) {\r\n    // only draw the first frame\r\n    if (frame > 0) {\r\n      return;\r\n    }\r\n\r\n    const cellWidth = this.options.cellSize;\r\n    const cellHeight = this.options.cellSize;\r\n    const gridSize = (this.options.radius * 2) / this.options.cellSize;\r\n    const circleStep = this.options.radius / 4;\r\n\r\n    // draw full size background grid\r\n    layer.drawGrid(\r\n      {\r\n        cellWidth,\r\n        cellHeight,\r\n        columns: 2 * Math.ceil(layer.height / layer.getScale() / cellWidth / 2),\r\n        rows: 2 * Math.ceil(layer.width / layer.getScale() / cellHeight / 2),\r\n        centered: true,\r\n      },\r\n      { strokeStyle: \"#222\" },\r\n    );\r\n\r\n    // draw map sized active grid\r\n    layer.drawGrid(\r\n      {\r\n        rows: gridSize,\r\n        columns: gridSize,\r\n        cellWidth,\r\n        cellHeight,\r\n        centered: true,\r\n      },\r\n      { strokeStyle: \"#333\" },\r\n    );\r\n\r\n    // draw radius circles\r\n    for (let circleRadius = circleStep; circleRadius <= this.options.radius; circleRadius += circleStep) {\r\n      layer.drawCircle({ radius: circleRadius }, { strokeStyle: \"#444\" });\r\n      layer.drawText(\r\n        { origin: { x: 0, y: circleRadius }, text: `${circleRadius.toFixed(2)}m`, offset: { x: 10, y: 0 } },\r\n        { fillStyle: \"#444\", textBaseline: \"middle\" },\r\n      );\r\n    }\r\n\r\n    // draw coordinates system\r\n    layer.drawCoordinateSystem();\r\n  }\r\n\r\n  private renderMap({ layer }: FrameInfo) {\r\n    // clear map\r\n    layer.clear();\r\n\r\n    const currentTime = Date.now();\r\n\r\n    // perform path planning at certain interval\r\n    if (currentTime - this.lastPathPlanningTime > this.options.pathPlanningIntervalMs) {\r\n      const pathStartTime = Date.now();\r\n      this.path = this.occupancyGrid.findShortestPath({\r\n        from: [0, 0],\r\n        to: [this.occupancyGrid.data.length - 1, this.occupancyGrid.data[0].length - 1],\r\n      });\r\n      const pathTimeTaken = Date.now() - pathStartTime;\r\n\r\n      this.statistics.report(Stat.PATH_FINDER, pathTimeTaken);\r\n\r\n      this.lastPathPlanningTime = currentTime;\r\n    }\r\n\r\n    // console.log(path);\r\n\r\n    // draw occupancy grid\r\n    layer.drawOccupancyGrid({\r\n      grid: this.occupancyGrid.data,\r\n      path: this.path,\r\n      cellWidth: this.options.cellSize,\r\n      cellHeight: this.options.cellSize,\r\n      centered: true,\r\n    });\r\n\r\n    // draw pulses\r\n    this.drawPulses(layer);\r\n\r\n    // update the fps counter\r\n    this.fpsCounter.update();\r\n  }\r\n\r\n  private renderForeground({ layer }: FrameInfo) {\r\n    layer.clear();\r\n\r\n    // get current fps\r\n    const fps = this.fpsCounter.getFps();\r\n\r\n    // report the FPS statistic\r\n    this.statistics.report(Stat.FPS, fps);\r\n\r\n    // draw statistic graphs\r\n    this.statistics.statistics.forEach((statistic, i) => {\r\n      layer.drawGraph({\r\n        name: `${statistic.options.name}: ${statistic\r\n          .getLatest()\r\n          .toFixed(statistic.options.decimalPlaces || 0)}${statistic.options.unit || \"\"}`,\r\n        origin: { x: 10, y: 30 + i * 80 },\r\n        min: statistic.options.min,\r\n        max: statistic.options.max,\r\n        values: statistic.values,\r\n      });\r\n    });\r\n\r\n    // draw gamepad buttons as a grid\r\n    for (const gamepad of this.gamepadManager.gamepads) {\r\n      // reduce the button values to a grid\r\n      const grid = [\r\n        gamepad.buttons.reduce<number[]>((values, button) => {\r\n          values.push(button.value);\r\n          // values.push(1);\r\n\r\n          return values;\r\n        }, []),\r\n      ];\r\n      const cellSize = 200 / gamepad.buttons.length;\r\n      const origin = { x: 10, y: 10 };\r\n\r\n      layer.drawGrid(\r\n        {\r\n          origin,\r\n          rows: 1,\r\n          columns: gamepad.buttons.length,\r\n          cellWidth: cellSize,\r\n          cellHeight: cellSize,\r\n        },\r\n        { strokeStyle: \"#111\" },\r\n      );\r\n\r\n      layer.drawOccupancyGrid({\r\n        grid,\r\n        origin,\r\n        cellWidth: cellSize,\r\n        cellHeight: cellSize,\r\n      });\r\n    }\r\n  }\r\n\r\n  private drawPulses(layer: Layer) {\r\n    // draw mouse events\r\n    const currentTime = Date.now();\r\n    const lifetime = 250;\r\n\r\n    // remove expired pulses\r\n    this.pulses = this.pulses.filter(({ time }) => currentTime - time < lifetime);\r\n\r\n    // draw pulses\r\n    this.pulses.forEach(({ x, y, time }) =>\r\n      layer.drawPulse({ center: { x, y }, lifetime, age: currentTime - time }, { fillStyle: \"#0F0\" }),\r\n    );\r\n  }\r\n\r\n  private onMouseDown({ world }: LayerMouseEvent) {\r\n    const currentOccupancy = this.occupancyGrid.getOccupancyAt(world);\r\n\r\n    if (currentOccupancy !== undefined) {\r\n      if (this.gridModificationMode === 0) {\r\n        this.gridModificationMode = currentOccupancy === 0 ? 1 : -1;\r\n      }\r\n\r\n      this.occupancyGrid.setOccupancyAt({ center: world, occupancy: currentOccupancy === 1 ? 0 : 1 });\r\n      this.pulses.push({ ...world, time: Date.now() });\r\n    }\r\n  }\r\n\r\n  private onMouseUp(_event: LayerMouseEvent) {\r\n    this.gridModificationMode = 0;\r\n  }\r\n\r\n  private onMouseMove({ world, isMouseDown, event }: LayerMouseEvent) {\r\n    if (!isMouseDown || event.button !== 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.gridModificationMode === 0) {\r\n      const currentOccupancy = this.occupancyGrid.getOccupancyAt(world);\r\n\r\n      this.gridModificationMode = currentOccupancy === 0 ? 1 : -1;\r\n    }\r\n\r\n    this.occupancyGrid.setOccupancyAt({ center: world, occupancy: this.gridModificationMode === 1 ? 1 : 0 });\r\n  }\r\n}\r\n","export interface FpsCounterOptions {\r\n  historySize?: number;\r\n  averageSize?: number;\r\n}\r\n\r\nexport class FpsCounter {\r\n  private options: Required<FpsCounterOptions>;\r\n  private frameDurations: number[] = [];\r\n  private lastFrameTime?: number;\r\n\r\n  constructor(options: FpsCounterOptions = {}) {\r\n    this.options = {\r\n      historySize: 60,\r\n      averageSize: 60,\r\n      ...options,\r\n    };\r\n  }\r\n\r\n  update() {\r\n    const currentTime = Date.now();\r\n\r\n    if (!this.lastFrameTime) {\r\n      this.lastFrameTime = currentTime;\r\n\r\n      return;\r\n    }\r\n\r\n    const frameDuration = currentTime - this.lastFrameTime;\r\n\r\n    this.frameDurations.push(frameDuration);\r\n\r\n    if (this.frameDurations.length > this.options.historySize) {\r\n      this.frameDurations.shift();\r\n    }\r\n\r\n    this.lastFrameTime = currentTime;\r\n  }\r\n\r\n  getFps() {\r\n    const samples = this.frameDurations.slice(\r\n      Math.max(this.frameDurations.length - this.options.averageSize, 0),\r\n      this.frameDurations.length,\r\n    );\r\n\r\n    if (samples.length === 0) {\r\n      return 0;\r\n    }\r\n\r\n    const sum = samples.reduce((result, frameDuration) => result + frameDuration, 0);\r\n    const avg = sum / samples.length;\r\n    const fps = 1000 / avg;\r\n\r\n    return fps;\r\n  }\r\n\r\n  getHistory() {\r\n    return this.frameDurations;\r\n  }\r\n}\r\n","import { dummyLogger, Logger } from \"ts-log\";\r\n\r\nimport { ManagedGamepad } from \"./\";\r\n\r\nexport interface GamepadManagerOptions {\r\n  readonly log?: Logger;\r\n  readonly autoPoll?: boolean;\r\n  onConnect?(gamepad: ManagedGamepad): void;\r\n  onDisconnect?(gamepad: ManagedGamepad): void;\r\n  onUpdate?(gamepad: ManagedGamepad): void;\r\n}\r\n\r\nexport class GamepadManager {\r\n  gamepads: ManagedGamepad[] = [];\r\n  private options: Required<GamepadManagerOptions>;\r\n  private log: Logger;\r\n\r\n  constructor(options: GamepadManagerOptions = {}) {\r\n    this.options = {\r\n      log: dummyLogger,\r\n      autoPoll: true,\r\n      onConnect: _gamepad => {\r\n        /* nothing */\r\n      },\r\n      onDisconnect: _gamepad => {\r\n        /* nothing */\r\n      },\r\n      onUpdate: _gamepad => {\r\n        /* nothing */\r\n      },\r\n      ...options,\r\n    };\r\n    this.log = this.options.log;\r\n\r\n    // detect gamepad support\r\n    if (typeof navigator.getGamepads !== \"function\") {\r\n      this.log.info(\"gamepads are not supported\");\r\n\r\n      return;\r\n    }\r\n\r\n    // listen for gamepad connect events\r\n    window.addEventListener(\"gamepadconnected\", e => {\r\n      const event = e as GamepadEvent;\r\n      const gamepad = event.gamepad;\r\n\r\n      this.log.info(\r\n        `gamepad #${gamepad.index} \"${gamepad.id}\" connected (${gamepad.buttons.length} buttons, ${\r\n          gamepad.axes.length\r\n        } axes)`,\r\n      );\r\n\r\n      // create managed gamepad\r\n      const managedGamepad = new ManagedGamepad({ index: gamepad.index, log: this.log });\r\n\r\n      // listen for updates, trigger update events\r\n      managedGamepad.addUpdateListener(updatedGamepad => this.options.onUpdate(updatedGamepad));\r\n\r\n      // start polling if requested automatically\r\n      if (this.options.autoPoll) {\r\n        managedGamepad.startPolling();\r\n      }\r\n\r\n      // store reference\r\n      this.gamepads.push(managedGamepad);\r\n\r\n      // trigger connect event\r\n      this.options.onConnect(managedGamepad);\r\n    });\r\n\r\n    // listen for gamepad disconnect events\r\n    window.addEventListener(\"gamepaddisconnected\", e => {\r\n      const event = e as GamepadEvent;\r\n      const gamepad = event.gamepad;\r\n\r\n      // attempt to find the gamepad by index\r\n      const managedGamepad = this.getGamepadByIndex(gamepad.index);\r\n\r\n      // handle failure to find the gamepad\r\n      if (!managedGamepad) {\r\n        this.log.warn(\r\n          `gamepad #${gamepad.index} \"${\r\n            gamepad.id\r\n          }\" disconnected but no managed gamepad with this index was found, this should not happen`,\r\n        );\r\n\r\n        return;\r\n      }\r\n\r\n      this.log.info(`gamepad #${gamepad.index} \"${gamepad.id}\" disconnected`);\r\n\r\n      // remove the gamepad from the list of managed gamepads\r\n      this.gamepads = this.gamepads.filter(item => item !== managedGamepad);\r\n\r\n      // stop polling\r\n      managedGamepad.stopPolling();\r\n\r\n      // trigger disconnect event\r\n      this.options.onDisconnect(managedGamepad);\r\n    });\r\n\r\n    // const gamepads = navigator.getGamepads();\r\n  }\r\n\r\n  getGamepadByIndex(index: number) {\r\n    return this.gamepads.find(gamepad => gamepad.index === index);\r\n  }\r\n\r\n  getFirstAvailableGamepad() {\r\n    return this.gamepads.length > 0 ? this.gamepads[0] : undefined;\r\n  }\r\n}\r\n","import { dummyLogger, Logger } from \"ts-log\";\r\n\r\nexport interface ManagedGamepadOptions {\r\n  readonly log?: Logger;\r\n  readonly index: number;\r\n}\r\n\r\nexport type HandleUpdateFn = (gamepad: ManagedGamepad) => void;\r\n\r\nexport class ManagedGamepad {\r\n  index: number;\r\n  axes: number[] = [];\r\n  buttons: GamepadButton[] = [];\r\n  private readonly options: Required<ManagedGamepadOptions>;\r\n  private readonly log: Logger;\r\n  private updateListeners: HandleUpdateFn[] = [];\r\n  private isPolling = false;\r\n  private animationFrameRequest?: number;\r\n\r\n  constructor(options: ManagedGamepadOptions) {\r\n    this.options = {\r\n      log: dummyLogger,\r\n      ...options,\r\n    };\r\n    this.log = this.options.log;\r\n    this.index = this.options.index;\r\n  }\r\n\r\n  addUpdateListener(listener: HandleUpdateFn) {\r\n    this.updateListeners.push(listener);\r\n  }\r\n\r\n  removeUpdateListener(listener: HandleUpdateFn) {\r\n    this.updateListeners = this.updateListeners.filter(item => item !== listener);\r\n  }\r\n\r\n  startPolling() {\r\n    if (!this.isPolling) {\r\n      this.log.info(`starting polling of gamepad #${this.index}`);\r\n    }\r\n\r\n    // we're now in polling mode\r\n    this.isPolling = true;\r\n\r\n    // request animation frame for polling\r\n    this.animationFrameRequest = requestAnimationFrame(() => {\r\n      this.animationFrameRequest = undefined;\r\n\r\n      // perform poll\r\n      this.poll();\r\n\r\n      // request another poll if not stopped\r\n      if (this.isPolling) {\r\n        this.startPolling();\r\n      }\r\n    });\r\n  }\r\n\r\n  stopPolling() {\r\n    // do nothing if not polling\r\n    if (!this.isPolling) {\r\n      return;\r\n    }\r\n\r\n    // not polling any more\r\n    this.isPolling = false;\r\n\r\n    this.log.info(`stopping polling of gamepad #${this.index}`);\r\n\r\n    // cancel next animation frame if scheduled\r\n    if (this.animationFrameRequest !== undefined) {\r\n      cancelAnimationFrame(this.animationFrameRequest);\r\n    }\r\n  }\r\n\r\n  getState() {\r\n    // get gamepad by index\r\n    const gamepad = navigator.getGamepads()[this.index];\r\n\r\n    // return undefined if no valid gamepad could be found\r\n    if (gamepad === undefined || gamepad === null) {\r\n      return undefined;\r\n    }\r\n\r\n    return gamepad;\r\n  }\r\n\r\n  private poll() {\r\n    // get current gamepad info\r\n    const gamepad = this.getState();\r\n\r\n    // give up if not found\r\n    if (!gamepad) {\r\n      this.log.warn(`attempted to poll gamepad #${this.index} but the gamepad could not be found`);\r\n\r\n      // stop polling unavailable gamepad\r\n      if (this.isPolling) {\r\n        this.stopPolling();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // store current state\r\n    this.axes = [...gamepad.axes];\r\n    this.buttons = [...gamepad.buttons];\r\n\r\n    // call the update listeners\r\n    for (const updateListener of this.updateListeners) {\r\n      updateListener(this);\r\n    }\r\n  }\r\n}\r\n","import { AStarFinder as PathFinder, DiagonalMovement, Grid, Heuristic } from \"pathfinding\";\r\n\r\nexport interface OccupancyGridOptions {\r\n  cellWidth: number;\r\n  cellHeight: number;\r\n}\r\n\r\nexport interface GenerateOccupancyGridOptions {\r\n  rows: number;\r\n  columns: number;\r\n  defaultValue: number;\r\n}\r\n\r\nexport interface Coordinates {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface SetOccupancyOptions {\r\n  row: number;\r\n  column: number;\r\n  occupancy: number;\r\n}\r\n\r\nexport interface SetOccupancyAtOptions {\r\n  center: Coordinates;\r\n  occupancy: number;\r\n}\r\n\r\nexport interface FindShortestPathOptions {\r\n  from: Cell;\r\n  to: Cell;\r\n}\r\n\r\nexport interface OccupancyGridSize {\r\n  rows: number;\r\n  columns: number;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport type OccupancyGridData = number[][];\r\n\r\nexport type Cell = [number, number];\r\n\r\nexport type Path = Cell[];\r\n\r\nexport class OccupancyGrid {\r\n  options: Required<OccupancyGridOptions>;\r\n\r\n  constructor(public data: OccupancyGridData, options: OccupancyGridOptions) {\r\n    this.options = {\r\n      ...options,\r\n    };\r\n  }\r\n\r\n  static generate({ rows, columns, defaultValue }: GenerateOccupancyGridOptions, options: OccupancyGridOptions) {\r\n    const data: OccupancyGridData = [];\r\n    // const data: OccupancyGridData = Array(rows).fill(Array(columns).fill(defaultValue));\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n      data[row] = Array(columns).fill(defaultValue);\r\n    }\r\n\r\n    return new OccupancyGrid(data, options);\r\n  }\r\n\r\n  setOccupancy({ row, column, occupancy }: SetOccupancyOptions) {\r\n    this.data[row][column] = occupancy;\r\n  }\r\n\r\n  setOccupancyAt({ center, occupancy }: SetOccupancyAtOptions) {\r\n    const { row, column, exists } = this.getCellAtCoordinates(center);\r\n\r\n    if (!exists) {\r\n      return;\r\n    }\r\n\r\n    this.setOccupancy({ row, column, occupancy });\r\n  }\r\n\r\n  getOccupancyAt(center: Coordinates) {\r\n    const { row, column, exists } = this.getCellAtCoordinates(center);\r\n\r\n    if (!exists) {\r\n      return undefined;\r\n    }\r\n\r\n    return this.getOccupancy(row, column);\r\n  }\r\n\r\n  getOccupancy(row: number, column: number) {\r\n    if (this.data[row] === undefined || this.data[row][column] === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    return this.data[row][column];\r\n  }\r\n\r\n  getCellAtCoordinates(center: Coordinates) {\r\n    const { rows, columns, width, height } = this.getSize();\r\n    const position = { x: center.x + width / 2, y: center.y + height / 2 };\r\n    const row = Math.floor(position.y / this.options.cellHeight);\r\n    const column = Math.floor(position.x / this.options.cellWidth);\r\n    const exists = row >= 0 && row < rows && column >= 0 && column < columns;\r\n\r\n    return {\r\n      row,\r\n      column,\r\n      exists,\r\n    };\r\n  }\r\n\r\n  getSize(): OccupancyGridSize {\r\n    const rows = this.data.length;\r\n    const columns = this.data.length > 0 ? this.data[0].length : 0;\r\n\r\n    return {\r\n      rows,\r\n      columns,\r\n      width: rows * this.options.cellWidth,\r\n      height: columns * this.options.cellHeight,\r\n    };\r\n  }\r\n\r\n  findShortestPath({ from, to }: FindShortestPathOptions): Path {\r\n    const grid = new Grid(this.data);\r\n    const finder = new PathFinder({\r\n      diagonalMovement: DiagonalMovement.Never,\r\n      heuristic: Heuristic.euclidean,\r\n    });\r\n    const path = finder.findPath(from[0], from[1], to[0], to[1], grid);\r\n\r\n    return path as Cell[];\r\n  }\r\n}\r\n","export interface StatisticOptions {\r\n  readonly name: string;\r\n  readonly min?: number;\r\n  readonly max?: number;\r\n  readonly unit?: string;\r\n  readonly decimalPlaces?: number;\r\n  readonly historyLength?: number;\r\n}\r\n\r\nexport class Statistic {\r\n  readonly values: number[] = [];\r\n\r\n  constructor(readonly options: StatisticOptions) {}\r\n\r\n  report(value: number) {\r\n    const historyLength = this.options.historyLength || 200;\r\n\r\n    this.values.push(value);\r\n\r\n    if (this.values.length > historyLength) {\r\n      this.values.shift();\r\n    }\r\n  }\r\n\r\n  getLatest() {\r\n    if (this.values.length === 0) {\r\n      return 0;\r\n    }\r\n\r\n    return this.values[this.values.length - 1];\r\n  }\r\n}\r\n","import { Statistic, StatisticOptions } from \"./Statistic\";\r\n\r\nexport class Statistics {\r\n  readonly statistics: Statistic[] = [];\r\n\r\n  create(options: StatisticOptions) {\r\n    const statistic = new Statistic(options);\r\n\r\n    this.statistics.push(statistic);\r\n  }\r\n\r\n  getByName(name: string) {\r\n    return this.statistics.find(statistic => statistic.options.name === name);\r\n  }\r\n\r\n  report(name: string, value: number) {\r\n    const statistic = this.getByName(name);\r\n\r\n    if (!statistic) {\r\n      throw new Error(`Statistic called \"${name}\" could not be found`);\r\n    }\r\n\r\n    statistic.report(value);\r\n\r\n    return statistic;\r\n  }\r\n}\r\n","export * from \"./Simulator\";\r\n"],"sourceRoot":""}