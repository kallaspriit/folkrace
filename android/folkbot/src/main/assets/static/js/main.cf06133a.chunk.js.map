{"version":3,"sources":["lib/web-socket-client/index.ts","containers/LogContainer.ts","config.ts","containers/StatusContainer.ts","components/glue/Glue.tsx","services/webSocketClient.ts","components/main-menu/MainMenu.tsx","views/bot/BotView.tsx","views/map/MapView.tsx","components/joystick/Joystick.tsx","lib/web-socket-client/TrackedVehicleKinematics.ts","lib/web-socket-client/RemoteController.ts","views/remote/RemoteView.tsx","views/settings/SettingsView.tsx","components/grid/Grid.tsx","components/icon/Icon.tsx","services/pad.ts","views/status/StatusView.tsx","services/assertUnreachable.ts","services/formatTime.ts","App.tsx","index.tsx"],"names":["WebSocketState","LogContainer","state","entries","lastId","message","_this2","this","avoidDuplicate","arguments","length","undefined","setState","previousState","lastEntryMessage","Object","toConsumableArray","slice","concat","objectSpread","time","Date","id","toString","shift","catch","error","console","Container","config","webSocket","host","localStorage","webSocketHost","port","webSocketPort","parseInt","useSSL","reconnectInterval","rules","battery","low","critical","vehicle","trackWidth","maxSpeed","wheelDiameter","encoderCountsPerRotation","gearboxRatio","speedUpdateInterval","SerialType","SerialState","BatteryState","WebSocketClient","options","classCallCheck","connectionState","DISCONNECTED","listeners","wasConnected","log","dummyLogger","url","ws","connect","listener","push","filter","item","_this","addNewLine","CONNECTED","forEach","onSendMessage","send","warn","newState","oldState","onStateChanged","_this3","info","RECONNECTING","CONNECTING","onConnecting","WebSocket","onopen","event","onOpen","onclose","logDetails","code","reason","wasClean","setTimeout","onClose","onerror","onError","onmessage","onMessage","data","WebSocketCommand","StatusContainer","serials","BLUETOOTH","type","deviceName","USB","webSocketState","typeKey","keys","find","typeName","batteryVoltage","map","serialName","serial","voltage","UNKNOWN","CRITICAL","LOW","FULL","webSocketClient","REQUEST_BATTERY_VOLTAGE_INTERVAL","isInitialized","requestBatteryVoltageInterval","webSocketCommandHandlers","_webSocketCommandHand","defineProperty","SERIAL","args","containers","serialType","serialState","serialDeviceName","statusContainer","setSerialState","getConnectedSerial","requestVoltage","window","setInterval","clearInterval","setBatteryVoltage","GET_VOLTAGE","parseFloat","Glue","react","unstated_es","to","logContainer","setWebSocketState","subscribe","_ws","_wasConnected","addEntry","_event","_message$split","split","_message$split2","toArray","name","handler","handleWebSocketCommand","handleWebSocketMessage","_oldState","MainMenu","className","NavLink","activeClassName","BotView","MapView","Joystick","ref","React","el","current","manager","nipplejs","zone","color","size","position","left","top","mode","onEvent","props","bind","on","nipple","off","TrackedVehicleKinematics","speed","omega","limit","right","targetEncoderCountPerSecond","Math","PI","floor","speeds","maxRequestedSpeedMagnitude","max","abs","normalizationFactor","min","getSpeedEncoderCount","RemoteController","kinematics","scheduleUpdateMotorSpeeds","throttle","updateMotorSpeeds","motorSpeeds","calculateMotorSpeeds","encoderSpeeds","getEncoderSpeeds","RemoteView","remoteController","Joystick_Joystick","onJoystickEvent","indexOf","isMoveEvent","xPos","sin","angle","radian","distance","yPos","cos","setSpeed","setOmega","Error","SettingsView","onClick","location","href","Grid","_ref","children","classNames","GridItem","_React$Component","_getPrototypeOf2","_len","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","inherits","createClass","key","value","scrollToBottom","scrollHeight","clientHeight","scrollTop","Icon","width","height","style","getStyle","pad","padder","str","missingLength","join","StatusView","connectedSerial","Grid_Grid","Grid_GridItem","titleCase","batteryState","assertUnreachable","getBatteryLevelClass","toFixed","entry","date","getHours","getMinutes","getSeconds","getMilliseconds","clear","icon_Icon","App","glue_Glue","BrowserRouter","Switch","Route","path","component","exact","Redirect","components_main_menu_MainMenu","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.cf06133a.chunk.js","sourcesContent":["import { dummyLogger, Logger } from \"ts-log\";\r\n\r\nexport interface WebSocketClientListener {\r\n  onConnecting(ws: WebSocketClient, wasConnected: boolean): void;\r\n  onOpen(ws: WebSocketClient, event: Event): void;\r\n  onClose(ws: WebSocketClient, event: CloseEvent, wasConnected: boolean): void;\r\n  onError(ws: WebSocketClient, event: Event, wasConnected: boolean): void;\r\n  onMessage(ws: WebSocketClient, message: string): void;\r\n  onStateChanged(\r\n    ws: WebSocketClient,\r\n    newState: WebSocketState,\r\n    oldState: WebSocketState\r\n  ): void;\r\n  onSendMessage(ws: WebSocketClient, e: string): void;\r\n}\r\n\r\nexport interface WebSocketClientOptions {\r\n  host: string;\r\n  port: number;\r\n  useSSL?: boolean;\r\n  reconnectInterval?: number;\r\n  log?: Logger;\r\n}\r\n\r\nexport enum WebSocketState {\r\n  DISCONNECTED = \"DISCONNECTED\",\r\n  CONNECTING = \"CONNECTING\",\r\n  RECONNECTING = \"RECONNECTING\",\r\n  CONNECTED = \"CONNECTED\"\r\n}\r\n\r\nexport default class WebSocketClient {\r\n  private connectionState: WebSocketState = WebSocketState.DISCONNECTED;\r\n  private listeners: WebSocketClientListener[] = [];\r\n  private ws: WebSocket;\r\n  private readonly options: Required<WebSocketClientOptions>;\r\n  private readonly log: Logger;\r\n  private wasConnected = false;\r\n\r\n  constructor(options: WebSocketClientOptions) {\r\n    this.options = {\r\n      useSSL: false,\r\n      log: dummyLogger,\r\n      reconnectInterval: 1000,\r\n      ...options\r\n    };\r\n    this.log = this.options.log;\r\n\r\n    const url = `${this.options.useSSL ? \"wss\" : \"ws\"}://${this.options.host}:${\r\n      this.options.port\r\n    }`;\r\n\r\n    this.ws = this.connect(url);\r\n  }\r\n\r\n  subscribe(listener: WebSocketClientListener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  unsubscribe(listener: WebSocketClientListener) {\r\n    this.listeners = this.listeners.filter(item => item !== listener);\r\n  }\r\n\r\n  get state() {\r\n    return this.connectionState;\r\n  }\r\n\r\n  send(message: string, addNewLine = true) {\r\n    // we can only send messages if we're connected\r\n    if (this.state !== WebSocketState.CONNECTED) {\r\n      this.log.warn(\r\n        `sending message \"${message}\" requested but web-socket is ${\r\n          this.connectionState\r\n        }`\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    // notify the listeners\r\n    this.listeners.forEach(listener => listener.onSendMessage(this, message));\r\n\r\n    // send the message\r\n    this.ws.send(`${message}${addNewLine ? \"\\n\" : \"\"}`);\r\n  }\r\n\r\n  private setState(newState: WebSocketState) {\r\n    // return if state has not changed\r\n    if (newState === this.connectionState) {\r\n      return;\r\n    }\r\n\r\n    const oldState = this.connectionState;\r\n\r\n    this.connectionState = newState;\r\n\r\n    // notify the listeners\r\n    this.listeners.forEach(listener =>\r\n      listener.onStateChanged(this, newState, oldState)\r\n    );\r\n  }\r\n\r\n  private connect(url: string): WebSocket {\r\n    this.log.info(`connecting to web-socket server at ${url}`);\r\n\r\n    // update state\r\n    this.setState(\r\n      this.wasConnected\r\n        ? WebSocketState.RECONNECTING\r\n        : WebSocketState.CONNECTING\r\n    );\r\n\r\n    // notify the listeners\r\n    this.listeners.forEach(listener =>\r\n      listener.onConnecting(this, this.wasConnected)\r\n    );\r\n\r\n    // attempt to open web-socket connection\r\n    this.ws = new WebSocket(url);\r\n\r\n    // handle open event\r\n    this.ws.onopen = event => {\r\n      this.log.info(\"established web-socket connection\");\r\n\r\n      this.wasConnected = true;\r\n\r\n      // update state\r\n      this.setState(WebSocketState.CONNECTED);\r\n\r\n      // notify the listeners\r\n      this.listeners.forEach(listener => listener.onOpen(this, event));\r\n    };\r\n\r\n    // handle close event\r\n    this.ws.onclose = event => {\r\n      const logDetails = `code: ${event.code}, reason: ${\r\n        event.reason\r\n      }, was clean: ${event.wasClean ? \"yes\" : \"no\"}`;\r\n\r\n      if (this.wasConnected) {\r\n        this.log.warn(`connection to web-socket was lost (${logDetails})`);\r\n      } else {\r\n        this.log.warn(`connecting to web-socket failed (${logDetails})`);\r\n      }\r\n\r\n      // update state\r\n      this.setState(WebSocketState.DISCONNECTED);\r\n\r\n      // attempt to reconnect\r\n      setTimeout(() => {\r\n        this.ws = this.connect(url);\r\n      }, this.options.reconnectInterval);\r\n\r\n      // notify the listeners\r\n      this.listeners.forEach(listener =>\r\n        listener.onClose(this, event, this.wasConnected)\r\n      );\r\n    };\r\n\r\n    // handle error event\r\n    this.ws.onerror = event => {\r\n      this.log.warn(\"got web-socket error\");\r\n\r\n      // notify the listeners\r\n      this.listeners.forEach(listener =>\r\n        listener.onError(this, event, this.wasConnected)\r\n      );\r\n    };\r\n\r\n    // handle message event\r\n    this.ws.onmessage = event => {\r\n      // notify the listeners\r\n      this.listeners.forEach(listener => listener.onMessage(this, event.data));\r\n    };\r\n\r\n    return this.ws;\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface LogEntry {\r\n  id: string;\r\n  time: Date;\r\n  message: string;\r\n}\r\n\r\nexport interface LogState {\r\n  entries: LogEntry[];\r\n}\r\n\r\nexport const MAX_LOG_ENTRY_COUNT = 200;\r\n\r\nexport default class LogContainer extends Container<LogState> {\r\n  readonly state: LogState = {\r\n    entries: []\r\n  };\r\n\r\n  private lastId = 0;\r\n\r\n  addEntry(message: string, avoidDuplicate = true) {\r\n    // update state (use the callback syntax not to miss any updates if called in series)\r\n    this.setState(previousState => {\r\n      const lastEntryMessage =\r\n        this.state.entries.length > 0\r\n          ? this.state.entries[this.state.entries.length - 1]\r\n          : null;\r\n\r\n      // skip the message if requested not to add the same message twice in a row\r\n      if (\r\n        lastEntryMessage !== null &&\r\n        message === lastEntryMessage.message &&\r\n        avoidDuplicate\r\n      ) {\r\n        // update the last entry time\r\n        const updatedEntries: LogEntry[] = [\r\n          ...previousState.entries.slice(0, this.state.entries.length - 1), // remove last\r\n          {\r\n            ...lastEntryMessage,\r\n            time: new Date()\r\n          }\r\n        ];\r\n\r\n        return {\r\n          entries: updatedEntries\r\n        };\r\n      }\r\n\r\n      // appends the log entry\r\n      const entries: LogEntry[] = [\r\n        ...previousState.entries,\r\n        {\r\n          id: (this.lastId++).toString(),\r\n          time: new Date(),\r\n          message\r\n        }\r\n      ];\r\n\r\n      // limit the number of entries\r\n      while (entries.length > MAX_LOG_ENTRY_COUNT) {\r\n        entries.shift();\r\n      }\r\n\r\n      return {\r\n        entries\r\n      };\r\n    }).catch(error => console.error(error));\r\n  }\r\n\r\n  clear() {\r\n    this.setState({\r\n      entries: []\r\n    }).catch(error => console.error(error));\r\n  }\r\n}\r\n","import { WebSocketClientOptions } from \"./lib/web-socket-client/index\";\r\nimport { TrackedVehicleOptions } from \"./lib/web-socket-client/TrackedVehicleKinematics\";\r\n\r\nexport interface RulesConfig {\r\n  battery: {\r\n    low: number;\r\n    critical: number;\r\n  };\r\n}\r\n\r\nexport interface Config {\r\n  webSocket: WebSocketClientOptions;\r\n  rules: RulesConfig;\r\n  vehicle: TrackedVehicleOptions;\r\n}\r\n\r\nconst config: Config = {\r\n  webSocket: {\r\n    // allow overriding web-socket options via local storage\r\n    host:\r\n      localStorage.webSocketHost !== undefined\r\n        ? localStorage.webSocketHost\r\n        : \"127.0.0.1\",\r\n    port:\r\n      localStorage.webSocketPort !== undefined\r\n        ? parseInt(localStorage.webSocketPort, 10)\r\n        : 8000,\r\n    useSSL: false,\r\n    reconnectInterval: 3000\r\n  },\r\n  rules: {\r\n    battery: {\r\n      low: 15.0,\r\n      critical: 13.5\r\n    }\r\n  },\r\n  vehicle: {\r\n    trackWidth: 0.15, // meters\r\n    maxSpeed: 1, // meters per second\r\n    wheelDiameter: 0.039, // meters\r\n    encoderCountsPerRotation: 20, // encoder pulse count per revolution\r\n    gearboxRatio: 25, // 25/1 gearbox ratio\r\n    speedUpdateInterval: 50 // 20Hz\r\n  }\r\n};\r\n\r\nexport default config;\r\n","import { Container } from \"unstated\";\r\n\r\nimport config from \"../config\";\r\nimport { WebSocketState } from \"../lib/web-socket-client/index\";\r\n\r\nexport enum SerialType {\r\n  USB = \"usb\",\r\n  BLUETOOTH = \"bluetooth\"\r\n}\r\n\r\nexport enum SerialState {\r\n  CONNECTING = \"CONNECTING\",\r\n  CONNECTED = \"CONNECTED\",\r\n  DISCONNECTED = \"DISCONNECTED\",\r\n  NOT_SUPPORTED = \"NOT_SUPPORTED\",\r\n  DEVICE_NOT_FOUND = \"DEVICE_NOT_FOUND\",\r\n  DISABLED = \"DISABLED\"\r\n}\r\n\r\nexport interface Serial {\r\n  type: SerialType;\r\n  state: SerialState;\r\n  deviceName?: string;\r\n}\r\n\r\nexport type SerialsMap = { [type in keyof typeof SerialType]: Serial };\r\n\r\nexport interface StatusState {\r\n  readonly webSocketState: WebSocketState;\r\n  readonly serials: SerialsMap;\r\n  readonly batteryVoltage?: number;\r\n}\r\n\r\nexport enum BatteryState {\r\n  UNKNOWN = \"UNKNOWN\",\r\n  FULL = \"FULL\",\r\n  LOW = \"LOW\",\r\n  CRITICAL = \"CRITICAL\"\r\n}\r\n\r\nexport default class StatusContainer extends Container<StatusState> {\r\n  // set initial state\r\n  readonly state: StatusState = {\r\n    serials: {\r\n      BLUETOOTH: {\r\n        type: SerialType.BLUETOOTH,\r\n        state: SerialState.DISCONNECTED,\r\n        deviceName: undefined\r\n      },\r\n      USB: {\r\n        type: SerialType.USB,\r\n        state: SerialState.DISCONNECTED,\r\n        deviceName: undefined\r\n      }\r\n    },\r\n    webSocketState: WebSocketState.DISCONNECTED\r\n  };\r\n\r\n  setSerialState(type: SerialType, state: SerialState, deviceName?: string) {\r\n    const typeKey = Object.keys(SerialType).find(\r\n      typeName => SerialType[typeName as keyof typeof SerialType] === type\r\n    ) as keyof typeof SerialType;\r\n    const serials = this.state.serials;\r\n\r\n    // update given serial state and status\r\n    serials[typeKey].state = state;\r\n    serials[typeKey].deviceName = deviceName;\r\n\r\n    // update serial state\r\n    void this.setState({\r\n      serials\r\n    });\r\n  }\r\n\r\n  setWebSocketState(newState: WebSocketState) {\r\n    void this.setState({\r\n      webSocketState: newState\r\n    });\r\n  }\r\n\r\n  setBatteryVoltage(batteryVoltage: number | undefined) {\r\n    void this.setState({\r\n      batteryVoltage\r\n    });\r\n  }\r\n\r\n  getConnectedSerial(): Serial | undefined {\r\n    const serialNames = Object.keys(\r\n      this.state.serials\r\n    ) as (keyof typeof SerialType)[];\r\n    const connectedSerial = serialNames\r\n      .map(serialName => this.state.serials[serialName])\r\n      .find(serial => serial.state === SerialState.CONNECTED);\r\n\r\n    return connectedSerial;\r\n  }\r\n\r\n  get batteryState(): BatteryState {\r\n    const voltage = this.state.batteryVoltage;\r\n\r\n    if (voltage === undefined) {\r\n      return BatteryState.UNKNOWN;\r\n    }\r\n\r\n    if (voltage <= config.rules.battery.critical) {\r\n      return BatteryState.CRITICAL;\r\n    } else if (voltage <= config.rules.battery.low) {\r\n      return BatteryState.LOW;\r\n    }\r\n\r\n    return BatteryState.FULL;\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport LogContainer from \"../../containers/LogContainer\";\r\nimport StatusContainer, {\r\n  SerialState,\r\n  SerialType\r\n} from \"../../containers/StatusContainer\";\r\nimport { WebSocketState } from \"../../lib/web-socket-client/index\";\r\nimport webSocketClient from \"../../services/webSocketClient\";\r\n\r\nexport interface ContainerMap {\r\n  logContainer: LogContainer;\r\n  statusContainer: StatusContainer;\r\n}\r\n\r\nexport enum WebSocketCommand {\r\n  SERIAL = \"serial\",\r\n  GET_VOLTAGE = \"get-voltage\"\r\n}\r\n\r\nexport type WebSocketCommandHandlerFn = (\r\n  args: string[],\r\n  containers: ContainerMap\r\n) => void;\r\n\r\nexport interface WebSocketCommandHandlersMap {\r\n  [x: string]: WebSocketCommandHandlerFn | undefined;\r\n}\r\n\r\nconst REQUEST_BATTERY_VOLTAGE_INTERVAL = 60 * 1000; // once per minute\r\n\r\n// runtime info\r\nlet isInitialized = false;\r\nlet requestBatteryVoltageInterval: number | null = null;\r\n\r\n// command handlers map\r\nconst webSocketCommandHandlers: WebSocketCommandHandlersMap = {\r\n  [WebSocketCommand.SERIAL]: handleWebSocketSerialCommand,\r\n  [WebSocketCommand.GET_VOLTAGE]: handleWebSocketGetVoltageCommand\r\n\r\n  // TODO: handle \"e\"\r\n  // TODO: handle \"set-speed\"\r\n  // TODO: handle \"ip\"\r\n};\r\n\r\n// glue component, connects external data to containers, does not render anything\r\nconst Glue: React.SFC<{}> = () => (\r\n  <Subscribe to={[LogContainer, StatusContainer]}>\r\n    {(logContainer: LogContainer, statusContainer: StatusContainer) => {\r\n      // return if already set up\r\n      if (isInitialized) {\r\n        return null;\r\n      }\r\n\r\n      // set initial state\r\n      statusContainer.setWebSocketState(webSocketClient.state);\r\n\r\n      // subscribe to web-socket events\r\n      webSocketClient.subscribe({\r\n        onConnecting: (_ws, _wasConnected) => {\r\n          logContainer.addEntry(\"web-socket connecting..\");\r\n        },\r\n        onOpen: (_ws, _event) => {\r\n          logContainer.addEntry(\"web-socket connection established\");\r\n        },\r\n        onClose: (_ws, _event, wasConnected) => {\r\n          if (wasConnected) {\r\n            logContainer.addEntry(\"web-socket connection was lost\");\r\n          } else {\r\n            logContainer.addEntry(\"establishing web-socket connection failed\");\r\n          }\r\n        },\r\n        onError: (_ws, _event, _wasConnected) => {\r\n          // not handled\r\n        },\r\n        onMessage: (_ws, message) => {\r\n          // handle the message\r\n          handleWebSocketMessage(message, { logContainer, statusContainer });\r\n        },\r\n        onStateChanged: (_ws, newState, _oldState) => {\r\n          statusContainer.setWebSocketState(newState);\r\n\r\n          // also reset other statuses if web-socket connection is lost\r\n          if (newState === WebSocketState.DISCONNECTED) {\r\n            statusContainer.setSerialState(\r\n              SerialType.BLUETOOTH,\r\n              SerialState.DISCONNECTED\r\n            );\r\n            statusContainer.setSerialState(\r\n              SerialType.USB,\r\n              SerialState.DISCONNECTED\r\n            );\r\n            statusContainer.setBatteryVoltage(undefined);\r\n          }\r\n        },\r\n        onSendMessage: (_ws, message) => {\r\n          logContainer.addEntry(`> ${message}`);\r\n        }\r\n      });\r\n\r\n      // don't run this logic again\r\n      isInitialized = true;\r\n\r\n      // don't render anything\r\n      return null;\r\n    }}\r\n  </Subscribe>\r\n);\r\n\r\n// handles web-socket messages\r\nfunction handleWebSocketMessage(message: string, containers: ContainerMap) {\r\n  // ignore empty messages\r\n  if (message.length === 0) {\r\n    return;\r\n  }\r\n\r\n  // log the message\r\n  containers.logContainer.addEntry(`< ${message}`);\r\n\r\n  // parse message\r\n  const [name, ...args] = message.split(\":\");\r\n\r\n  handleWebSocketCommand(name, args, containers);\r\n}\r\n\r\n// handles parsed web-socket commands\r\nfunction handleWebSocketCommand(\r\n  name: string,\r\n  args: string[],\r\n  containers: ContainerMap\r\n) {\r\n  const handler = webSocketCommandHandlers[name];\r\n\r\n  // check whether the handler exists\r\n  if (handler === undefined) {\r\n    console.warn(`missing web-socket command handler for \"${name}\"`);\r\n\r\n    return;\r\n  }\r\n\r\n  // call the handler\r\n  handler(args, containers);\r\n}\r\n\r\nfunction handleWebSocketSerialCommand(\r\n  args: string[],\r\n  containers: ContainerMap\r\n) {\r\n  // extract serial info\r\n  const serialType = args[0] as SerialType;\r\n  const serialState = args[1] as SerialState;\r\n  const serialDeviceName = typeof args[2] === \"string\" ? args[2] : undefined;\r\n\r\n  // update serial state\r\n  containers.statusContainer.setSerialState(\r\n    serialType,\r\n    serialState,\r\n    serialDeviceName\r\n  );\r\n\r\n  const connectedSerial = containers.statusContainer.getConnectedSerial();\r\n\r\n  // ask for some initial state info once a serial connection is established\r\n  if (connectedSerial !== undefined) {\r\n    // request current voltage\r\n    requestVoltage();\r\n\r\n    // also setup an interval to ask the voltage level periodically\r\n    requestBatteryVoltageInterval = window.setInterval(() => {\r\n      requestVoltage();\r\n    }, REQUEST_BATTERY_VOLTAGE_INTERVAL);\r\n  } else {\r\n    // clear the battery voltage interval if exists\r\n    if (requestBatteryVoltageInterval !== null) {\r\n      window.clearInterval(requestBatteryVoltageInterval);\r\n\r\n      requestBatteryVoltageInterval = null;\r\n    }\r\n\r\n    // no serial connection so we can't be sure of battery voltage\r\n    containers.statusContainer.setBatteryVoltage(undefined);\r\n  }\r\n}\r\n\r\nfunction handleWebSocketGetVoltageCommand(\r\n  args: string[],\r\n  containers: ContainerMap\r\n) {\r\n  const voltage = parseFloat(args[0]);\r\n\r\n  containers.statusContainer.setBatteryVoltage(voltage);\r\n}\r\n\r\nfunction requestVoltage() {\r\n  webSocketClient.send(\"get-voltage\");\r\n}\r\n\r\nexport default Glue;\r\n","import config from \"../config\";\r\nimport WebSocketClient from \"../lib/web-socket-client\";\r\n\r\nconst webSocketClient = new WebSocketClient({\r\n  ...config.webSocket,\r\n  log: console\r\n});\r\n\r\nexport default webSocketClient;\r\n","import * as React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport \"./MainMenu.scss\";\r\n\r\nconst MainMenu: React.SFC<{}> = () => (\r\n  <div className=\"main-menu\">\r\n    <ul className=\"main-menu__nav\">\r\n      <li>\r\n        <NavLink to=\"/status\" activeClassName=\"active\">\r\n          <div className=\"main-menu__nav__icon\">\r\n            <i className=\"icon icon__status\" />\r\n          </div>\r\n          <div className=\"main-menu__nav__text\">\r\n            <span>status</span>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/map\" activeClassName=\"active\">\r\n          <div className=\"main-menu__nav__icon\">\r\n            <i className=\"icon icon__map\" />\r\n          </div>\r\n          <div className=\"main-menu__nav__text\">\r\n            <span>map</span>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/ai\" activeClassName=\"active\">\r\n          <div className=\"main-menu__nav__icon\">\r\n            <i className=\"icon icon__bot\" />\r\n          </div>\r\n          <div className=\"main-menu__nav__text\">\r\n            <span>bot</span>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/remote\" activeClassName=\"active\">\r\n          <div className=\"main-menu__nav__icon\">\r\n            <i className=\"icon icon__remote\" />\r\n          </div>\r\n          <div className=\"main-menu__nav__text\">\r\n            <span>remote</span>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/settings\" activeClassName=\"active\">\r\n          <div className=\"main-menu__nav__icon\">\r\n            <i className=\"icon icon__settings\" />\r\n          </div>\r\n          <div className=\"main-menu__nav__text\">\r\n            <span>settings</span>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default MainMenu;\r\n","import * as React from \"react\";\r\n\r\nconst BotView: React.SFC<{}> = () => <div className=\"view view--text bot-view\">Bot</div>;\r\n\r\nexport default BotView;\r\n","import * as React from \"react\";\r\n\r\nconst MapView: React.SFC<{}> = () => <div className=\"view view--text map-view\">Map</div>;\r\n\r\nexport default MapView;\r\n","import * as nipplejs from \"nipplejs\";\r\nimport * as React from \"react\";\r\n\r\nexport interface JoystickProps {\r\n  name: string;\r\n  config?: nipplejs.JoystickOptions;\r\n  bind?: string;\r\n  onEvent?(\r\n    name: string,\r\n    event: nipplejs.JoystickEvent,\r\n    info: nipplejs.JoystickInstance\r\n  ): void;\r\n}\r\n\r\nexport default class Joystick extends React.Component<JoystickProps> {\r\n  private readonly ref = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidMount() {\r\n    const el = this.ref.current;\r\n\r\n    // return if element could not be found\r\n    if (!el) {\r\n      console.warn(\"grid item dom node not found\");\r\n\r\n      return;\r\n    }\r\n\r\n    // create the nipple manager\r\n    const manager = nipplejs.create({\r\n      zone: el,\r\n      color: \"#FFF\",\r\n      size: 200,\r\n      position: {\r\n        left: \"50%\",\r\n        top: \"50%\"\r\n      },\r\n      mode: \"static\"\r\n    });\r\n\r\n    const { onEvent } = this.props;\r\n\r\n    // only listen for events if even listener has been added\r\n    if (typeof onEvent === \"function\") {\r\n      const bind = this.props.bind\r\n        ? this.props.bind\r\n        : \"start move end dir plain\";\r\n\r\n      manager\r\n        .on(bind, (event, nipple) => {\r\n          onEvent(this.props.name, event, nipple);\r\n        })\r\n        .on(\"removed\", (_event, nipple) => {\r\n          nipple.off(bind);\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"joystick\" ref={this.ref} />;\r\n  }\r\n}\r\n","export interface TrackedVehicleOptions {\r\n  trackWidth: number;\r\n  maxSpeed: number;\r\n  wheelDiameter: number;\r\n  encoderCountsPerRotation: number;\r\n  gearboxRatio: number;\r\n  speedUpdateInterval: number;\r\n}\r\n\r\nexport interface MotorSpeeds {\r\n  left: number;\r\n  right: number;\r\n}\r\n\r\n// https://pdfs.semanticscholar.org/29ae/0bc974737b58afd63b6edb8d0837a3383321.pdf\r\nexport default class TrackedVehicleKinematics {\r\n  constructor(private readonly options: TrackedVehicleOptions) {}\r\n\r\n  /**\r\n   * Returns motor speeds in m/s for requested forward speed at given rotational speed.\r\n   *\r\n   * @param speed Speed in m/s\r\n   * @param omega Rotational speed in rad/s\r\n   */\r\n  calculateMotorSpeeds(speed: number, omega: number): MotorSpeeds {\r\n    // TODO: calculate actual kinematics\r\n    return this.limit(\r\n      {\r\n        left: speed + omega,\r\n        right: speed - omega\r\n      },\r\n      this.options.maxSpeed\r\n    );\r\n  }\r\n\r\n  getSpeedEncoderCount(speed: number) {\r\n    const circumference = this.options.wheelDiameter * Math.PI;\r\n    const rps = speed / circumference;\r\n    const actualEncoderCountPerRevolution =\r\n      this.options.encoderCountsPerRotation * this.options.gearboxRatio;\r\n    const targetEncoderCountPerSecond = rps * actualEncoderCountPerRevolution;\r\n\r\n    return Math.floor(targetEncoderCountPerSecond);\r\n  }\r\n\r\n  limit(speeds: MotorSpeeds, maxSpeed: number): MotorSpeeds {\r\n    const maxRequestedSpeedMagnitude = Math.max(\r\n      Math.abs(speeds.left),\r\n      Math.abs(speeds.right)\r\n    );\r\n    const normalizationFactor = Math.min(\r\n      maxSpeed / maxRequestedSpeedMagnitude,\r\n      1.0\r\n    );\r\n\r\n    // console.log(\"normalize\", {\r\n    //   maxRequestedSpeedMagnitude,\r\n    //   normalizationFactor,\r\n    //   speeds,\r\n    //   maxSpeed,\r\n    // });\r\n\r\n    return {\r\n      left: speeds.left * normalizationFactor,\r\n      right: speeds.right * normalizationFactor\r\n    };\r\n  }\r\n\r\n  getEncoderSpeeds(speeds: MotorSpeeds): MotorSpeeds {\r\n    return {\r\n      left: this.getSpeedEncoderCount(speeds.left),\r\n      right: this.getSpeedEncoderCount(speeds.right)\r\n    };\r\n  }\r\n}\r\n","import throttle from \"lodash.throttle\";\r\nimport { dummyLogger, Logger } from \"ts-log\";\r\n\r\nimport WebSocketClient from \"./index\";\r\nimport TrackedVehicleKinematics, {\r\n  TrackedVehicleOptions\r\n} from \"./TrackedVehicleKinematics\";\r\n\r\nexport interface RemoteControllerOptions {\r\n  webSocketClient: WebSocketClient;\r\n  vehicle: TrackedVehicleOptions;\r\n  log?: Logger;\r\n}\r\n\r\nexport default class RemoteController {\r\n  private readonly options: Required<RemoteControllerOptions>;\r\n  private readonly kinematics: TrackedVehicleKinematics;\r\n  private speed = 0;\r\n  private omega = 0;\r\n  private readonly scheduleUpdateMotorSpeeds: () => void;\r\n\r\n  constructor(options: RemoteControllerOptions) {\r\n    this.options = {\r\n      log: dummyLogger,\r\n      ...options\r\n    };\r\n    this.kinematics = new TrackedVehicleKinematics(this.options.vehicle);\r\n\r\n    this.scheduleUpdateMotorSpeeds = throttle(\r\n      () => this.updateMotorSpeeds(),\r\n      this.options.vehicle.speedUpdateInterval\r\n    );\r\n  }\r\n\r\n  setSpeed(speed: number) {\r\n    this.speed = speed;\r\n\r\n    this.scheduleUpdateMotorSpeeds();\r\n  }\r\n\r\n  setOmega(omega: number) {\r\n    this.omega = omega;\r\n\r\n    this.scheduleUpdateMotorSpeeds();\r\n  }\r\n\r\n  private updateMotorSpeeds() {\r\n    const motorSpeeds = this.kinematics.calculateMotorSpeeds(\r\n      this.speed,\r\n      this.omega\r\n    );\r\n    const encoderSpeeds = this.kinematics.getEncoderSpeeds(motorSpeeds);\r\n\r\n    // TODO: only send if sufficiently different from last sent values\r\n    this.options.webSocketClient.send(\r\n      `set-speed:${encoderSpeeds.left}:${encoderSpeeds.right}`\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport Joystick from \"../../components/joystick/Joystick\";\r\nimport { JoystickEvent, JoystickEventName, JoystickInstance } from \"nipplejs\";\r\nimport config from \"../../config\";\r\nimport RemoteController from \"../../lib/web-socket-client/RemoteController\";\r\nimport webSocketClient from \"../../services/webSocketClient\";\r\n\r\nimport \"./RemoteView.scss\";\r\n\r\n// TODO: show track speeds on edges (target and real)\r\nexport default class RemoteView extends React.Component {\r\n  private readonly remoteController = new RemoteController({\r\n    webSocketClient,\r\n    log: console,\r\n    vehicle: config.vehicle\r\n  });\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"view view--grid remote-view\">\r\n        <div className=\"joystick-grid\">\r\n          <div className=\"joystick-grid__item\">\r\n            <Joystick\r\n              name=\"speed\"\r\n              onEvent={(name, event, info) =>\r\n                this.onJoystickEvent(name, event, info)\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"joystick-grid__item\">\r\n            <Joystick\r\n              name=\"omega\"\r\n              onEvent={(name, event, info) =>\r\n                this.onJoystickEvent(name, event, info)\r\n              }\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private onJoystickEvent(\r\n    name: string,\r\n    event: JoystickEvent,\r\n    info: JoystickInstance\r\n  ) {\r\n    const interestingEvents: JoystickEventName[] = [\"move\", \"end\"];\r\n\r\n    if (interestingEvents.indexOf(event.type) === -1) {\r\n      return;\r\n    }\r\n\r\n    const isMoveEvent = event.type === \"move\";\r\n\r\n    const xPos = isMoveEvent ? Math.sin(info.angle.radian) * info.distance : 0;\r\n    const yPos = isMoveEvent ? Math.cos(info.angle.radian) * info.distance : 0;\r\n\r\n    // console.log(`${name} x: ${xPos}, y: ${yPos}, distance: ${info.distance}`, this.remoteController);\r\n\r\n    switch (name) {\r\n      case \"speed\":\r\n        this.remoteController.setSpeed((yPos * -1) / 100.0);\r\n        break;\r\n\r\n      case \"omega\":\r\n        this.remoteController.setOmega(xPos / 100.0);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(`Got unexpected joystick \"${name}\" info`);\r\n    }\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nconst SettingsView: React.SFC<{}> = () => <div className=\"view view--text settings-view\">\r\n  <button onClick={() => window.location.href = \"http://kallaspriit\"}>Open http://kallaspriit</button>\r\n</div>;\r\n\r\nexport default SettingsView;\r\n","import classNames from \"classnames\";\r\nimport * as React from \"react\";\r\n\r\nimport \"./Grid.scss\";\r\n\r\nexport type GridProps = React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\r\nexport type GridItemProps = React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement> & {\r\n  scrollToBottom?: boolean;\r\n};\r\n\r\nexport const Grid: React.SFC<GridProps> = ({ children, className }) => (\r\n  <div className={classNames(\"grid\", className)}>{children}</div>\r\n);\r\n\r\n// TODO: scroll to bottom on first render\r\nexport class GridItem extends React.Component<GridItemProps> {\r\n  private readonly ref = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidUpdate() {\r\n    // return if scrolling to bottom is not requested\r\n    if (this.props.scrollToBottom !== true) {\r\n      return;\r\n    }\r\n\r\n    // get the dom node from the reference\r\n    const el = this.ref.current;\r\n\r\n    // return if element could not be found\r\n    if (!el) {\r\n      console.warn(\"grid item dom node not found\");\r\n\r\n      return;\r\n    }\r\n\r\n    // check whether we're aready near the bottom\r\n    const isNearBottom = el.scrollHeight - el.clientHeight <= el.scrollTop + 50;\r\n\r\n    // only force the scroll if near bottom\r\n    if (isNearBottom) {\r\n      el.scrollTop = el.scrollHeight - el.clientHeight;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div ref={this.ref} className={classNames(\"grid__item\", this.props.className)}>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import classNames from \"classnames\";\r\nimport * as React from \"react\";\r\n\r\nexport type IconProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLElement>,\r\n  HTMLElement\r\n> & {\r\n  name: string;\r\n  width?: string | number;\r\n  height?: string | number;\r\n};\r\n\r\nconst Icon: React.SFC<IconProps> = ({\r\n  children,\r\n  name,\r\n  width,\r\n  height,\r\n  className\r\n}) => (\r\n  <i\r\n    className={classNames(\"icon\", `icon__${name}`, className)}\r\n    style={getStyle(width, height)}\r\n  >\r\n    {children}\r\n  </i>\r\n);\r\n\r\nfunction getStyle(\r\n  width: string | number | undefined,\r\n  height: string | number | undefined\r\n): React.CSSProperties {\r\n  const style: React.CSSProperties = {};\r\n\r\n  if (typeof width === \"string\") {\r\n    style.width = `${width}${\r\n      parseFloat(width).toString() === width ? \"px\" : \"\"\r\n    }`;\r\n  } else if (typeof width === \"number\") {\r\n    style.width = `${width}px`;\r\n  }\r\n\r\n  if (typeof height === \"string\") {\r\n    style.height = `${height}${\r\n      parseFloat(height).toString() === height ? \"px\" : \"\"\r\n    }`;\r\n  } else if (typeof height === \"number\") {\r\n    style.height = `${height}px`;\r\n  }\r\n\r\n  return style;\r\n}\r\n\r\nexport default Icon;\r\n","export default function pad(\r\n  data: string | number,\r\n  length: number,\r\n  padder = \" \"\r\n): string {\r\n  const str = typeof data === \"string\" ? data : data.toString();\r\n\r\n  // return as is if already long enough\r\n  if (str.length >= length) {\r\n    return str;\r\n  }\r\n\r\n  const missingLength = length - str.length;\r\n\r\n  return `${new Array(missingLength + 1).join(padder)}${str}`;\r\n}\r\n","import classNames from \"classnames\";\r\nimport * as React from \"react\";\r\nimport titleCase from \"title-case\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { Grid, GridItem } from \"../../components/grid/Grid\";\r\nimport Icon from \"../../components/icon/Icon\";\r\nimport LogContainer from \"../../containers/LogContainer\";\r\nimport StatusContainer, {\r\n  BatteryState,\r\n  SerialType\r\n} from \"../../containers/StatusContainer\";\r\nimport { WebSocketState } from \"../../lib/web-socket-client/index\";\r\nimport assertUnreachable from \"../../services/assertUnreachable\";\r\nimport formatTime from \"../../services/formatTime\";\r\n\r\nimport \"./StatusView.scss\";\r\n\r\n// TODO: add motor controller, http server, IMU, heartbeat\r\nconst StatusView: React.SFC = () => (\r\n  <Subscribe to={[LogContainer, StatusContainer]}>\r\n    {(logContainer: LogContainer, statusContainer: StatusContainer) => {\r\n      const connectedSerial = statusContainer.getConnectedSerial();\r\n\r\n      return (\r\n        <div className=\"view view--grid status-view\">\r\n          <Grid className=\"status-grid\">\r\n            <GridItem\r\n              className={classNames(\r\n                \"grid-status\",\r\n                connectedSerial !== undefined ? \"bg--good\" : \"bg--bad\"\r\n              )}\r\n            >\r\n              <div className=\"grid__icon\">\r\n                <i\r\n                  className={\r\n                    connectedSerial &&\r\n                    connectedSerial.type === SerialType.BLUETOOTH\r\n                      ? \"icon icon__bluetooth\"\r\n                      : \"icon icon__serial\"\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"grid__text\">\r\n                <div className=\"grid__text--primary\">\r\n                  {connectedSerial ? connectedSerial.type : \"Serial\"}\r\n                </div>\r\n                <div className=\"grid__text--secondary\">\r\n                  {titleCase(\r\n                    connectedSerial ? connectedSerial.state : \"Disconnected\"\r\n                  )}\r\n                  {connectedSerial && connectedSerial.deviceName\r\n                    ? `: ${connectedSerial.deviceName}`\r\n                    : \"\"}\r\n                </div>\r\n              </div>\r\n            </GridItem>\r\n            <GridItem\r\n              className={classNames(\r\n                \"grid-status\",\r\n                statusContainer.state.webSocketState ===\r\n                  WebSocketState.CONNECTED\r\n                  ? \"bg--good\"\r\n                  : \"bg--bad\"\r\n              )}\r\n            >\r\n              <div className=\"grid__icon\">\r\n                <i className=\"icon icon__web-socket\" />\r\n              </div>\r\n              <div className=\"grid__text\">\r\n                <div className=\"grid__text--primary\">Web Socket</div>\r\n                <div className=\"grid__text--secondary\">\r\n                  {titleCase(statusContainer.state.webSocketState)}\r\n                </div>\r\n              </div>\r\n            </GridItem>\r\n            <GridItem\r\n              className={classNames(\r\n                \"grid-status\",\r\n                getBatteryLevelClass(statusContainer.batteryState)\r\n              )}\r\n            >\r\n              <div className=\"grid__icon\">\r\n                <i className=\"icon icon__battery\" />\r\n              </div>\r\n              <div className=\"grid__text\">\r\n                <div className=\"grid__text--primary\">Battery</div>\r\n                <div className=\"grid__text--secondary\">\r\n                  {statusContainer.state.batteryVoltage\r\n                    ? `${statusContainer.state.batteryVoltage.toFixed(1)}V`\r\n                    : \"Unknown\"}\r\n                </div>\r\n              </div>\r\n            </GridItem>\r\n            <GridItem className=\"log\" scrollToBottom={true}>\r\n              {logContainer.state.entries.map(entry => (\r\n                <div className=\"log__entry\" key={entry.id}>\r\n                  <span className=\"log__entry__time\">\r\n                    {formatTime(entry.time)}\r\n                  </span>{\" \"}\r\n                  <span className=\"log__entry__message\">{entry.message}</span>\r\n                </div>\r\n              ))}\r\n            </GridItem>\r\n          </Grid>\r\n          <div\r\n            className=\"clear-log-button\"\r\n            onClick={() => logContainer.clear()}\r\n          >\r\n            <Icon name=\"clear\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    }}\r\n  </Subscribe>\r\n);\r\n\r\nfunction getBatteryLevelClass(batteryState: BatteryState): string {\r\n  switch (batteryState) {\r\n    case BatteryState.UNKNOWN:\r\n      return \"bg--warn\";\r\n\r\n    case BatteryState.FULL:\r\n      return \"bg--good\";\r\n\r\n    case BatteryState.LOW:\r\n      return \"bg--warn\";\r\n\r\n    case BatteryState.CRITICAL:\r\n      return \"bg--bad\";\r\n\r\n    default:\r\n      return assertUnreachable(batteryState, \"got unexpected battery state\");\r\n  }\r\n}\r\n\r\nexport default StatusView;\r\n","export default function assertUnreachable(\r\n  value: never,\r\n  message: string\r\n): never {\r\n  throw new Error(`${message} (${value})`);\r\n}\r\n","import pad from \"./pad\";\r\n\r\nexport default function formatTime(date: Date): string {\r\n  return (\r\n    `${pad(date.getHours(), 2, \"0\")}:` +\r\n    `${pad(date.getMinutes(), 2, \"0\")}:` +\r\n    `${pad(date.getSeconds(), 2, \"0\")}.` +\r\n    `${pad(date.getMilliseconds(), 3, \"0\")}`\r\n  );\r\n}\r\n","import * as React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch\n} from \"react-router-dom\";\nimport { Provider } from \"unstated\";\n\nimport Glue from \"./components/glue/Glue\";\nimport MainMenu from \"./components/main-menu/MainMenu\";\nimport BotView from \"./views/bot/BotView\";\nimport MapView from \"./views/map/MapView\";\nimport RemoteView from \"./views/remote/RemoteView\";\nimport SettingsView from \"./views/settings/SettingsView\";\nimport StatusView from \"./views/status/StatusView\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider>\n        <Glue />\n        <Router>\n          <div className=\"app\">\n            <Switch>\n              <Route path=\"/status\" component={StatusView} />\n              <Route path=\"/map\" component={MapView} />\n              <Route path=\"/remote\" component={RemoteView} />\n              <Route path=\"/ai\" component={BotView} />\n              <Route path=\"/settings\" component={SettingsView} />\n              <Route exact={true} path=\"/\">\n                <Redirect to=\"/status\" />\n              </Route>\n            </Switch>\n            <MainMenu />\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport \"reset-css\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\n"],"sourceRoot":""}