{"version":3,"sources":["lib/web-socket-client/index.ts","containers/LogContainer.ts","config.ts","containers/StatusContainer.ts","components/glue/Glue.tsx","services/webSocketClient.ts","components/main-menu/MainMenu.tsx","views/bot/BotView.tsx","views/map/MapView.tsx","components/joystick/Joystick.tsx","lib/web-socket-client/TrackedVehicleKinematics.ts","lib/web-socket-client/RemoteController.ts","views/remote/RemoteView.tsx","views/settings/SettingsView.tsx","components/grid/Grid.tsx","components/icon/Icon.tsx","services/pad.ts","views/status/StatusView.tsx","services/assertUnreachable.ts","services/formatTime.ts","App.tsx","index.tsx"],"names":["WebSocketState","_super","LogContainer","_this","apply","this","arguments","state","entries","lastId","tslib_es6","prototype","addEntry","message","avoidDuplicate","setState","previousState","lastEntryMessage","length","slice","concat","time","Date","id","toString","shift","catch","error","console","clear","unstated_es","src_config","webSocket","host","undefined","localStorage","webSocketHost","port","webSocketPort","parseInt","useSSL","reconnectInterval","rules","battery","low","critical","vehicle","trackWidth","maxSpeed","wheelDiameter","encoderCountsPerRotation","gearboxRatio","speedUpdateInterval","BluetoothState","BatteryState","WebSocketClient","options","connectionState","DISCONNECTED","listeners","wasConnected","log","src","url","ws","connect","subscribe","listener","push","unsubscribe","filter","item","Object","defineProperty","send","addNewLine","CONNECTED","forEach","onSendMessage","warn","newState","oldState","onStateChanged","info","RECONNECTING","CONNECTING","onConnecting","WebSocket","onopen","event","onOpen","onclose","logDetails","code","reason","wasClean","setTimeout","onClose","onerror","onError","onmessage","onMessage","data","WebSocketCommand","StatusContainer","bluetoothState","webSocketState","setBluetoothState","deviceName","bluetoothDeviceName","setWebSocketState","setBatteryVoltage","batteryVoltage","voltage","UNKNOWN","CRITICAL","LOW","FULL","services_webSocketClient","web_socket_client","isDone","requestBatteryVoltageInterval","webSocketCommandHandlers","Glue_a","BLUETOOTH","args","containers","window","setInterval","clearInterval","statusContainer","GET_VOLTAGE","parseFloat","glue_Glue","react","to","containers_LogContainer","containers_StatusContainer","logContainer","_ws","_wasConnected","_event","_a","split","name","handler","handleWebSocketCommand","handleWebSocketMessage","_oldState","main_menu_MainMenu","className","NavLink","activeClassName","bot_BotView","map_MapView","Joystick","ref","componentDidMount","el","current","manager","nipplejs","zone","color","size","position","left","top","mode","onEvent","props","bind_1","bind","on","nipple","off","render","TrackedVehicleKinematics","calculateMotorSpeeds","speed","omega","limit","right","getSpeedEncoderCount","targetEncoderCountPerSecond","Math","PI","floor","speeds","maxRequestedSpeedMagnitude","max","abs","normalizationFactor","min","getEncoderSpeeds","RemoteController","kinematics","web_socket_client_TrackedVehicleKinematics","scheduleUpdateMotorSpeeds","lodash_throttle_default","updateMotorSpeeds","setSpeed","setOmega","motorSpeeds","encoderSpeeds","webSocketClient","RemoteView","remoteController","web_socket_client_RemoteController","joystick_Joystick","onJoystickEvent","indexOf","type","isMoveEvent","xPos","sin","angle","radian","distance","yPos","cos","Error","settings_SettingsView","Grid_Grid","children","classnames","Grid_GridItem","GridItem","componentDidUpdate","scrollToBottom","scrollHeight","clientHeight","scrollTop","icon_Icon","width","height","style","getStyle","pad","padder","str","missingLength","Array","join","status_StatusView","change_case","batteryState","value","assertUnreachable","getBatteryLevelClass","toFixed","map","entry","key","date","getHours","getMinutes","getSeconds","getMilliseconds","onClick","src_App","App","BrowserRouter","Switch","Route","path","component","views_remote_RemoteView","exact","Redirect","react_dom","document","getElementById"],"mappings":"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","file":"static/js/main.19a7512c.chunk.js","sourcesContent":["import { dummyLogger, Logger } from \"ts-log\";\r\n\r\nexport interface WebSocketClientListener {\r\n  onConnecting(ws: WebSocketClient, wasConnected: boolean): void;\r\n  onOpen(ws: WebSocketClient, event: Event): void;\r\n  onClose(ws: WebSocketClient, event: CloseEvent, wasConnected: boolean): void;\r\n  onError(ws: WebSocketClient, event: Event, wasConnected: boolean): void;\r\n  onMessage(ws: WebSocketClient, message: string): void;\r\n  onStateChanged(\r\n    ws: WebSocketClient,\r\n    newState: WebSocketState,\r\n    oldState: WebSocketState\r\n  ): void;\r\n  onSendMessage(ws: WebSocketClient, e: string): void;\r\n}\r\n\r\nexport interface WebSocketClientOptions {\r\n  host: string;\r\n  port: number;\r\n  useSSL?: boolean;\r\n  reconnectInterval?: number;\r\n  log?: Logger;\r\n}\r\n\r\nexport enum WebSocketState {\r\n  DISCONNECTED = \"DISCONNECTED\",\r\n  CONNECTING = \"CONNECTING\",\r\n  RECONNECTING = \"RECONNECTING\",\r\n  CONNECTED = \"CONNECTED\"\r\n}\r\n\r\nexport default class WebSocketClient {\r\n  private connectionState: WebSocketState = WebSocketState.DISCONNECTED;\r\n  private listeners: WebSocketClientListener[] = [];\r\n  private ws: WebSocket;\r\n  private readonly options: Required<WebSocketClientOptions>;\r\n  private readonly log: Logger;\r\n  private wasConnected = false;\r\n\r\n  constructor(options: WebSocketClientOptions) {\r\n    this.options = {\r\n      useSSL: false,\r\n      log: dummyLogger,\r\n      reconnectInterval: 1000,\r\n      ...options\r\n    };\r\n    this.log = this.options.log;\r\n\r\n    const url = `${this.options.useSSL ? \"wss\" : \"ws\"}://${this.options.host}:${\r\n      this.options.port\r\n    }`;\r\n\r\n    this.ws = this.connect(url);\r\n  }\r\n\r\n  subscribe(listener: WebSocketClientListener) {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  unsubscribe(listener: WebSocketClientListener) {\r\n    this.listeners = this.listeners.filter(item => item !== listener);\r\n  }\r\n\r\n  get state() {\r\n    return this.connectionState;\r\n  }\r\n\r\n  send(message: string, addNewLine = true) {\r\n    // we can only send messages if we're connected\r\n    if (this.state !== WebSocketState.CONNECTED) {\r\n      this.log.warn(\r\n        `sending message \"${message}\" requested but web-socket is ${\r\n          this.connectionState\r\n        }`\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    // notify the listeners\r\n    this.listeners.forEach(listener => listener.onSendMessage(this, message));\r\n\r\n    // send the message\r\n    this.ws.send(`${message}${addNewLine ? \"\\n\" : \"\"}`);\r\n  }\r\n\r\n  private setState(newState: WebSocketState) {\r\n    // return if state has not changed\r\n    if (newState === this.connectionState) {\r\n      return;\r\n    }\r\n\r\n    const oldState = this.connectionState;\r\n\r\n    this.connectionState = newState;\r\n\r\n    // notify the listeners\r\n    this.listeners.forEach(listener =>\r\n      listener.onStateChanged(this, newState, oldState)\r\n    );\r\n  }\r\n\r\n  private connect(url: string): WebSocket {\r\n    this.log.info(`connecting to web-socket server at ${url}`);\r\n\r\n    // update state\r\n    this.setState(\r\n      this.wasConnected\r\n        ? WebSocketState.RECONNECTING\r\n        : WebSocketState.CONNECTING\r\n    );\r\n\r\n    // notify the listeners\r\n    this.listeners.forEach(listener =>\r\n      listener.onConnecting(this, this.wasConnected)\r\n    );\r\n\r\n    // attempt to open web-socket connection\r\n    this.ws = new WebSocket(url);\r\n\r\n    // handle open event\r\n    this.ws.onopen = event => {\r\n      this.log.info(\"established web-socket connection\");\r\n\r\n      this.wasConnected = true;\r\n\r\n      // update state\r\n      this.setState(WebSocketState.CONNECTED);\r\n\r\n      // notify the listeners\r\n      this.listeners.forEach(listener => listener.onOpen(this, event));\r\n    };\r\n\r\n    // handle close event\r\n    this.ws.onclose = event => {\r\n      const logDetails = `code: ${event.code}, reason: ${\r\n        event.reason\r\n      }, was clean: ${event.wasClean ? \"yes\" : \"no\"}`;\r\n\r\n      if (this.wasConnected) {\r\n        this.log.warn(`connection to web-socket was lost (${logDetails})`);\r\n      } else {\r\n        this.log.warn(`connecting to web-socket failed (${logDetails})`);\r\n      }\r\n\r\n      // update state\r\n      this.setState(WebSocketState.DISCONNECTED);\r\n\r\n      // attempt to reconnect\r\n      setTimeout(() => {\r\n        this.ws = this.connect(url);\r\n      }, this.options.reconnectInterval);\r\n\r\n      // notify the listeners\r\n      this.listeners.forEach(listener =>\r\n        listener.onClose(this, event, this.wasConnected)\r\n      );\r\n    };\r\n\r\n    // handle error event\r\n    this.ws.onerror = event => {\r\n      this.log.warn(\"got web-socket error\");\r\n\r\n      // notify the listeners\r\n      this.listeners.forEach(listener =>\r\n        listener.onError(this, event, this.wasConnected)\r\n      );\r\n    };\r\n\r\n    // handle message event\r\n    this.ws.onmessage = event => {\r\n      // notify the listeners\r\n      this.listeners.forEach(listener => listener.onMessage(this, event.data));\r\n    };\r\n\r\n    return this.ws;\r\n  }\r\n}\r\n","import { Container } from \"unstated\";\r\n\r\nexport interface LogEntry {\r\n  id: string;\r\n  time: Date;\r\n  message: string;\r\n}\r\n\r\nexport interface LogState {\r\n  entries: LogEntry[];\r\n}\r\n\r\nexport const MAX_LOG_ENTRY_COUNT = 200;\r\n\r\nexport default class LogContainer extends Container<LogState> {\r\n  readonly state: LogState = {\r\n    entries: []\r\n  };\r\n\r\n  private lastId = 0;\r\n\r\n  addEntry(message: string, avoidDuplicate = true) {\r\n    // update state (use the callback syntax not to miss any updates if called in series)\r\n    this.setState(previousState => {\r\n      const lastEntryMessage =\r\n        this.state.entries.length > 0\r\n          ? this.state.entries[this.state.entries.length - 1]\r\n          : null;\r\n\r\n      // skip the message if requested not to add the same message twice in a row\r\n      if (\r\n        lastEntryMessage !== null &&\r\n        message === lastEntryMessage.message &&\r\n        avoidDuplicate\r\n      ) {\r\n        // update the last entry time\r\n        const updatedEntries: LogEntry[] = [\r\n          ...previousState.entries.slice(0, this.state.entries.length - 1), // remove last\r\n          {\r\n            ...lastEntryMessage,\r\n            time: new Date()\r\n          }\r\n        ];\r\n\r\n        return {\r\n          entries: updatedEntries\r\n        };\r\n      }\r\n\r\n      // appends the log entry\r\n      const entries: LogEntry[] = [\r\n        ...previousState.entries,\r\n        {\r\n          id: (this.lastId++).toString(),\r\n          time: new Date(),\r\n          message\r\n        }\r\n      ];\r\n\r\n      // limit the number of entries\r\n      while (entries.length > MAX_LOG_ENTRY_COUNT) {\r\n        entries.shift();\r\n      }\r\n\r\n      return {\r\n        entries\r\n      };\r\n    }).catch(error => console.error(error));\r\n  }\r\n\r\n  clear() {\r\n    this.setState({\r\n      entries: []\r\n    }).catch(error => console.error(error));\r\n  }\r\n}\r\n","import { WebSocketClientOptions } from \"./lib/web-socket-client/index\";\r\nimport { TrackedVehicleOptions } from \"./lib/web-socket-client/TrackedVehicleKinematics\";\r\n\r\nexport interface RulesConfig {\r\n  battery: {\r\n    low: number;\r\n    critical: number;\r\n  };\r\n}\r\n\r\nexport interface Config {\r\n  webSocket: WebSocketClientOptions;\r\n  rules: RulesConfig;\r\n  vehicle: TrackedVehicleOptions;\r\n}\r\n\r\nconst config: Config = {\r\n  webSocket: {\r\n    // allow overriding web-socket options via local storage\r\n    host:\r\n      localStorage.webSocketHost !== undefined\r\n        ? localStorage.webSocketHost\r\n        : \"127.0.0.1\",\r\n    port:\r\n      localStorage.webSocketPort !== undefined\r\n        ? parseInt(localStorage.webSocketPort, 10)\r\n        : 8000,\r\n    useSSL: false,\r\n    reconnectInterval: 3000\r\n  },\r\n  rules: {\r\n    battery: {\r\n      low: 15.0,\r\n      critical: 13.5\r\n    }\r\n  },\r\n  vehicle: {\r\n    trackWidth: 0.15, // meters\r\n    maxSpeed: 1, // meters per second\r\n    wheelDiameter: 0.039, // meters\r\n    encoderCountsPerRotation: 20, // encoder pulse count per revolution\r\n    gearboxRatio: 25, // 25/1 gearbox ratio\r\n    speedUpdateInterval: 50 // 20Hz\r\n  }\r\n};\r\n\r\nexport default config;\r\n","import { Container } from \"unstated\";\r\n\r\nimport config from \"../config\";\r\nimport { WebSocketState } from \"../lib/web-socket-client/index\";\r\n\r\nexport enum BluetoothState {\r\n  CONNECTING = \"CONNECTING\",\r\n  CONNECTED = \"CONNECTED\",\r\n  DISCONNECTED = \"DISCONNECTED\",\r\n  NOT_SUPPORTED = \"NOT_SUPPORTED\",\r\n  DEVICE_NOT_FOUND = \"DEVICE_NOT_FOUND\",\r\n  DISABLED = \"DISABLED\"\r\n}\r\n\r\nexport interface StatusState {\r\n  bluetoothState: BluetoothState;\r\n  webSocketState: WebSocketState;\r\n  bluetoothDeviceName?: string;\r\n  batteryVoltage?: number;\r\n}\r\n\r\nexport enum BatteryState {\r\n  UNKNOWN = \"UNKNOWN\",\r\n  FULL = \"FULL\",\r\n  LOW = \"LOW\",\r\n  CRITICAL = \"CRITICAL\"\r\n}\r\n\r\nexport default class StatusContainer extends Container<StatusState> {\r\n  readonly state: StatusState = {\r\n    bluetoothState: BluetoothState.DISCONNECTED,\r\n    webSocketState: WebSocketState.DISCONNECTED\r\n  };\r\n\r\n  setBluetoothState(newState: BluetoothState, deviceName?: string) {\r\n    this.setState({\r\n      bluetoothState: newState,\r\n      bluetoothDeviceName: deviceName\r\n    });\r\n  }\r\n\r\n  setWebSocketState(newState: WebSocketState) {\r\n    this.setState({\r\n      webSocketState: newState\r\n    });\r\n  }\r\n\r\n  setBatteryVoltage(batteryVoltage: number | undefined) {\r\n    this.setState({\r\n      batteryVoltage\r\n    });\r\n  }\r\n\r\n  get batteryState(): BatteryState {\r\n    const voltage = this.state.batteryVoltage;\r\n\r\n    if (voltage === undefined) {\r\n      return BatteryState.UNKNOWN;\r\n    }\r\n\r\n    if (voltage <= config.rules.battery.critical) {\r\n      return BatteryState.CRITICAL;\r\n    } else if (voltage <= config.rules.battery.low) {\r\n      return BatteryState.LOW;\r\n    }\r\n\r\n    return BatteryState.FULL;\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport LogContainer from \"../../containers/LogContainer\";\r\nimport StatusContainer, {\r\n  BluetoothState\r\n} from \"../../containers/StatusContainer\";\r\nimport { WebSocketState } from \"../../lib/web-socket-client/index\";\r\nimport webSocketClient from \"../../services/webSocketClient\";\r\n\r\nexport interface ContainerMap {\r\n  logContainer: LogContainer;\r\n  statusContainer: StatusContainer;\r\n}\r\n\r\nexport enum WebSocketCommand {\r\n  BLUETOOTH = \"bluetooth\",\r\n  GET_VOLTAGE = \"get-voltage\"\r\n}\r\n\r\nexport type WebSocketCommandHandlerFn = (\r\n  args: string[],\r\n  containers: ContainerMap\r\n) => void;\r\n\r\nexport interface WebSocketCommandHandlersMap {\r\n  [x: string]: WebSocketCommandHandlerFn | undefined;\r\n}\r\n\r\nconst REQUEST_BATTERY_VOLTAGE_INTERVAL = 60 * 1000; // once per minute\r\n\r\nlet isDone = false;\r\nlet requestBatteryVoltageInterval: number | null = null;\r\n\r\n// glue component, connects external data to containers, does not render anything\r\nconst Glue: React.SFC<{}> = () => (\r\n  <Subscribe to={[LogContainer, StatusContainer]}>\r\n    {(logContainer: LogContainer, statusContainer: StatusContainer) => {\r\n      // return if already set up\r\n      if (isDone) {\r\n        return null;\r\n      }\r\n\r\n      // set initial state\r\n      statusContainer.setWebSocketState(webSocketClient.state);\r\n\r\n      // subscribe to web-socket events\r\n      webSocketClient.subscribe({\r\n        onConnecting: (_ws, _wasConnected) => {\r\n          // not handled\r\n        },\r\n        onOpen: (_ws, _event) => {\r\n          logContainer.addEntry(\"web-socket connection established\");\r\n        },\r\n        onClose: (_ws, _event, wasConnected) => {\r\n          if (wasConnected) {\r\n            logContainer.addEntry(\"web-socket connection was lost\");\r\n          } else {\r\n            logContainer.addEntry(\"establishing web-socket connection failed\");\r\n          }\r\n        },\r\n        onError: (_ws, _event, _wasConnected) => {\r\n          // not handled\r\n        },\r\n        onMessage: (_ws, message) => {\r\n          // handle the message\r\n          handleWebSocketMessage(message, { logContainer, statusContainer });\r\n        },\r\n        onStateChanged: (_ws, newState, _oldState) => {\r\n          statusContainer.setWebSocketState(newState);\r\n\r\n          // also reset other statuses if web-socket connection is lost\r\n          if (newState === WebSocketState.DISCONNECTED) {\r\n            statusContainer.setBluetoothState(BluetoothState.DISCONNECTED);\r\n            statusContainer.setBatteryVoltage(undefined);\r\n          }\r\n        },\r\n        onSendMessage: (_ws, message) => {\r\n          logContainer.addEntry(`> ${message}`);\r\n        }\r\n      });\r\n\r\n      // don't run this logic again\r\n      isDone = true;\r\n\r\n      // don't render anything\r\n      return null;\r\n    }}\r\n  </Subscribe>\r\n);\r\n\r\n// handles web-socket messages\r\nfunction handleWebSocketMessage(message: string, containers: ContainerMap) {\r\n  // ignore empty messages\r\n  if (message.length === 0) {\r\n    return;\r\n  }\r\n\r\n  // log the message\r\n  containers.logContainer.addEntry(`< ${message}`);\r\n\r\n  // parse message\r\n  const [name, ...args] = message.split(\":\");\r\n\r\n  handleWebSocketCommand(name, args, containers);\r\n}\r\n\r\nconst webSocketCommandHandlers: WebSocketCommandHandlersMap = {\r\n  // handles bluetooth state changes\r\n  [WebSocketCommand.BLUETOOTH]: (args: string[], containers: ContainerMap) => {\r\n    const state = args[0] as BluetoothState;\r\n    let bluetoothDeviceName: string | undefined;\r\n\r\n    switch (state) {\r\n      case BluetoothState.CONNECTED:\r\n        bluetoothDeviceName = args[1];\r\n        break;\r\n\r\n      default:\r\n      // no action required\r\n    }\r\n\r\n    // ask for some initial state info once bluetooth connection is established\r\n    if (state === BluetoothState.CONNECTED) {\r\n      // request voltage\r\n      webSocketClient.send(\"get-voltage\");\r\n\r\n      // also setup an interval to ask it periodically\r\n      requestBatteryVoltageInterval = window.setInterval(() => {\r\n        webSocketClient.send(\"get-voltage\");\r\n      }, REQUEST_BATTERY_VOLTAGE_INTERVAL);\r\n    } else {\r\n      // clear the battery voltage interval if exists\r\n      if (requestBatteryVoltageInterval !== null) {\r\n        window.clearInterval(requestBatteryVoltageInterval);\r\n\r\n        requestBatteryVoltageInterval = null;\r\n      }\r\n\r\n      // no bluetooth connection so we can't be sure of battery voltage\r\n      containers.statusContainer.setBatteryVoltage(undefined);\r\n    }\r\n\r\n    containers.statusContainer.setBluetoothState(\r\n      args[0] as BluetoothState,\r\n      bluetoothDeviceName\r\n    );\r\n  },\r\n\r\n  // handles battery voltage level\r\n  [WebSocketCommand.GET_VOLTAGE]: (\r\n    args: string[],\r\n    containers: ContainerMap\r\n  ) => {\r\n    const voltage = parseFloat(args[0]);\r\n\r\n    containers.statusContainer.setBatteryVoltage(voltage);\r\n  }\r\n\r\n  // TODO: handle \"e\"\r\n  // TODO: handle \"set-speed\"\r\n  // TODO: handle \"ip\"\r\n};\r\n\r\n// handles parsed web-socket commands\r\nfunction handleWebSocketCommand(\r\n  name: string,\r\n  args: string[],\r\n  containers: ContainerMap\r\n) {\r\n  const handler = webSocketCommandHandlers[name];\r\n\r\n  // check whether the handler exists\r\n  if (handler === undefined) {\r\n    console.warn(`missing web-socket command handler for \"${name}\"`);\r\n\r\n    return;\r\n  }\r\n\r\n  // call the handler\r\n  handler(args, containers);\r\n}\r\n\r\nexport default Glue;\r\n","import config from \"../config\";\r\nimport WebSocketClient from \"../lib/web-socket-client\";\r\n\r\nconst webSocketClient = new WebSocketClient({\r\n  ...config.webSocket,\r\n  log: console\r\n});\r\n\r\nexport default webSocketClient;\r\n","import * as React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport \"./MainMenu.scss\";\r\n\r\nconst MainMenu: React.SFC<{}> = () => (\r\n  <div className=\"main-menu\">\r\n    <ul className=\"main-menu__nav\">\r\n      <li>\r\n        <NavLink to=\"/status\" activeClassName=\"active\">\r\n          <div className=\"main-menu__nav__icon\">\r\n            <i className=\"icon icon__status\" />\r\n          </div>\r\n          <div className=\"main-menu__nav__text\">\r\n            <span>status</span>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/map\" activeClassName=\"active\">\r\n          <div className=\"main-menu__nav__icon\">\r\n            <i className=\"icon icon__map\" />\r\n          </div>\r\n          <div className=\"main-menu__nav__text\">\r\n            <span>map</span>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/ai\" activeClassName=\"active\">\r\n          <div className=\"main-menu__nav__icon\">\r\n            <i className=\"icon icon__bot\" />\r\n          </div>\r\n          <div className=\"main-menu__nav__text\">\r\n            <span>bot</span>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/remote\" activeClassName=\"active\">\r\n          <div className=\"main-menu__nav__icon\">\r\n            <i className=\"icon icon__remote\" />\r\n          </div>\r\n          <div className=\"main-menu__nav__text\">\r\n            <span>remote</span>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/settings\" activeClassName=\"active\">\r\n          <div className=\"main-menu__nav__icon\">\r\n            <i className=\"icon icon__settings\" />\r\n          </div>\r\n          <div className=\"main-menu__nav__text\">\r\n            <span>settings</span>\r\n          </div>\r\n        </NavLink>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default MainMenu;\r\n","import * as React from \"react\";\r\n\r\nconst BotView: React.SFC<{}> = () => <div className=\"view view--text bot-view\">Bot</div>;\r\n\r\nexport default BotView;\r\n","import * as React from \"react\";\r\n\r\nconst MapView: React.SFC<{}> = () => <div className=\"view view--text map-view\">Map</div>;\r\n\r\nexport default MapView;\r\n","import * as nipplejs from \"nipplejs\";\r\nimport * as React from \"react\";\r\nexport { JoystickEvent, JoystickInstance, JoystickEventName } from \"nipplejs\";\r\n\r\nexport interface JoystickProps {\r\n  name: string;\r\n  config?: nipplejs.JoystickOptions;\r\n  bind?: string;\r\n  onEvent?(name: string, event: nipplejs.JoystickEvent, info: nipplejs.JoystickInstance): void;\r\n}\r\n\r\nexport default class Joystick extends React.Component<JoystickProps> {\r\n  private readonly ref = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidMount() {\r\n    const el = this.ref.current;\r\n\r\n    // return if element could not be found\r\n    if (!el) {\r\n      console.warn(\"grid item dom node not found\");\r\n\r\n      return;\r\n    }\r\n\r\n    // create the nipple manager\r\n    const manager = nipplejs.create({\r\n      zone: el,\r\n      color: \"#FFF\",\r\n      size: 200,\r\n      position: {\r\n        left: \"50%\",\r\n        top: \"50%\",\r\n      },\r\n      mode: \"static\",\r\n    });\r\n\r\n    const { onEvent } = this.props;\r\n\r\n    // only listen for events if even listener has been added\r\n    if (typeof onEvent === \"function\") {\r\n      const bind = this.props.bind ? this.props.bind : \"start move end dir plain\";\r\n\r\n      manager\r\n        .on(bind, (event, nipple) => {\r\n          onEvent(this.props.name, event, nipple);\r\n        })\r\n        .on(\"removed\", (_event, nipple) => {\r\n          nipple.off(bind);\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"joystick\" ref={this.ref} />;\r\n  }\r\n}\r\n","export interface TrackedVehicleOptions {\r\n  trackWidth: number;\r\n  maxSpeed: number;\r\n  wheelDiameter: number;\r\n  encoderCountsPerRotation: number;\r\n  gearboxRatio: number;\r\n  speedUpdateInterval: number;\r\n}\r\n\r\nexport interface MotorSpeeds {\r\n  left: number;\r\n  right: number;\r\n}\r\n\r\n// https://pdfs.semanticscholar.org/29ae/0bc974737b58afd63b6edb8d0837a3383321.pdf\r\nexport default class TrackedVehicleKinematics {\r\n  constructor(private readonly options: TrackedVehicleOptions) {}\r\n\r\n  /**\r\n   * Returns motor speeds in m/s for requested forward speed at given rotational speed.\r\n   *\r\n   * @param speed Speed in m/s\r\n   * @param omega Rotational speed in rad/s\r\n   */\r\n  calculateMotorSpeeds(speed: number, omega: number): MotorSpeeds {\r\n    // TODO: calculate actual kinematics\r\n    return this.limit(\r\n      {\r\n        left: speed + omega,\r\n        right: speed - omega\r\n      },\r\n      this.options.maxSpeed\r\n    );\r\n  }\r\n\r\n  getSpeedEncoderCount(speed: number) {\r\n    const circumference = this.options.wheelDiameter * Math.PI;\r\n    const rps = speed / circumference;\r\n    const actualEncoderCountPerRevolution =\r\n      this.options.encoderCountsPerRotation * this.options.gearboxRatio;\r\n    const targetEncoderCountPerSecond = rps * actualEncoderCountPerRevolution;\r\n\r\n    return Math.floor(targetEncoderCountPerSecond);\r\n  }\r\n\r\n  limit(speeds: MotorSpeeds, maxSpeed: number): MotorSpeeds {\r\n    const maxRequestedSpeedMagnitude = Math.max(\r\n      Math.abs(speeds.left),\r\n      Math.abs(speeds.right)\r\n    );\r\n    const normalizationFactor = Math.min(\r\n      maxSpeed / maxRequestedSpeedMagnitude,\r\n      1.0\r\n    );\r\n\r\n    // console.log(\"normalize\", {\r\n    //   maxRequestedSpeedMagnitude,\r\n    //   normalizationFactor,\r\n    //   speeds,\r\n    //   maxSpeed,\r\n    // });\r\n\r\n    return {\r\n      left: speeds.left * normalizationFactor,\r\n      right: speeds.right * normalizationFactor\r\n    };\r\n  }\r\n\r\n  getEncoderSpeeds(speeds: MotorSpeeds): MotorSpeeds {\r\n    return {\r\n      left: this.getSpeedEncoderCount(speeds.left),\r\n      right: this.getSpeedEncoderCount(speeds.right)\r\n    };\r\n  }\r\n}\r\n","import throttle from \"lodash.throttle\";\r\nimport { dummyLogger, Logger } from \"ts-log\";\r\n\r\nimport WebSocketClient from \"./index\";\r\nimport TrackedVehicleKinematics, {\r\n  TrackedVehicleOptions\r\n} from \"./TrackedVehicleKinematics\";\r\n\r\nexport interface RemoteControllerOptions {\r\n  webSocketClient: WebSocketClient;\r\n  vehicle: TrackedVehicleOptions;\r\n  log?: Logger;\r\n}\r\n\r\nexport default class RemoteController {\r\n  private readonly options: Required<RemoteControllerOptions>;\r\n  private readonly kinematics: TrackedVehicleKinematics;\r\n  private speed = 0;\r\n  private omega = 0;\r\n  private readonly scheduleUpdateMotorSpeeds: () => void;\r\n\r\n  constructor(options: RemoteControllerOptions) {\r\n    this.options = {\r\n      log: dummyLogger,\r\n      ...options\r\n    };\r\n    this.kinematics = new TrackedVehicleKinematics(this.options.vehicle);\r\n\r\n    this.scheduleUpdateMotorSpeeds = throttle(\r\n      () => this.updateMotorSpeeds(),\r\n      this.options.vehicle.speedUpdateInterval\r\n    );\r\n  }\r\n\r\n  setSpeed(speed: number) {\r\n    this.speed = speed;\r\n\r\n    this.scheduleUpdateMotorSpeeds();\r\n  }\r\n\r\n  setOmega(omega: number) {\r\n    this.omega = omega;\r\n\r\n    this.scheduleUpdateMotorSpeeds();\r\n  }\r\n\r\n  private updateMotorSpeeds() {\r\n    const motorSpeeds = this.kinematics.calculateMotorSpeeds(\r\n      this.speed,\r\n      this.omega\r\n    );\r\n    const encoderSpeeds = this.kinematics.getEncoderSpeeds(motorSpeeds);\r\n\r\n    // TODO: only send if sufficiently different from last sent values\r\n    this.options.webSocketClient.send(\r\n      `set-speed:${encoderSpeeds.left}:${encoderSpeeds.right}`\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport Joystick, { JoystickEvent, JoystickEventName, JoystickInstance } from \"../../components/joystick/Joystick\";\r\nimport config from \"../../config\";\r\nimport RemoteController from \"../../lib/web-socket-client/RemoteController\";\r\nimport webSocketClient from \"../../services/webSocketClient\";\r\n\r\nimport \"./RemoteView.scss\";\r\n\r\n// TODO: show track speeds on edges (target and real)\r\nexport default class RemoteView extends React.Component {\r\n  private readonly remoteController = new RemoteController({\r\n    webSocketClient,\r\n    log: console,\r\n    vehicle: config.vehicle,\r\n  });\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"view view--grid remote-view\">\r\n        <div className=\"joystick-grid\">\r\n          <div className=\"joystick-grid__item\">\r\n            <Joystick name=\"speed\" onEvent={(name, event, info) => this.onJoystickEvent(name, event, info)} />\r\n          </div>\r\n          <div className=\"joystick-grid__item\">\r\n            <Joystick name=\"omega\" onEvent={(name, event, info) => this.onJoystickEvent(name, event, info)} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private onJoystickEvent(name: string, event: JoystickEvent, info: JoystickInstance) {\r\n    const interestingEvents: JoystickEventName[] = [\"move\", \"end\"];\r\n\r\n    if (interestingEvents.indexOf(event.type) === -1) {\r\n      return;\r\n    }\r\n\r\n    const isMoveEvent = event.type === \"move\";\r\n\r\n    const xPos = isMoveEvent ? Math.sin(info.angle.radian) * info.distance : 0;\r\n    const yPos = isMoveEvent ? Math.cos(info.angle.radian) * info.distance : 0;\r\n\r\n    // console.log(`${name} x: ${xPos}, y: ${yPos}, distance: ${info.distance}`, this.remoteController);\r\n\r\n    switch (name) {\r\n      case \"speed\":\r\n        this.remoteController.setSpeed(yPos * -1 / 100.0);\r\n        break;\r\n\r\n      case \"omega\":\r\n        this.remoteController.setOmega(xPos / 100.0);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(`Got unexpected joystick \"${name}\" info`);\r\n    }\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nconst SettingsView: React.SFC<{}> = () => <div className=\"view view--text settings-view\">Settings</div>;\r\n\r\nexport default SettingsView;\r\n","import * as classNames from \"classnames\";\r\nimport * as React from \"react\";\r\n\r\nimport \"./Grid.scss\";\r\n\r\nexport type GridProps = React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\r\nexport type GridItemProps = React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement> & {\r\n  scrollToBottom?: boolean;\r\n};\r\n\r\nexport const Grid: React.SFC<GridProps> = ({ children, className }) => (\r\n  <div className={classNames(\"grid\", className)}>{children}</div>\r\n);\r\n\r\n// TODO: scroll to bottom on first render\r\nexport class GridItem extends React.Component<GridItemProps> {\r\n  private readonly ref = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidUpdate() {\r\n    // return if scrolling to bottom is not requested\r\n    if (this.props.scrollToBottom !== true) {\r\n      return;\r\n    }\r\n\r\n    // get the dom node from the reference\r\n    const el = this.ref.current;\r\n\r\n    // return if element could not be found\r\n    if (!el) {\r\n      console.warn(\"grid item dom node not found\");\r\n\r\n      return;\r\n    }\r\n\r\n    // check whether we're aready near the bottom\r\n    const isNearBottom = el.scrollHeight - el.clientHeight <= el.scrollTop + 50;\r\n\r\n    // only force the scroll if near bottom\r\n    if (isNearBottom) {\r\n      el.scrollTop = el.scrollHeight - el.clientHeight;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div ref={this.ref} className={classNames(\"grid__item\", this.props.className)}>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as classNames from \"classnames\";\r\nimport * as React from \"react\";\r\n\r\nexport type IconProps = React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement> & {\r\n  name: string;\r\n  width?: string | number;\r\n  height?: string | number;\r\n};\r\n\r\nconst Icon: React.SFC<IconProps> = ({ children, name, width, height, className }) => (\r\n  <i className={classNames(\"icon\", `icon__${name}`, className)} style={getStyle(width, height)}>\r\n    {children}\r\n  </i>\r\n);\r\n\r\nfunction getStyle(width: string | number | undefined, height: string | number | undefined): React.CSSProperties {\r\n  const style: React.CSSProperties = {};\r\n\r\n  if (typeof width === \"string\") {\r\n    style.width = `${width}${parseFloat(width).toString() === width ? \"px\" : \"\"}`;\r\n  } else if (typeof width === \"number\") {\r\n    style.width = `${width}px`;\r\n  }\r\n\r\n  if (typeof height === \"string\") {\r\n    style.height = `${height}${parseFloat(height).toString() === height ? \"px\" : \"\"}`;\r\n  } else if (typeof height === \"number\") {\r\n    style.height = `${height}px`;\r\n  }\r\n\r\n  return style;\r\n}\r\n\r\nexport default Icon;\r\n","export default function pad(\r\n  data: string | number,\r\n  length: number,\r\n  padder = \" \"\r\n): string {\r\n  const str = typeof data === \"string\" ? data : data.toString();\r\n\r\n  // return as is if already long enough\r\n  if (str.length >= length) {\r\n    return str;\r\n  }\r\n\r\n  const missingLength = length - str.length;\r\n\r\n  return `${new Array(missingLength + 1).join(padder)}${str}`;\r\n}\r\n","import { titleCase } from \"change-case\";\r\nimport * as classNames from \"classnames\";\r\nimport * as React from \"react\";\r\nimport { Subscribe } from \"unstated\";\r\n\r\nimport { Grid, GridItem } from \"../../components/grid/Grid\";\r\nimport Icon from \"../../components/icon/Icon\";\r\nimport LogContainer from \"../../containers/LogContainer\";\r\nimport StatusContainer, {\r\n  BatteryState,\r\n  BluetoothState\r\n} from \"../../containers/StatusContainer\";\r\nimport { WebSocketState } from \"../../lib/web-socket-client/index\";\r\nimport assertUnreachable from \"../../services/assertUnreachable\";\r\nimport formatTime from \"../../services/formatTime\";\r\n\r\nimport \"./StatusView.scss\";\r\n\r\n// TODO: add motor controller, http server, IMU, heartbeat\r\nconst StatusView: React.SFC = () => (\r\n  <Subscribe to={[LogContainer, StatusContainer]}>\r\n    {(logContainer: LogContainer, statusContainer: StatusContainer) => (\r\n      <div className=\"view view--grid status-view\">\r\n        <Grid className=\"status-grid\">\r\n          <GridItem\r\n            className={classNames(\r\n              \"grid-status\",\r\n              statusContainer.state.bluetoothState === BluetoothState.CONNECTED\r\n                ? \"bg--good\"\r\n                : \"bg--bad\"\r\n            )}\r\n          >\r\n            <div className=\"grid__icon\">\r\n              <i className=\"icon icon__bluetooth\" />\r\n            </div>\r\n            <div className=\"grid__text\">\r\n              <div className=\"grid__text--primary\">Bluetooth</div>\r\n              <div className=\"grid__text--secondary\">\r\n                {titleCase(statusContainer.state.bluetoothState)}\r\n                {statusContainer.state.bluetoothDeviceName\r\n                  ? `: ${statusContainer.state.bluetoothDeviceName}`\r\n                  : \"\"}\r\n              </div>\r\n            </div>\r\n          </GridItem>\r\n          <GridItem\r\n            className={classNames(\r\n              \"grid-status\",\r\n              statusContainer.state.webSocketState === WebSocketState.CONNECTED\r\n                ? \"bg--good\"\r\n                : \"bg--bad\"\r\n            )}\r\n          >\r\n            <div className=\"grid__icon\">\r\n              <i className=\"icon icon__web-socket\" />\r\n            </div>\r\n            <div className=\"grid__text\">\r\n              <div className=\"grid__text--primary\">Web Socket</div>\r\n              <div className=\"grid__text--secondary\">\r\n                {titleCase(statusContainer.state.webSocketState)}\r\n              </div>\r\n            </div>\r\n          </GridItem>\r\n          <GridItem\r\n            className={classNames(\r\n              \"grid-status\",\r\n              getBatteryLevelClass(statusContainer.batteryState)\r\n            )}\r\n          >\r\n            <div className=\"grid__icon\">\r\n              <i className=\"icon icon__battery\" />\r\n            </div>\r\n            <div className=\"grid__text\">\r\n              <div className=\"grid__text--primary\">Battery</div>\r\n              <div className=\"grid__text--secondary\">\r\n                {statusContainer.state.batteryVoltage\r\n                  ? `${statusContainer.state.batteryVoltage.toFixed(1)}V`\r\n                  : \"Unknown\"}\r\n              </div>\r\n            </div>\r\n          </GridItem>\r\n          <GridItem className=\"log\" scrollToBottom={true}>\r\n            {logContainer.state.entries.map(entry => (\r\n              <div className=\"log__entry\" key={entry.id}>\r\n                <span className=\"log__entry__time\">\r\n                  {formatTime(entry.time)}\r\n                </span>{\" \"}\r\n                <span className=\"log__entry__message\">{entry.message}</span>\r\n              </div>\r\n            ))}\r\n          </GridItem>\r\n        </Grid>\r\n        <div className=\"clear-log-button\" onClick={() => logContainer.clear()}>\r\n          <Icon name=\"clear\" />\r\n        </div>\r\n      </div>\r\n    )}\r\n  </Subscribe>\r\n);\r\n\r\nfunction getBatteryLevelClass(batteryState: BatteryState): string {\r\n  switch (batteryState) {\r\n    case BatteryState.UNKNOWN:\r\n      return \"bg--warn\";\r\n\r\n    case BatteryState.FULL:\r\n      return \"bg--good\";\r\n\r\n    case BatteryState.LOW:\r\n      return \"bg--warn\";\r\n\r\n    case BatteryState.CRITICAL:\r\n      return \"bg--bad\";\r\n\r\n    default:\r\n      return assertUnreachable(batteryState, \"got unexpected battery state\");\r\n  }\r\n}\r\n\r\nexport default StatusView;\r\n","export default function assertUnreachable(\r\n  value: never,\r\n  message: string\r\n): never {\r\n  throw new Error(`${message} (${value})`);\r\n}\r\n","import pad from \"./pad\";\r\n\r\nexport default function formatTime(date: Date): string {\r\n  return (\r\n    `${pad(date.getHours(), 2, \"0\")}:` +\r\n    `${pad(date.getMinutes(), 2, \"0\")}:` +\r\n    `${pad(date.getSeconds(), 2, \"0\")}.` +\r\n    `${pad(date.getMilliseconds(), 3, \"0\")}`\r\n  );\r\n}\r\n","import * as React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch\n} from \"react-router-dom\";\nimport { Provider } from \"unstated\";\n\nimport Glue from \"./components/glue/Glue\";\nimport MainMenu from \"./components/main-menu/MainMenu\";\nimport BotView from \"./views/bot/BotView\";\nimport MapView from \"./views/map/MapView\";\nimport RemoteView from \"./views/remote/RemoteView\";\nimport SettingsView from \"./views/settings/SettingsView\";\nimport StatusView from \"./views/status/StatusView\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider>\n        <Glue />\n        <Router>\n          <div className=\"app\">\n            <Switch>\n              <Route path=\"/status\" component={StatusView} />\n              <Route path=\"/map\" component={MapView} />\n              <Route path=\"/remote\" component={RemoteView} />\n              <Route path=\"/ai\" component={BotView} />\n              <Route path=\"/settings\" component={SettingsView} />\n              <Route exact={true} path=\"/\">\n                <Redirect to=\"/status\" />\n              </Route>\n            </Switch>\n            <MainMenu />\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\n"],"sourceRoot":""}