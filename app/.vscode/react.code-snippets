{
  // Place your beginning workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Functional component without props": {
    "scope": "typescriptreact",
    "prefix": "fc",
    "body": [
      "import React from \"react\";",
      "import { Container } from \"../Container/Container\";",
      "",
      "export const ${1:$TM_FILENAME_BASE}: React.FC = () => (",
      "  <Container>",
      "    $0",
      "  </Container>",
      ");",
      ""
    ],
    "description": "Create functional component without props"
  },
  "Functional component with props": {
    "scope": "typescriptreact",
    "prefix": "fcp",
    "body": [
      "import React from \"react\";",
      "import { Container } from \"../Container/Container\";",
      "",
      "export interface ${1:$TM_FILENAME_BASE}Props {",
      "  $2: ${3:boolean};",
      "}",
      "",
      "",
      "export const $1: React.FC<$1Props> = ({ $2 }) => (",
      "  <Container>",
      "    {$2}$0",
      "  </Container>",
      ");",
      ""
    ],
    "description": "Create functional component with props"
  },
  "View without props": {
    "scope": "typescriptreact",
    "prefix": "view",
    "body": [
      "import React from \"react\";",
      "import { View } from \"../../components/View/View\";",
      "",
      "export const ${1:$TM_FILENAME_BASE}: React.FC = () => (",
      "  <View>",
      "    $0",
      "  </View>",
      ");",
      ""
    ],
    "description": "Create view without props"
  },
  "View with props": {
    "scope": "typescriptreact",
    "prefix": "viewp",
    "body": [
      "import React from \"react\";",
      "import { View } from \"../../components/View/View\";",
      "",
      "export interface ${1:$TM_FILENAME_BASE}Props {",
      "  $2: ${3:boolean};",
      "}",
      "",
      "export const ${1:$TM_FILENAME_BASE}: React.FC<$1Props> = ({ $2 }) => (",
      "  <View>",
      "    {$2}$0",
      "  </View>",
      ");",
      ""
    ],
    "description": "Create view with props"
  },
  "Story": {
    "scope": "typescriptreact",
    "prefix": "story",
    "body": [
      "import React from \"react\";",
      "import { $1 } from \"./$1\";",
      "",
      "export default {",
      "  title: \"$1\",",
      "  component: $1,",
      "};",
      "",
      "export const Default = () => <$1 />;",
      ""
    ],
    "description": "Create storybook story"
  },
  "Import styles": {
    "scope": "typescriptreact",
    "prefix": "styles",
    "body": ["import styles from \"./${1:$TM_FILENAME_BASE}.module.scss\";"],
    "description": "Import CSS module styles for current file"
  },
  "Import classNames": {
    "scope": "typescriptreact",
    "prefix": "classNames",
    "body": ["import classNames from \"classnames\";"],
    "description": "Import classnames module"
  },
  "Import SCSS variables": {
    "scope": "scss",
    "prefix": "variables",
    "body": ["@import \"../../theme/variables\";"],
    "description": "Import SCSS theme variables"
  },
  "Import SCSS grid": {
    "scope": "scss",
    "prefix": "grid",
    "body": ["@import \"../../theme/functions/grid\";"],
    "description": "Import SCSS grid function"
  },
  "Import SCSS screen": {
    "scope": "scss",
    "prefix": "screen",
    "body": ["@import \"../../theme/functions/screen\";"],
    "description": "Import SCSS screen function"
  },
  "useState": {
    "scope": "typescriptreact",
    "prefix": ["state", "useState"],
    "body": "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:false});",
    "description": "Generate useState statement"
  },
  "useRecoilState": {
    "scope": "typescript,typescriptreact",
    "prefix": ["recoil", "useRecoilState"],
    "body": "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useRecoilState(${2:false});",
    "description": "Generate useRecoilState statement"
  }
}
